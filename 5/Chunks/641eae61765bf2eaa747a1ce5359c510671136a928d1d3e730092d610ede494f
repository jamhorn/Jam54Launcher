 would give "( 1.23e+001, -1.69e+001 )".
            If <see paramref="isShowZ"/>
            is true, then the third "Z" coordinate is also shown.
            </summary>
            <param name="format">A format string that will be used to format each of
            the two double type values (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
            <param name="isShowZ">true to show the third "Z" or low dependent value coordinate</param>
        </member>
        <member name="M:ZedGraph.PointPair.ToString(System.String,System.String,System.String)">
            <summary>
            Format this PointPair value using different general format strings for the X, Y, and Z values.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            </summary>
            <param name="formatX">A format string that will be used to format the X
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatY">A format string that will be used to format the Y
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatZ">A format string that will be used to format the Z
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="T:ZedGraph.PointPair4">
            <summary>
            The basic <see cref="T:ZedGraph.PointPair" /> class holds three data values (X, Y, Z).  This
            class extends the basic PointPair to contain four data values (X, Y, Z, T).
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.3 $ $Date: 2007-03-17 18:43:44 $ </version>
        </member>
        <member name="F:ZedGraph.PointPair4.T">
            <summary>
            This PointPair4's T coordinate.
            </summary>
        </member>
        <member name="M:ZedGraph.PointPair4.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ZedGraph.PointPair4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a point pair with the specified X, Y, Z, and T value.
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="z">This pair's z coordinate.</param>
            <param name="t">This pair's t coordinate.</param>
        </member>
        <member name="M:ZedGraph.PointPair4.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Creates a point pair with the specified X, Y, base value, and
            label (<see cref="F:ZedGraph.PointPair.Tag"/>).
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="z">This pair's z coordinate.</param>
            <param name="t">This pair's t coordinate.</param>
            <param name="label">This pair's string label (<see cref="F:ZedGraph.PointPair.Tag"/>)</param>
        </member>
        <member name="M:ZedGraph.PointPair4.#ctor(ZedGraph.PointPair4)">
            <summary>
            The PointPair4 copy constructor.
            </summary>
            <param name="rhs">The basis for the copy.</param>
        </member>
        <member name="F:ZedGraph.PointPair4.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.PointPair4.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.PointPair4.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:ZedGraph.PointPair4.IsInvalid4D">
            <summary>
            Readonly value that determines if either the X, Y, Z, or T
            coordinate in this PointPair4 is an invalid (not plotable) value.
            It is considered invalid if it is missing (equal to System.Double.Max),
            Infinity, or NaN.
            </summary>
            <returns>true if any value is invalid</returns>
        </member>
        <member name="M:ZedGraph.PointPair4.ToString(System.Boolean)">
            <summary>
            Format this PointPair4 value using the default format.  Example:  "( 12.345, -16.876 )".
            The two double values are formatted with the "g" format type.
            </summary>
            <param name="isShowZT">true to show the third "Z" and fourth "T" value coordinates</param>
            <returns>A string representation of the PointPair4</returns>
        </member>
        <member name="M:ZedGraph.PointPair4.ToString(System.String,System.Boolean)">
            <summary>
            Format this PointPair value using a general format string.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            If <see paramref="isShowZ"/>
            is true, then the third "Z" coordinate is also shown.
            </summary>
            <param name="format">A format string that will be used to format each of
            the two double type values (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
            <param name="isShowZT">true to show the third "Z" or low dependent value coordinate</param>
        </member>
        <member name="M:ZedGraph.PointPair4.ToString(System.String,System.String,System.String,System.String)">
            <summary>
            Format this PointPair value using different general format strings for the X, Y, and Z values.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            </summary>
            <param name="formatX">A format string that will be used to format the X
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatY">A format string that will be used to format the Y
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatZ">A format string that will be used to format the Z
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatT">A format string that will be used to format the T
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="T:ZedGraph.PointPairBase">
            <summary>
            This is a base class that provides base-level functionality for a data point consisting
            of an (X,Y) pair of double values.
            </summary>
            <remarks>
            This class is typically a base class for actual <see cref="T:ZedGraph.PointPair" /> type implementations.
            </remarks>
            
            <author> Jerry Vos modified by John Champion </author>
            <version> $Revision: 1.4 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:ZedGraph.PointPairBase.Missing">
            <summary>
            Missing values are represented internally using <see cref="F:System.Double.MaxValue"/>.
            </summary>
        </member>
        <member name="F:ZedGraph.PointPairBase.DefaultFormat">
            <summary>
            The default format to be used for displaying point values via the
            <see cref="M:ZedGraph.PointPairBase.ToString"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.PointPairBase.X">
            <summary>
            This PointPair's X coordinate
            </summary>
        </member>
        <member name="F:ZedGraph.PointPairBase.Y">
            <summary>
            This PointPair's Y coordinate
            </summary>
        </member>
        <member name="M:ZedGraph.PointPairBase.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ZedGraph.PointPairBase.#ctor(System.Double,System.Double)">
            <summary>
            Creates a point pair with the specified X and Y.
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
        </member>
        <member name="M:ZedGraph.PointPairBase.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a point pair from the specified <see cref="T:System.Drawing.PointF"/> struct.
            </summary>
            <param name="pt">The <see cref="T:System.Drawing.PointF"/> struct from which to get the
            new <see cref="T:ZedGraph.PointPair"/> values.</param>
        </member>
        <member name="M:ZedGraph.PointPairBase.#ctor(ZedGraph.PointPairBase)">
            <summary>
            The PointPairBase copy constructor.
            </summary>
            <param name="rhs">The basis for the copy.</param>
        </member>
        <member name="F:ZedGraph.PointPairBase.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.PointPairBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.PointPairBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:ZedGraph.PointPairBase.IsMissing">
            <summary>
            Readonly value that determines if either the X or the Y
            coordinate in this PointPair is a missing value.
            </summary>
            <returns>true if either value is missing</returns>
        </member>
        <member name="P:ZedGraph.PointPairBase.IsInvalid">
            <summary>
            Readonly value that determines if either the X or the Y
            coordinate in this PointPair is an invalid (not plotable) value.
            It is considered invalid if it is missing (equal to System.Double.Max),
            Infinity, or NaN.
            </summary>
            <returns>true if either value is invalid</returns>
        </member>
        <member name="M:ZedGraph.PointPairBase.IsValueInvalid(System.Double)">
            <summary>
            static method to determine if the specified point value is invalid.
            </summary>
            <remarks>The value is considered invalid if it is <see cref="F:ZedGraph.PointPairBase.Missing"/>,
            <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.NegativeInfinity"/>
            or <see cref="F:System.Double.NaN"/>.</remarks>
            <param name="value">The value to be checked for validity.</param>
            <returns>true if the value is invalid, false otherwise</returns>
        </member>
        <member name="M:ZedGraph.PointPairBase.op_Implicit(ZedGraph.PointPairBase)~System.Drawing.PointF">
            <summary>
            Implicit conversion from PointPair to PointF.  Note that this conversion
            can result in data loss, since the data are being cast from a type
            double (64 bit) to a float (32 bit).
            </summary>
            <param name="pair">The PointPair struct on which to operate</param>
            <returns>A PointF struct equivalent to the PointPair</returns>
        </member>
        <member name="M:ZedGraph.PointPairBase.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:ZedGraph.PointPairBase"/> objects for equality.  To be equal, X and Y
            must be exactly the same between the two objects.
            </summary>
            <param name="obj">The <see cref="T:ZedGraph.PointPairBase"/> object to be compared with.</param>
            <returns>true if the <see cref="T:ZedGraph.PointPairBase"/> objects are equal, false otherwise</returns>
        </member>
        <member name="M:ZedGraph.PointPairBase.GetHashCode">
            <summary>
            Return the HashCode from the base class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZedGraph.PointPairBase.ToString">
            <summary>
            Format this PointPair value using the default format.  Example:  "( 12.345, -16.876 )".
            The two double values are formatted with the "g" format type.
            </summary>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="M:ZedGraph.PointPairBase.ToString(System.String)">
            <summary>
            Format this PointPair value using a general format string.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            </summary>
            <param name="format">A format string that will be used to format each of
            the two double type values (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="M:ZedGraph.PointPairBase.ToString(System.String,System.String)">
            <summary>
            Format this PointPair value using different general format strings for the X and Y values.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            The Z value is not displayed (see <see cref="M:ZedGraph.PointPair.ToString(System.String,System.String,System.String)"/>).
            </summary>
            <param name="formatX">A format string that will be used to format the X
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatY">A format string that will be used to format the Y
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="T:ZedGraph.PointPairCV">
            <summary>
            A simple instance that stores a data point (X, Y, Z).  This differs from a regular
            <see cref="T:ZedGraph.PointPair" /> in that it maps the <see cref="P:ZedGraph.PointPairCV.ColorValue" /> property
            to an independent value.  That is, <see cref="P:ZedGraph.PointPairCV.ColorValue" /> and
            <see cref="F:ZedGraph.PointPair.Z" /> are not related (as they are in the
            <see cref="T:ZedGraph.PointPair" />).
            </summary>
        </member>
        <member name="F:ZedGraph.PointPairCV._colorValue">
            <summary>
            This is a user value that can be anything.  It is used to provide special 
            property-based coloration to the graph elements.
            </summary>
        </member>
        <member name="M:ZedGraph.PointPairCV.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a point pair with the specified X, Y, and base value.
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="z">This pair's z or lower dependent coordinate.</param>
        </member>
        <member name="F:ZedGraph.PointPairCV.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.PointPairCV.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.PointPairCV.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:ZedGraph.PointPairCV.ColorValue">
            <summary>
            The ColorValue property.  This is used with the
            <see cref="F:ZedGraph.FillType.GradientByColorValue" /> option.
            </summary>
        </member>
        <member name="T:ZedGraph.PointPairList">
            <summary>
            A collection class containing a list of <see cref="T:ZedGraph.PointPair"/> objects
            that define the set of points to be displayed on the curve.
            </summary>
            <seealso cref="T:ZedGraph.BasicArrayPointList" />
            <seealso cref="T:ZedGraph.IPointList" />
            
            <author> Jerry Vos based on code by John Champion
            modified by John Champion</author>
            <version> $Revision: 3.37 $ $Date: 2007-06-29 15:39:07 $ </version>
        </member>
        <member name="F:ZedGraph.PointPairList._sorted">
            <summary>Private field to maintain the sort status of this
            <see cref="T:ZedGraph.PointPairList"/>.  Use the public property
            <see cref="P:ZedGraph.PointPairList.Sorted"/> to access this value.
            </summary>
        </member>
        <member name="P:ZedGraph.PointPairList.Sorted">
            <summary>
            true if the list is currently sorted.
            </summary>
            <seealso cref="M:ZedGraph.PointPairList.Sort"/>
        </member>
        <member name="M:ZedGraph.PointPairList.#ctor">
            <summary>
            Default constructor for the collection class
            </summary>
        </member>
        <member name="M:ZedGraph.PointPairList.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructor to initialize the PointPairList from two arrays of
            type double.
            </summary>
        </member>
        <member name="M:ZedGraph.PointPairList.#ctor(ZedGraph.IPointList)">
            <summary>
            Constructor to initialize the PointPairList from an IPointList
            </summary>
        </member>
        <member name="M:ZedGraph.PointPairList.#ctor(System.Double[],System.Double[],System.Double[])">
            <summary>
            Constructor to initialize the PointPairList from three arrays of
            type double.
            </summary>
        </member>
        <member name="M:ZedGraph.PointPairList.#ctor(ZedGraph.PointPairList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The PointPairList from which to copy</param>
        </member>
        <member name="M:ZedGraph.PointPairList.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.PointPairList.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Add(ZedGraph.PointPair)">
            <summary>
            Add a <see cref="T:ZedGraph.PointPair"/> object to the collection at the end of the list.
            </summary>
            <param name="point">The <see cref="T:ZedGraph.PointPair"/> object to
            be added</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Add(ZedGraph.PointPairList)">
            <summary>
            Add a <see cref="T:ZedGraph.PointPairList"/> object to the collection at the end of the list.
            </summary>
            <param name="pointList">A reference to the <see cref="T:ZedGraph.PointPairList"/> object to
            be added</param>
            <returns>The zero-based ordinal index where the last point was added in the list,
            or -1 if no points were added.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Add(System.Double[],System.Double[])">
            <summary>
            Add a set of points to the PointPairList from two arrays of type double.
            If either array is null, then a set of ordinal values is automatically
            generated in its place (see <see cref="F:ZedGraph.AxisType.Ordinal"/>.
            If the arrays are of different size, then the larger array prevails and the
            smaller array is padded with <see cref="F:ZedGraph.PointPairBase.Missing"/> values.
            </summary>
            <param name="x">A double[] array of X values</param>
            <param name="y">A double[] array of Y values</param>
            <returns>The zero-based ordinal index where the last point was added in the list,
            or -1 if no points were added.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Add(System.Double[],System.Double[],System.Double[])">
            <summary>
            Add a set of points to the <see cref="T:ZedGraph.PointPairList"/> from three arrays of type double.
            If the X or Y array is null, then a set of ordinal values is automatically
            generated in its place (see <see cref="F:ZedGraph.AxisType.Ordinal"/>.  If the <see paramref="baseVal"/>
            is null, then it is set to zero.
            If the arrays are of different size, then the larger array prevails and the
            smaller array is padded with <see cref="F:ZedGraph.PointPairBase.Missing"/> values.
            </summary>
            <param name="x">A double[] array of X values</param>
            <param name="y">A double[] array of Y values</param>
            <param name="z">A double[] array of Z or lower-dependent axis values</param>
            <returns>The zero-based ordinal index where the last point was added in the list,
            or -1 if no points were added.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Add(System.Double,System.Double)">
            <summary>
            Add a single point to the <see cref="T:ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Add(System.Double,System.Double,System.String)">
            <summary>
            Add a single point to the <see cref="T:ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="tag">The Tag value for the PointPair</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Add a single point to the <see cref="T:ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z or lower dependent axis value</param>
            <returns>The zero-based ordinal index where the point was added
            in the list.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Add(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Add a single point to the <see cref="T:ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z or lower dependent axis value</param>
            <param name="tag">The Tag value for the PointPair</param>
            <returns>The zero-based ordinal index where the point was added
            in the list.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Insert(System.Int32,ZedGraph.PointPair)">
            <summary>
            Add a <see cref="T:ZedGraph.PointPair"/> object to the collection at the specified,
            zero-based, index location.
            </summary>
            <param name="index">
            The zero-based ordinal index where the point is to be added in the list.
            </param>
            <param name="point">
            The <see cref="T:ZedGraph.PointPair"/> object to be added.
            </param>
        </member>
        <member name="M:ZedGraph.PointPairList.Insert(System.Int32,System.Double,System.Double)">
            <summary>
            Add a single point (from values of type double ) to the <see cref="T:ZedGraph.PointPairList"/> at the specified,
            zero-based, index location.
            </summary>
            <param name="index">
            The zero-based ordinal index where the point is to be added in the list.
            </param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
        </member>
        <member name="M:ZedGraph.PointPairList.Insert(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Add a single point (from values of type double ) to the <see cref="T:ZedGraph.PointPairList"/> at the specified,
            zero-based, index location.
            </summary>
            <param name="index">
            The zero-based ordinal index where the point is to be added in the list.
            </param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z or lower dependent axis value</param>
        </member>
        <member name="M:ZedGraph.PointPairList.IndexOfTag(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:ZedGraph.PointPair"/> with the specified label <see cref="F:ZedGraph.PointPair.Tag"/>.
            </summary>
            <remarks>The <see cref="F:ZedGraph.PointPair.Tag"/> object must be of type <see cref="T:System.String"/>
            for this method to find it.</remarks>
            <param name="label">The <see cref="T:System.String"/> label that is in the
            <see cref="F:ZedGraph.PointPair.Tag"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:ZedGraph.PointPair"/>,
            or -1 if the <see cref="T:ZedGraph.PointPair"/> is not in the list</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:ZedGraph.PointPairList"/> objects to see if they are equal.
            </summary>
            <remarks>Equality is based on equal count of <see cref="T:ZedGraph.PointPair"/> items, and
            each individual <see cref="T:ZedGraph.PointPair"/> must be equal (as per the
            <see cref="M:ZedGraph.PointPair.Equals(System.Object)"/> method.</remarks>
            <param name="obj">The <see cref="T:ZedGraph.PointPairList"/> to be compared with for equality.</param>
            <returns>true if the <see cref="T:ZedGraph.PointPairList"/> objects are equal, false otherwise.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.GetHashCode">
            <summary>
            Return the HashCode from the base class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Sort">
            <summary>
            Sorts the list according to the point x values. Will not sort the 
            list if the list is already sorted.
            </summary>
            <returns>If the list was sorted before sort was called</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.Sort(ZedGraph.SortType)">
             <summary>
             Sorts the list according to the point values . Will not sort the 
             list if the list is already sorted.
             </summary>
             <param name="type"></param>  The <see cref = "T:ZedGraph.SortType"/>
            used to determine whether the X or Y values will be used to sort
            the list
             <returns>If the list was sorted before sort was called</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.SetX(System.Double[])">
            <summary>
            Set the X values for this <see cref="T:ZedGraph.PointPairList"/> from the specified
            array of double values.
            </summary>
            <remarks>
            If <see paramref="x"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="x"/>
            has less values, then the corresponding <see cref="T:ZedGraph.PointPairList"/> values
            will not be changed.  That is, if the <see cref="T:ZedGraph.PointPairList"/> has 20 values
            and <see paramref="x"/> has 15 values, then the first 15 values of the
            <see cref="T:ZedGraph.PointPairList"/> will be changed, and the last 5 values will not be
            changed.
            </remarks>
            <param name="x">An array of double values that will replace the existing X
            values in the <see cref="T:ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:ZedGraph.PointPairList.SetY(System.Double[])">
            <summary>
            Set the Y values for this <see cref="T:ZedGraph.PointPairList"/> from the specified
            array of double values.
            </summary>
            <remarks>
            If <see paramref="y"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="y"/>
            has less values, then the corresponding <see cref="T:ZedGraph.PointPairList"/> values
            will not be changed.  That is, if the <see cref="T:ZedGraph.PointPairList"/> has 20 values
            and <see paramref="y"/> has 15 values, then the first 15 values of the
            <see cref="T:ZedGraph.PointPairList"/> will be changed, and the last 5 values will not be
            changed.
            </remarks>
            <param name="y">An array of double values that will replace the existing Y
            values in the <see cref="T:ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:ZedGraph.PointPairList.SetZ(System.Double[])">
            <summary>
            Set the Z values for this <see cref="T:ZedGraph.PointPairList"/> from the specified
            array of double values.
            </summary>
            <remarks>
            If <see paramref="z"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="z"/>
            has less values, then the corresponding <see cref="T:ZedGraph.PointPairList"/> values
            will not be changed.  That is, if the <see cref="T:ZedGraph.PointPairList"/> has 20 values
            and <see paramref="z"/> has 15 values, then the first 15 values of the
            <see cref="T:ZedGraph.PointPairList"/> will be changed, and the last 5 values will not be
            changed.
            </remarks>
            <param name="z">An array of double values that will replace the existing Z
            values in the <see cref="T:ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:ZedGraph.PointPairList.SumY(ZedGraph.PointPairList)">
            <summary>
            Add the Y values from the specified <see cref="T:ZedGraph.PointPairList"/> object to this
            <see cref="T:ZedGraph.PointPairList"/>.  If <see paramref="sumList"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="sumList"/>
            has less values, the missing values are assumed to be zero.
            </summary>
            <param name="sumList">A reference to the <see cref="T:ZedGraph.PointPairList"/> object to
            be summed into the this <see cref="T:ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:ZedGraph.PointPairList.SumX(ZedGraph.PointPairList)">
            <summary>
            Add the X values from the specified <see cref="T:ZedGraph.PointPairList"/> object to this
            <see cref="T:ZedGraph.PointPairList"/>.  If <see paramref="sumList"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="sumList"/>
            has less values, the missing values are assumed to be zero.
            </summary>
            <param name="sumList">A reference to the <see cref="T:ZedGraph.PointPairList"/> object to
            be summed into the this <see cref="T:ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:ZedGraph.PointPairList.InterpolateX(System.Double)">
            <summary>
            Linearly interpolate the data to find an arbitraty Y value that corresponds to the specified X value.
            </summary>
            <remarks>
            This method uses linear interpolation with a binary search algorithm.  It therefore
            requires that the x data be monotonically increasing.  Missing values are not allowed.  This
            method will extrapolate outside the range of the PointPairList if necessary.
            </remarks>
            <param name="xTarget">The target X value on which to interpolate</param>
            <returns>The Y value that corresponds to the <see paramref="xTarget"/> value.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.SplineInterpolateX(System.Double,System.Double)">
            <summary>
            Use Cardinal Splines to Interpolate the data to find an arbitraty Y value that corresponds to
            the specified X value.
            </summary>
            <remarks>
            This method uses cardinal spline interpolation with a binary search algorithm.  It therefore
            requires that the x data be monotonically increasing.  Missing values are not allowed.  This
            method will not extrapolate outside the range of the PointPairList (it returns
            <see cref="F:ZedGraph.PointPairBase.Missing"/> if extrapolation would be required).  WARNING: Cardinal
            spline interpolation can generate curves with non-unique X values for higher tension
            settings.  That is, there may be multiple X values for the same Y value.  This routine
            follows the path of the spline curve until it reaches the FIRST OCCURRENCE of the
            target X value.  It does not check to see if other solutions are possible.
            </remarks>
            <param name="xTarget">The target X value on which to interpolate</param>
            <param name="tension">The tension setting that controls the curvature of the spline fit.
            Typical values are between 0 and 1, where 0 is a linear fit, and 1 is lots of "roundness".
            Values greater than 1 may give odd results.
            </param>
            <returns>The Y value that corresponds to the <see paramref="xTarget"/> value.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.InterpolateY(System.Double)">
            <summary>
            Linearly interpolate the data to find an arbitraty X value that corresponds to the specified Y value.
            </summary>
            <remarks>
            This method uses linear interpolation with a binary search algorithm.  It therefore
            requires that the Y data be monotonically increasing.  Missing values are not allowed.  This
            method will extrapolate outside the range of the PointPairList if necessary.
            </remarks>
            <param name="yTarget">The target Y value on which to interpolate</param>
            <returns>The X value that corresponds to the <see paramref="yTarget"/> value.</returns>
        </member>
        <member name="M:ZedGraph.PointPairList.LinearRegression(ZedGraph.IPointList,System.Int32)">
            <summary>
            Use linear regression to form a least squares fit of an existing
            <see cref="T:ZedGraph.IPointList"/> instance.
            </summary>
            <remarks>The output <see cref="T:ZedGraph.PointPairList" /> will cover the
            same X range of data as the original dataset.
            </remarks>
            <param name="points">An <see cref="T:ZedGraph.IPointList" /> instance containing
            the data to be regressed.</param>
            <param name="pointCount">The number of desired points to be included
            in the resultant <see cref="T:ZedGraph.PointPairList" />.
            </param>
            <returns>A new <see cref="T:ZedGraph.PointPairList" /> containing the resultant
            data fit.
            </returns>
        </member>
        <member name="M:ZedGraph.PointPairList.LinearRegression(ZedGraph.IPointList,System.Int32,System.Double,System.Double)">
            <summary>
            Use linear regression to form a least squares fit of an existing
            <see cref="T:ZedGraph.IPointList"/> instance.
            </summary>
            <param name="points">An <see cref="T:ZedGraph.IPointList" /> instance containing
            the data to be regressed.</param>
            <param name="pointCount">The number of desired points to be included
            in the resultant <see cref="T:ZedGraph.PointPairList" />.
            </param>
            <param name="minX">The minimum X value of the resultant
            <see cref="T:ZedGraph.PointPairList" />.</param>
            <param name="maxX">The maximum X value of the resultant
            <see cref="T:ZedGraph.PointPairList" />.</param>
            <returns>A new <see cref="T:ZedGraph.PointPairList" /> containing the resultant
            data fit.
            </returns>
            <author> Brian Chappell - lazarusds
                     modified by John Champion</author>
        </member>
        <member name="T:ZedGraph.PolyObj">
            <summary>
            A class that represents a bordered and/or filled polygon object on
            the graph.  A list of <see cref="T:ZedGraph.PolyObj"/> objects is maintained by
            the <see cref="T:ZedGraph.GraphObjList"/> collection class.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2007-01-25 07:56:09 $ </version>
        </member>
        <member name="F:ZedGraph.PolyObj._isClosedFigure">
            <summary>
            private value that determines if the polygon will be automatically closed.
            true to close the figure, false to leave it "open."  Use the public property
            <see cref="P:ZedGraph.PolyObj.IsClosedFigure" /> to access this value.
            </summary>
        </member>
        <member name="P:ZedGraph.PolyObj.Points">
            <summary>
            Gets or sets the <see cref="T:ZedGraph.PointD"/> array that defines
            the polygon.  This will be in units determined by
            <see cref="P:ZedGraph.Location.CoordinateFrame"/>.
            </summary>
        </member>
        <member name="P:ZedGraph.PolyObj.IsClosedFigure">
            <summary>
            Gets or sets a value that determines if the polygon will be automatically closed.
            true to close the figure, false to leave it "open."
            </summary>
            <remarks>
            This boolean determines whether or not the CloseFigure() method will be called
            to fully close the path of the polygon.  This value defaults to true, and for any
            closed figure it should fine.  If you want to draw a line that does not close into
            a shape, then you should set this value to false.  For a figure that is naturally
            closed (e.g., the first point of the polygon is the same as the last point),
            leaving this value set to false may result in minor pixel artifacts due to
            rounding.
            </remarks>
        </member>
        <member name="M:ZedGraph.PolyObj.#ctor(ZedGraph.PointD[],System.Drawing.Color,System.Drawing.Color)">
            <overloads>Constructors for the <see cref="T:ZedGraph.PolyObj"/> object</overloads>
            <summary>
            A constructor that allows the position, border color, and solid fill color
            of the <see cref="T:ZedGraph.PolyObj"/> to be pre-specified.
            </summary>
            <param name="borderColor">An arbitrary <see cref="T:System.Drawing.Color"/> specification
            for the box border</param>
            <param name="fillColor">An arbitrary <see cref="T:System.Drawing.Color"/> specification
            for the box fill (will be a solid color fill)</param>
            <param name="points">The <see cref="T:ZedGraph.PointD"/> array that defines
            the polygon.  This will be in units determined by
            <see cref="P:ZedGraph.Location.CoordinateFrame"/>.
            </param>
        </member>
        <member name="M:ZedGraph.PolyObj.#ctor(ZedGraph.PointD[])">
            <summary>
            A constructor that allows the position
            of the <see cref="T:ZedGraph.PolyObj"/> to be pre-specified.  Other properties are defaulted.
            </summary>
            <param name="points">The <see cref="T:ZedGraph.PointD"/> array that defines
            the polygon.  This will be in units determined by
            <see cref="P:ZedGraph.Location.CoordinateFrame"/>.
            </param>
        </member>
        <member name="M:ZedGraph.PolyObj.#ctor">
            <summary>
            A default constructor that creates a <see cref="T:ZedGraph.PolyObj"/> from an empty
            <see cref="T:ZedGraph.PointD"/> array.  Other properties are defaulted.
            </summary>
        </member>
        <member name="M:ZedGraph.PolyObj.#ctor(ZedGraph.PointD[],System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            A constructor that allows the position, border color, and two-color
            gradient fill colors
            of the <see cref="T:ZedGraph.PolyObj"/> to be pre-specified.
            </summary>
            <param name="borderColor">An arbitrary <see cref="T:System.Drawing.Color"/> specification
            for the box border</param>
            <param name="fillColor1">An arbitrary <see cref="T:System.Drawing.Color"/> specification
            for the start of the box gradient fill</param>
            <param name="fillColor2">An arbitrary <see cref="T:System.Drawing.Color"/> specification
            for the end of the box gradient fill</param>
            <param name="points">The <see cref="T:ZedGraph.PointD"/> array that defines
            the polygon.  This will be in units determined by
            <see cref="P:ZedGraph.Location.CoordinateFrame"/>.
            </param>
        </member>
        <member name="M:ZedGraph.PolyObj.#ctor(ZedGraph.PolyObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.PolyObj"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.PolyObj.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.PolyObj.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.PolyObj.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="F:ZedGraph.PolyObj.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.PolyObj.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.PolyObj.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:ZedGraph.PolyObj.Draw(System.Drawing.Graphics,ZedGraph.PaneBase,System.Single)">
            <summary>
            Render this object to the specified <see cref="T:System.Drawing.Graphics"/> device.
            </summary>
            <remarks>
            This method is normally only called by the Draw method
            of the parent <see cref="T:ZedGraph.GraphObjList"/> collection object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:ZedGraph.PolyObj.PointInBox(System.Drawing.PointF,ZedGraph.PaneBase,System.Drawing.Graphics,System.Single)">
            <summary>
            Determine if the specified screen point lies inside the bounding box of this
            <see cref="T:ZedGraph.PolyObj"/>.
            </summary>
            <param name="pt">The screen point, in pixels</param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies in the bounding box, false otherwise</returns>
        </member>
        <member name="T:ZedGraph.RadarPointList">
            <summary>
            A class containing a set of data values to be plotted as a RadarPlot.
            This class will effectively convert the data into <see cref="T:ZedGraph.PointPair" /> objects
            by converting the polar coordinates to rectangular coordinates
            </summary>
            <seealso cref="T:ZedGraph.BasicArrayPointList" />
            <seealso cref="T:ZedGraph.IPointList" />
            <seealso cref="T:ZedGraph.IPointListEdit" />
            
            <author>Jerry Vos and John Champion</author>
            <version> $Revision: 3.5 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:ZedGraph.RadarPointList._clockwise">
            <summary>
            Default to clockwise rotation as this is the standard for radar charts
            </summary>
        </member>
        <member name="F:ZedGraph.RadarPointList._rotation">
            <summary>
            Default to 90 degree rotation so main axis is in the 12 o'clock position,
            which is the standard for radar charts.
            </summary>
        </member>
        <member name="P:ZedGraph.RadarPointList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:ZedGraph.PointPair"/> object by
            its ordinal position in the list.  This method does the calculations
            to convert the data from polar to rectangular coordinates.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:ZedGraph.PointPair"/> object to be accessed.</param>
            <value>A <see cref="T:ZedGraph.PointPair"/> object reference.</value>
        </member>
        <member name="P:ZedGraph.RadarPointList.Clockwise">
            <summary>
            Indicates if points should be added in clockwise or counter-clockwise order
            </summary>
        </member>
        <member name="P:ZedGraph.RadarPointList.Rotation">
            <summary>
            Sets the angular rotation (starting angle) for the initial axis
            </summary>
        </member>
        <member name="M:ZedGraph.RadarPointList.GetAt(System.Int32)">
            <summary>
            Get the raw data
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:ZedGraph.RadarPointList.Count">
            <summary>
            gets the number of points available in the list
            </summary>
        </member>
        <member name="M:ZedGraph.RadarPointList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ZedGraph.RadarPointList.#ctor(ZedGraph.RadarPointList)">
            <summary>
            Copy Constructor
            </summary>
        </member>
        <member name="M:ZedGraph.RadarPointList.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.RadarPointList.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.RadarPointList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:ZedGraph.RadarPointList.Add(System.Double,System.Double)">
            <summary>
            Add a single point to the <see cref="T:ZedGraph.RadarPointList"/> from two values of type double.
            </summary>
            <param name="r">The radial coordinate value</param>
            <param name="z">The 'Z' coordinate value, which is not normally used for plotting,
            but can be used for <see cref="F:ZedGraph.FillType.GradientByZ" /> type fills</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="T:ZedGraph.RollingPointPairList">
             <summary>
             A class that provides a rolling list of <see cref="T:ZedGraph.PointPair" /> objects.
             This is essentially a 
             first-in-first-out (FIFO) queue with a fixed capacity which allows 'rolling' 
             (or oscilloscope like) graphs to be be animated without having the overhead of an
             ever-growing ArrayList.
             
             The queue is constructed with a fixed capacity and new points can be enqueued. When the 
             capacity is reached the oldest (first in) PointPair is overwritten. However, when 
             accessing via <see cref="T:ZedGraph.IPointList" />, the <see cref="T:ZedGraph.PointPair" /> objects are
             seen in the order in which they were enqeued.
            
             RollingPointPairList supports data editing through the <see cref="T:ZedGraph.IPointListEdit" />
             interface.
             
             <author>Colin Green with mods by John Champion</author>
             <version> $Date: 2007-11-05 04:33:26 $ </version>
             </summary>
        </member>
        <member name="F:ZedGraph.RollingPointPairList._mBuffer">
            <summary>
            An array of PointPair objects that acts as the underlying buffer.
            </summary>
        </member>
        <member name="F:ZedGraph.RollingPointPairList._headIdx">
            <summary>
            The index of the previously enqueued item. -1 if buffer is empty.
            </summary>
        </member>
        <member name="F:ZedGraph.RollingPointPairList._tailIdx">
            <summary>
            The index of the next item to be dequeued. -1 if buffer is empty.
            </summary>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.#ctor(System.Int32)">
            <summary>
            Constructs an empty buffer with the specified capacity.
            </summary>
            <param name="capacity">Number of elements in the rolling list.  This number
            cannot be changed once the RollingPointPairList is constructed.</param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs an empty buffer with the specified capacity.  Pre-allocates space
            for all PointPair's in the list if <paramref name="preLoad"/> is true.
            </summary>
            <param name="capacity">Number of elements in the rolling list.  This number
            cannot be changed once the RollingPointPairList is constructed.</param>
            <param name="preLoad">true to pre-allocate all PointPair instances in
            the list, false otherwise.  Note that in order to be memory efficient,
            the <see cref="M:ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Double)"/> method should be used to add
            data.  Avoid the <see cref="M:ZedGraph.RollingPointPairList.Add(ZedGraph.PointPair)"/> method.
            </param>
            <seealso cref="M:ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.#ctor(ZedGraph.IPointList)">
            <summary>
            Constructs a buffer with a copy of the items within the provided
            <see cref="T:ZedGraph.IPointList" />.
            The <see cref="P:ZedGraph.RollingPointPairList.Capacity" /> is set to the length of the provided list.
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.IPointList" /> to be copied.</param>
        </member>
        <member name="P:ZedGraph.RollingPointPairList.Capacity">
            <summary>
            Gets the capacity of the rolling buffer.
            </summary>
        </member>
        <member name="P:ZedGraph.RollingPointPairList.Count">
            <summary>
            Gets the count of items within the rolling buffer. Note that this may be less than
            the capacity.
            </summary>
        </member>
        <member name="P:ZedGraph.RollingPointPairList.IsEmpty">
            <summary>
            Gets a bolean that indicates if the buffer is empty.
            Alternatively you can test Count==0.
            </summary>
        </member>
        <member name="P:ZedGraph.RollingPointPairList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ZedGraph.PointPair" /> at the specified index in the buffer.
            </summary>
            <remarks>
            Index must be within the current size of the buffer, e.g., the set
            method will not expand the buffer even if <see cref="P:ZedGraph.RollingPointPairList.Capacity" /> is available
            </remarks>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.RollingPointPairList.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Clear">
            <summary>
            Clear the buffer of all <see cref="T:ZedGraph.PointPair"/> objects.
            Note that the <see cref="P:ZedGraph.RollingPointPairList.Capacity" /> remains unchanged.
            </summary>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.GetNextIndex">
            <summary>
            Calculate that the next index in the buffer that should receive a new data point.
            Note that this method actually advances the buffer, so a datapoint should be
            added at _mBuffer[_headIdx].
            </summary>
            <returns>The index position of the new head element</returns>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Add(ZedGraph.PointPair)">
            <summary>
            Add a <see cref="T:ZedGraph.PointPair"/> onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <param name="item">The <see cref="T:ZedGraph.PointPair" /> to be added.</param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Add(ZedGraph.IPointList)">
            <summary>
            Add an <see cref="T:ZedGraph.IPointList"/> object to the head of the queue.
            </summary>
            <param name="pointList">A reference to the <see cref="T:ZedGraph.IPointList"/> object to
            be added</param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Remove">
            <summary>
            Remove an old item from the tail of the queue.
            </summary>
            <returns>The removed item. Throws an <see cref="T:System.InvalidOperationException" />
            if the buffer was empty. 
            Check the buffer's length (<see cref="P:ZedGraph.RollingPointPairList.Count" />) or the <see cref="P:ZedGraph.RollingPointPairList.IsEmpty" />
            property to avoid exceptions.</returns>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.RemoveAt(System.Int32)">
            <summary>
            Remove the <see cref="T:ZedGraph.PointPair" /> at the specified index
            </summary>
            <remarks>
            All items in the queue that lie after <paramref name="index"/> will
            be shifted back by one, and the queue will be one item shorter.
            </remarks>
            <param name="index">The ordinal position of the item to be removed.
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if index is less than
            zero or greater than or equal to <see cref="P:ZedGraph.RollingPointPairList.Count" />
            </param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of <see cref="T:ZedGraph.PointPair" /> objects starting at the specified index
            </summary>
            <remarks>
            All items in the queue that lie after <paramref name="index"/> will
            be shifted back, and the queue will be <paramref name="count" /> items shorter.
            </remarks>
            <param name="index">The ordinal position of the item to be removed.
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if index is less than
            zero or greater than or equal to <see cref="P:ZedGraph.RollingPointPairList.Count" />
            </param>
            <param name="count">The number of items to be removed.  Throws an
            <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="count" /> is less than zero
            or greater than the total available items in the queue</param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Pop">
            <summary>
            Pop an item off the head of the queue.
            </summary>
            <returns>The popped item. Throws an exception if the buffer was empty.</returns>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Peek">
            <summary>
            Peek at the <see cref="T:ZedGraph.PointPair" /> item at the head of the queue.
            </summary>
            <returns>The <see cref="T:ZedGraph.PointPair" /> item at the head of the queue.
            Throws an <see cref="T:System.InvalidOperationException" /> if the buffer was empty.
            </returns>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Double,System.Object)">
            <summary>
            Add a set of values onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <remarks>
            This method is much more efficient that the <see cref="M:ZedGraph.RollingPointPairList.Add(ZedGraph.PointPair)">Add(PointPair)</see>
            method, since it does not require that a new PointPair instance be provided.
            If the buffer already contains a <see cref="T:ZedGraph.PointPair"/> at the head position,
            then the x, y, z, and tag values will be copied into the existing PointPair.
            Otherwise, a new PointPair instance must be created.
            In this way, each PointPair position in the rolling list will only be allocated one time.
            To truly be memory efficient, the <see cref="M:ZedGraph.RollingPointPairList.Remove" />, <see cref="M:ZedGraph.RollingPointPairList.RemoveAt(System.Int32)" />,
            and <see cref="M:ZedGraph.RollingPointPairList.Pop" /> methods should be avoided.  Also, the <paramref name="tag"/> property
            for this method should be null, since it is a reference type.
            </remarks>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z value</param>
            <param name="tag">The Tag value for the PointPair</param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Add(System.Double,System.Double)">
            <summary>
            Add a set of values onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <remarks>
            This method is much more efficient that the <see cref="M:ZedGraph.RollingPointPairList.Add(ZedGraph.PointPair)">Add(PointPair)</see>
            method, since it does not require that a new PointPair instance be provided.
            If the buffer already contains a <see cref="T:ZedGraph.PointPair"/> at the head position,
            then the x, y, z, and tag values will be copied into the existing PointPair.
            Otherwise, a new PointPair instance must be created.
            In this way, each PointPair position in the rolling list will only be allocated one time.
            To truly be memory efficient, the <see cref="M:ZedGraph.RollingPointPairList.Remove" />, <see cref="M:ZedGraph.RollingPointPairList.RemoveAt(System.Int32)" />,
            and <see cref="M:ZedGraph.RollingPointPairList.Pop" /> methods should be avoided.
            </remarks>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Object)">
            <summary>
            Add a set of values onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <remarks>
            This method is much more efficient that the <see cref="M:ZedGraph.RollingPointPairList.Add(ZedGraph.PointPair)">Add(PointPair)</see>
            method, since it does not require that a new PointPair instance be provided.
            If the buffer already contains a <see cref="T:ZedGraph.PointPair"/> at the head position,
            then the x, y, z, and tag values will be copied into the existing PointPair.
            Otherwise, a new PointPair instance must be created.
            In this way, each PointPair position in the rolling list will only be allocated one time.
            To truly be memory efficient, the <see cref="M:ZedGraph.RollingPointPairList.Remove" />, <see cref="M:ZedGraph.RollingPointPairList.RemoveAt(System.Int32)" />,
            and <see cref="M:ZedGraph.RollingPointPairList.Pop" /> methods should be avoided.  Also, the <paramref name="tag"/> property
            for this method should be null, since it is a reference type.
            </remarks>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="tag">The Tag value for the PointPair</param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Add a set of values onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <remarks>
            This method is much more efficient that the <see cref="M:ZedGraph.RollingPointPairList.Add(ZedGraph.PointPair)">Add(PointPair)</see>
            method, since it does not require that a new PointPair instance be provided.
            If the buffer already contains a <see cref="T:ZedGraph.PointPair"/> at the head position,
            then the x, y, z, and tag values will be copied into the existing PointPair.
            Otherwise, a new PointPair instance must be created.
            In this way, each PointPair position in the rolling list will only be allocated one time.
            To truly be memory efficient, the <see cref="M:ZedGraph.RollingPointPairList.Remove" />, <see cref="M:ZedGraph.RollingPointPairList.RemoveAt(System.Int32)" />,
            and <see cref="M:ZedGraph.RollingPointPairList.Pop" /> methods should be avoided.
            </remarks>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z value</param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Add(System.Double[],System.Double[])">
            <summary>
            Add a set of points to the <see cref="T:ZedGraph.RollingPointPairList"/>
            from two arrays of type double.
            If either array is null, then a set of ordinal values is automatically
            generated in its place (see <see cref="F:ZedGraph.AxisType.Ordinal"/>).
            If the arrays are of different size, then the larger array prevails and the
            smaller array is padded with <see cref="F:ZedGraph.PointPairBase.Missing"/> values.
            </summary>
            <param name="x">A double[] array of X values</param>
            <param name="y">A double[] array of Y values</param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.Add(System.Double[],System.Double[],System.Double[])">
            <summary>
            Add a set of points to the <see cref="T:ZedGraph.RollingPointPairList"/> from
            three arrays of type double.
            If the X or Y array is null, then a set of ordinal values is automatically
            generated in its place (see <see cref="F:ZedGraph.AxisType.Ordinal"/>.
            If the <see paramref="z"/> value
            is null, then it is set to zero.
            If the arrays are of different size, then the larger array prevails and the
            smaller array is padded with <see cref="F:ZedGraph.PointPairBase.Missing"/> values.
            </summary>
            <param name="x">A double[] array of X values</param>
            <param name="y">A double[] array of Y values</param>
            <param name="z">A double[] array of Z values</param>
        </member>
        <member name="F:ZedGraph.RollingPointPairList.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.RollingPointPairList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="T:ZedGraph.PerfDataType">
            <summary>
            An enum used to specify the X or Y data type of interest -- see
            <see cref="F:ZedGraph.SampleMultiPointList.XData" /> and <see cref="F:ZedGraph.SampleMultiPointList.YData" />.
            </summary>
        </member>
        <member name="F:ZedGraph.PerfDataType.Time">
            <summary>
            The time (seconds) at which these data are measured
            </summary>
        </member>
        <member name="F:ZedGraph.PerfDataType.Distance">
            <summary>
            The distance traveled, meters
            </summary>
        </member>
        <member name="F:ZedGraph.PerfDataType.Velocity">
            <summary>
            The instantaneous velocity, meters per second
            </summary>
        </member>
        <member name="F:ZedGraph.PerfDataType.Acceleration">
            <summary>
            The instantaneous acceleration, meters per second squared
            </summary>
        </member>
        <member name="T:ZedGraph.PerformanceData">
            <summary>
            Sample data structure containing a variety of data values, in this case the values
            are related in that they correspond to the same time value.
            </summary>
        </member>
        <member name="F:ZedGraph.PerformanceData.time">
            <summary>
            The time (seconds) at which these data are measured
            </summary>
        </member>
        <member name="F:ZedGraph.PerformanceData.distance">
            <summary>
            The distance traveled, meters
            </summary>
        </member>
        <member name="F:ZedGraph.PerformanceData.velocity">
            <summary>
            The instantaneous velocity, meters per second
            </summary>
        </member>
        <member name="F:ZedGraph.PerformanceData.acceleration">
            <summary>
            The instantaneous acceleration, meters per second squared
            </summary>
        </member>
        <member name="M:ZedGraph.PerformanceData.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor that specifies each data value in the PerformanceData struct
            </summary>
            <param name="time">The time (seconds) at which these data are measured</param>
            <param name="distance">The distance traveled, meters</param>
            <param name="velocity">The instantaneous velocity, meters per second</param>
            <param name="acceleration">The instantaneous acceleration, meters per second squared</param>
        </member>
        <member name="P:ZedGraph.PerformanceData.Item(ZedGraph.PerfDataType)">
            <summary>
            Gets or sets the data value as specified by the <see cref="T:ZedGraph.PerfDataType" /> enum
            </summary>
            <param name="type">The required data value type</param>
        </member>
        <member name="T:ZedGraph.SampleMultiPointList">
            <summary>
            A sample class that holds an internal collection, and implements the
            <see cref="T:ZedGraph.IPointList" /> interface so that it can be used by ZedGraph as curve data.
            </summary>
            <remarks>
            This particular class efficiently implements the data storage so that the class
            can be cloned without duplicating the data points.  For example, you can create
            a <see cref="T:ZedGraph.SampleMultiPointList" />, populate it with values, and set
            <see cref="F:ZedGraph.SampleMultiPointList.XData" /> = <see cref="F:ZedGraph.PerfDataType.Time" /> and
            <see cref="F:ZedGraph.SampleMultiPointList.YData" /> = <see cref="F:ZedGraph.PerfDataType.Distance" />.
            You can then clone this <see cref="T:ZedGraph.SampleMultiPointList" /> to a new one, and set
            <see cref="F:ZedGraph.SampleMultiPointList.YData" /> = <see cref="F:ZedGraph.PerfDataType.Velocity" />.
            Each of these <see cref="T:ZedGraph.SampleMultiPointList" />'s can then be used as an
            <see cref="M:ZedGraph.GraphPane.AddCurve(System.String,ZedGraph.IPointList,System.Drawing.Color)" /> argument,
            thereby plotting a distance vs time curve and a velocity vs time curve.  There
            will still be only one copy of the data in memory.
            </remarks>
        </member>
        <member name="F:ZedGraph.SampleMultiPointList.DataCollection">
            <summary>
            This is where the data are stored.  Duplicating the <see cref="T:ZedGraph.SampleMultiPointList" />
            copies the reference to this <see cref="T:System.Collections.ArrayList" />, but does not actually duplicate
            the data.
            </summary>
        </member>
        <member name="F:ZedGraph.SampleMultiPointList.XData">
            <summary>
            Determines what X data will be returned by the indexer of this list.
            </summary>
        </member>
        <member name="F:ZedGraph.SampleMultiPointList.YData">
            <summary>
            Determines what Y data will be returned by the indexer of this list.
            </summary>
        </member>
        <member name="M:ZedGraph.SampleMultiPointList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ZedGraph.SampleMultiPointList.#ctor(ZedGraph.SampleMultiPointList)">
            <summary>
            The Copy Constructor.  This method does NOT duplicate the data, it merely makes
            another "Window" into the same collection.  You can make multiple copies and
            set the <see cref="F:ZedGraph.SampleMultiPointList.XData" /> and/or <see cref="F:ZedGraph.SampleMultiPointList.YData" /> properties to different
            values to plot different data, while maintaining only one copy of the original values.
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.SampleMultiPointList" /> from which to copy</param>
        </member>
        <member name="M:ZedGraph.SampleMultiPointList.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.SampleMultiPointList.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.SampleMultiPointList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="P:ZedGraph.SampleMultiPointList.Item(System.Int32)">
            <summary>
            Indexer to access the data.  This gets the appropriate data and converts to
            the <see cref="T:ZedGraph.PointPair" /> struct that is compatible with ZedGraph.  The
            actual data returned depends on the values of <see cref="F:ZedGraph.SampleMultiPointList.XData" /> and
            <see cref="F:ZedGraph.SampleMultiPointList.YData" />.
            </summary>
            <param name="index">The ordinal position of the desired point in the list</param>
            <returns>A <see cref="T:ZedGraph.PointPair" /> corresponding to the specified ordinal data position</returns>
        </member>
        <member name="P:ZedGraph.SampleMultiPointList.Count">
            <summary>
            Gets the number of data points in the collection
            </summary>
        </member>
        <member name="M:ZedGraph.SampleMultiPointList.Add(ZedGraph.PerformanceData)">
            <summary>
            Adds the specified <see cref="T:ZedGraph.PerformanceData" /> struct to the end of the collection.
            </summary>
            <param name="perfData">A <see cref="T:ZedGraph.PerformanceData" /> struct to be added</param>
            <returns>The ordinal position in the collection where the values were added</returns>
        </member>
        <member name="M:ZedGraph.SampleMultiPointList.RemoveAt(System.Int32)">
            <summary>
            Remove the <see cref="T:ZedGraph.PerformanceData" /> struct from the list at the specified
            ordinal location.
            </summary>
            <param name="index">The ordinal location of the <see cref="T:ZedGraph.PerformanceData" />
            struct to be removed</param>
        </member>
        <member name="M:ZedGraph.SampleMultiPointList.Insert(System.Int32,ZedGraph.PerformanceData)">
            <summary>
            Insert the specified <see cref="T:ZedGraph.PerformanceData" /> struct into the list at
            the specified ordinal location.
            </summary>
            <param name="index">The ordinal location at which to insert</param>
            <param name="perfData">The <see cref="T:ZedGraph.PerformanceData" /> struct to be inserted</param>
        </member>
        <member name="T:ZedGraph.SampleType">
            <summary>
            enumeration used to indicate which type of data will be plotted.
            </summary>
        </member>
        <member name="F:ZedGraph.SampleType.Time">
            <summary>
            Designates the "Time" property will be used
            </summary>
        </member>
        <member name="F:ZedGraph.SampleType.Position">
            <summary>
            Designates the "Position" property will be used
            </summary>
        </member>
        <member name="F:ZedGraph.SampleType.VelocityInst">
            <summary>
            Designates the Instantaneous Velocity property will be used
            </summary>
        </member>
        <member name="F:ZedGraph.SampleType.TimeDiff">
            <summary>
            Designates the "Time since start" property will be used
            </summary>
        </member>
        <member name="F:ZedGraph.SampleType.VelocityAvg">
            <summary>
            Designates the Average Velocity property will be used
            </summary>
        </member>
        <member name="T:ZedGraph.Sample">
            <summary>
            A simple storage class to maintain an individual sampling of data
            </summary>
        </member>
        <member name="P:ZedGraph.Sample.Time">
            <summary>
            The time of the sample
            </summary>
        </member>
        <member name="P:ZedGraph.Sample.Position">
            <summary>
            The position at sample time
            </summary>
        </member>
        <member name="P:ZedGraph.Sample.Velocity">
            <summary>
            The instantaneous velocity at sample time
            </summary>
        </member>
        <member name="T:ZedGraph.SamplePointList">
            <summary>
            A collection class to maintain a set of samples
            </summary>
        </member>
        <member name="F:ZedGraph.SamplePointList.XType">
            <summary>
            Determines what data type gets plotted for the X values
            </summary>
        </member>
        <member name="F:ZedGraph.SamplePointList.YType">
            <summary>
            Determines what data type gets plotted for the Y values
            </summary>
        </member>
        <member name="P:ZedGraph.SamplePointList.Item(System.Int32)">
            <summary>
            Indexer: get the Sample instance at the specified ordinal position in the list
            </summary>
            <param name="index">The ordinal position in the list of samples</param>
            <returns>Returns a <see cref="T:ZedGraph.PointPair" /> instance containing the
            data specified by <see cref="F:ZedGraph.SamplePointList.XType" /> and <see cref="F:ZedGraph.SamplePointList.YType" />
            </returns>
        </member>
        <member name="P:ZedGraph.SamplePointList.Count">
            <summary>
            Gets the number of samples in the collection
            </summary>
        </member>
        <member name="M:ZedGraph.SamplePointList.GetValue(ZedGraph.Sample,ZedGraph.SampleType)">
            <summary>
            Get the specified data type from the specified sample
            </summary>
            <param name="sample">The sample instance of interest</param>
            <param name="type">The data type to be extracted from the sample</param>
            <returns>A double value representing the requested data</returns>
        </member>
        <member name="M:ZedGraph.SamplePointList.Add(ZedGraph.Sample)">
            <summary>
            Append a sample to the collection
            </summary>
            <param name="sample">The sample to append</param>
            <returns>The ordinal position at which the sample was added</returns>
        </member>
        <member name="M:ZedGraph.SamplePointList.Clone">
            <summary>
            typesafe clone method
            </summary>
            <returns>A new cloned SamplePointList.  This returns a copy of the structure,
            but it does not duplicate the data (it just keeps a reference to the original)
            </returns>
        </member>
        <member name="M:ZedGraph.SamplePointList.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:ZedGraph.SamplePointList.#ctor(ZedGraph.SamplePointList)">
            <summary>
            copy constructor -- this returns a copy of the structure,
            but it does not duplicate the data (it just keeps a reference to the original)
            </summary>
            <param name="rhs">The SamplePointList to be copied</param>
        </member>
        <member name="T:ZedGraph.Scale">
            <summary>
            The Scale class is an abstract base class that encompasses the properties
            and methods associated with a scale of data.
            </summary>
            <remarks>This class is inherited by the
            <see cref="T:ZedGraph.LinearScale"/>, <see cref="T:ZedGraph.LogScale"/>, <see cref="T:ZedGraph.OrdinalScale"/>,
            <see cref="T:ZedGraph.TextScale"/>, <see cref="T:ZedGraph.DateScale"/>, <see cref="T:ZedGraph.ExponentScale"/>,
            <see cref="T:ZedGraph.DateAsOrdinalScale"/>, and <see cref="T:ZedGraph.LinearAsOrdinalScale"/>
            classes to define specific characteristics for those types.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.33 $ $Date: 2007-09-19 06:41:56 $ </version>
        </member>
        <member name="F:ZedGraph.Scale._min">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MajorStep"/>, <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.Exponent" />
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._max">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MajorStep"/>, <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.Exponent" />
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._majorStep">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MajorStep"/>, <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.Exponent" />
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._minorStep">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MajorStep"/>, <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.Exponent" />
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._exponent">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MajorStep"/>, <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.Exponent" />
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._baseTic">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MajorStep"/>, <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.Exponent" />
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._minAuto">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:ZedGraph.Scale.MinAuto"/>, <see cref="P:ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:ZedGraph.Scale.MagAuto"/> and <see cref="P:ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._maxAuto">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:ZedGraph.Scale.MinAuto"/>, <see cref="P:ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:ZedGraph.Scale.MagAuto"/> and <see cref="P:ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._majorStepAuto">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:ZedGraph.Scale.MinAuto"/>, <see cref="P:ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:ZedGraph.Scale.MagAuto"/> and <see cref="P:ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._minorStepAuto">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:ZedGraph.Scale.MinAuto"/>, <see cref="P:ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:ZedGraph.Scale.MagAuto"/> and <see cref="P:ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._magAuto">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:ZedGraph.Scale.MinAuto"/>, <see cref="P:ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:ZedGraph.Scale.MagAuto"/> and <see cref="P:ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._formatAuto">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:ZedGraph.Scale.MinAuto"/>, <see cref="P:ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:ZedGraph.Scale.MagAuto"/> and <see cref="P:ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._minGrace">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> "grace" settings.
            These values determine how much extra space is left before the first data value
            and after the last data value.
            Use the public properties <see cref="P:ZedGraph.Scale.MinGrace"/> and <see cref="P:ZedGraph.Scale.MaxGrace"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._maxGrace">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> "grace" settings.
            These values determine how much extra space is left before the first data value
            and after the last data value.
            Use the public properties <see cref="P:ZedGraph.Scale.MinGrace"/> and <see cref="P:ZedGraph.Scale.MaxGrace"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._mag">
            <summary> Private field for the <see cref="T:ZedGraph.Axis"/> scale value display.
            Use the public property <see cref="P:ZedGraph.Scale.Mag"/> for access to this value.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._isReverse">
            <summary> Private fields for the <see cref="T:ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:ZedGraph.Scale.IsReverse"/> and <see cref="P:ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._isPreventLabelOverlap">
            <summary> Private fields for the <see cref="T:ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:ZedGraph.Scale.IsReverse"/> and <see cref="P:ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._isUseTenPower">
            <summary> Private fields for the <see cref="T:ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:ZedGraph.Scale.IsReverse"/> and <see cref="P:ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._isLabelsInside">
            <summary> Private fields for the <see cref="T:ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:ZedGraph.Scale.IsReverse"/> and <see cref="P:ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._isSkipFirstLabel">
            <summary> Private fields for the <see cref="T:ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:ZedGraph.Scale.IsReverse"/> and <see cref="P:ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._isSkipLastLabel">
            <summary> Private fields for the <see cref="T:ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:ZedGraph.Scale.IsReverse"/> and <see cref="P:ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._isSkipCrossLabel">
            <summary> Private fields for the <see cref="T:ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:ZedGraph.Scale.IsReverse"/> and <see cref="P:ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._isVisible">
            <summary> Private fields for the <see cref="T:ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:ZedGraph.Scale.IsReverse"/> and <see cref="P:ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._textLabels">
            <summary> Private <see cref="T:System.Collections.ArrayList"/> field for the <see cref="T:ZedGraph.Axis"/> array of text labels.
            This property is only used if <see cref="P:ZedGraph.Scale.Type"/> is set to
            <see cref="F:ZedGraph.AxisType.Text"/> </summary>
        </member>
        <member name="F:ZedGraph.Scale._format">
            <summary> Private field for the format of the <see cref="T:ZedGraph.Axis"/> tic labels.
            Use the public property <see cref="P:ZedGraph.Scale.Format"/> for access to this value. </summary>
            <seealso cref="P:ZedGraph.Scale.FormatAuto"/>
        </member>
        <member name="F:ZedGraph.Scale._majorUnit">
            <summary>
            Private fields for Unit types to be used for the major and minor tics.
            See <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/> for the corresponding
            public properties.
            These types only apply for date-time scales (<see cref="P:ZedGraph.Scale.IsDate"/>).
            </summary>
            <value>The value of these types is of enumeration type <see cref="T:ZedGraph.DateUnit"/>
            </value>
        </member>
        <member name="F:ZedGraph.Scale._minorUnit">
            <summary>
            Private fields for Unit types to be used for the major and minor tics.
            See <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/> for the corresponding
            public properties.
            These types only apply for date-time scales (<see cref="P:ZedGraph.Scale.IsDate"/>).
            </summary>
            <value>The value of these types is of enumeration type <see cref="T:ZedGraph.DateUnit"/>
            </value>
        </member>
        <member name="F:ZedGraph.Scale._align">
            <summary> Private field for the alignment of the <see cref="T:ZedGraph.Axis"/> tic labels.
            This fields controls whether the inside, center, or outside edges of the text labels are aligned.
            Use the public property <see cref="P:ZedGraph.Scale.Align"/>
            for access to this value. </summary>
            <seealso cref="P:ZedGraph.Scale.FormatAuto"/>
        </member>
        <member name="F:ZedGraph.Scale._alignH">
            <summary> Private field for the alignment of the <see cref="T:ZedGraph.Axis"/> tic labels.
            This fields controls whether the left, center, or right edges of the text labels are aligned.
            Use the public property <see cref="P:ZedGraph.Scale.AlignH"/>
            for access to this value. </summary>
            <seealso cref="P:ZedGraph.Scale.FormatAuto"/>
        </member>
        <member name="F:ZedGraph.Scale._fontSpec">
            <summary> Private fields for the <see cref="T:ZedGraph.Axis"/> font specificatios.
            Use the public properties <see cref="P:ZedGraph.Scale.FontSpec"/> and
            <see cref="P:ZedGraph.Scale.FontSpec"/> for access to these values. </summary>
        </member>
        <member name="F:ZedGraph.Scale._labelGap">
            <summary>
            Internal field that stores the amount of space between the scale labels and the
            major tics.  Use the public property <see cref="P:ZedGraph.Scale.LabelGap" /> to access this
            value.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._rangeMin">
            <summary>
            Data range temporary values, used by GetRange().
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._rangeMax">
            <summary>
            Data range temporary values, used by GetRange().
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._lBound">
            <summary>
            Data range temporary values, used by GetRange().
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._uBound">
            <summary>
            Data range temporary values, used by GetRange().
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._minPix">
            <summary>
            Pixel positions at the minimum and maximum value for this scale.
            These are temporary values used/valid only during the Draw process.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._maxPix">
            <summary>
            Pixel positions at the minimum and maximum value for this scale.
            These are temporary values used/valid only during the Draw process.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale._minLinTemp">
            <summary>
            Scale values for calculating transforms.  These are temporary values
            used ONLY during the Draw process.
            </summary>
            <remarks>
            These values are just <see cref="P:ZedGraph.Scale.Min" /> and <see cref="P:ZedGraph.Scale.Max" />
            for normal linear scales, but for log or exponent scales they will be a
            linear representation.  For <see cref="T:ZedGraph.LogScale" />, it is the
            <see cref="M:System.Math.Log(System.Double)" /> of the value, and for <see cref="T:ZedGraph.ExponentScale" />,
            it is the <see cref="M:System.Math.Exp(System.Double)" />
            of the value.
            </remarks>
        </member>
        <member name="F:ZedGraph.Scale._maxLinTemp">
            <summary>
            Scale values for calculating transforms.  These are temporary values
            used ONLY during the Draw process.
            </summary>
            <remarks>
            These values are just <see cref="P:ZedGraph.Scale.Min" /> and <see cref="P:ZedGraph.Scale.Max" />
            for normal linear scales, but for log or exponent scales they will be a
            linear representation.  For <see cref="T:ZedGraph.LogScale" />, it is the
            <see cref="M:System.Math.Log(System.Double)" /> of the value, and for <see cref="T:ZedGraph.ExponentScale" />,
            it is the <see cref="M:System.Math.Exp(System.Double)" />
            of the value.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale._minLinearized">
            <summary>
            Gets or sets the linearized version of the <see cref="P:ZedGraph.Scale.Min" /> scale range.
            </summary>
            <remarks>
            This value is valid at any time, whereas <see cref="F:ZedGraph.Scale._minLinTemp" /> is an optimization
            pre-set that is only valid during draw operations.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale._maxLinearized">
            <summary>
            Gets or sets the linearized version of the <see cref="P:ZedGraph.Scale.Max" /> scale range.
            </summary>
            <remarks>
            This value is valid at any time, whereas <see cref="F:ZedGraph.Scale._maxLinTemp" /> is an optimization
            pre-set that is only valid during draw operations.
            </remarks>
        </member>
        <member name="F:ZedGraph.Scale._ownerAxis">
            <summary>
            private field that stores the owner Axis that contains this Scale instance.
            </summary>
        </member>
        <member name="T:ZedGraph.Scale.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:ZedGraph.Scale"/> class.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.ZeroLever">
            <summary>
            The default "zero lever" for automatically selecting the axis
            scale range (see <see cref="M:ZedGraph.Scale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)"/>). This number is
            used to determine when an axis scale range should be extended to
            include the zero value.  This value is maintained only in the
            <see cref="T:ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.MinGrace">
            <summary> The default "grace" value applied to the minimum data range.
            This value is
            expressed as a fraction of the total data range.  For example, assume the data
            range is from 4.0 to 16.0, leaving a range of 12.0.  If MinGrace is set to
            0.1, then 10% of the range, or 1.2 will be subtracted from the minimum data value.
            The scale will then be ranged to cover at least 2.8 to 16.0.
            </summary>
            <seealso cref="F:ZedGraph.Scale.Default.MinGrace"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.MaxGrace">
            <summary> The default "grace" value applied to the maximum data range.
            This value is
            expressed as a fraction of the total data range.  For example, assume the data
            range is from 4.0 to 16.0, leaving a range of 12.0.  If MaxGrace is set to
            0.1, then 10% of the range, or 1.2 will be added to the maximum data value.
            The scale will then be ranged to cover at least 4.0 to 17.2.
            </summary>
            <seealso cref="F:ZedGraph.Scale.Default.MinGrace"/>
            <seealso cref="F:ZedGraph.Scale.Default.MaxGrace"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.MaxTextLabels">
            <summary>
            The maximum number of text labels (major tics) that will be allowed on the plot by
            the automatic scaling logic.  This value applies only to <see cref="F:ZedGraph.AxisType.Text"/>
            axes.  If there are more than MaxTextLabels on the plot, then
            <see cref="P:ZedGraph.Scale.MajorStep"/> will be increased to reduce the number of labels.  That is,
            the step size might be increased to 2.0 to show only every other label.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.TargetXSteps">
            <summary>
            The default target number of steps for automatically selecting the X axis
            scale step size (see <see cref="M:ZedGraph.Scale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)"/>).
            This number is an initial target value for the number of major steps
            on an axis.  This value is maintained only in the
            <see cref="T:ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.TargetYSteps">
            <summary>
            The default target number of steps for automatically selecting the Y or Y2 axis
            scale step size (see <see cref="M:ZedGraph.Scale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)"/>).
            This number is an initial target value for the number of major steps
            on an axis.  This value is maintained only in the
            <see cref="T:ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.TargetMinorXSteps">
            <summary>
            The default target number of minor steps for automatically selecting the X axis
            scale minor step size (see <see cref="M:ZedGraph.Scale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)"/>).
            This number is an initial target value for the number of minor steps
            on an axis.  This value is maintained only in the
            <see cref="T:ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.TargetMinorYSteps">
            <summary>
            The default target number of minor steps for automatically selecting the Y or Y2 axis
            scale minor step size (see <see cref="M:ZedGraph.Scale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)"/>).
            This number is an initial target value for the number of minor steps
            on an axis.  This value is maintained only in the
            <see cref="T:ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.IsReverse">
            <summary>
            The default reverse mode for the <see cref="T:ZedGraph.Axis"/> scale
            (<see cref="F:ZedGraph.Scale.Default.IsReverse"/> property). true for a reversed scale
            (X decreasing to the left, Y/Y2 decreasing upwards), false otherwise.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.Format">
            <summary>
            The default setting for the <see cref="T:ZedGraph.Axis"/> scale format string
            (<see cref="F:ZedGraph.Scale.Default.Format"/> property).  For numeric values, this value is
            setting according to the <see cref="M:System.String.Format(System.String,System.Object)"/> format strings.  For date
            type values, this value is set as per the <see cref="M:ZedGraph.XDate.ToString"/> function.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeYearYear">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Year"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Year"/>.
            This value normally defaults to 1825 days (5 years).
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeYearMonth">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Year"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Month"/>.
            This value normally defaults to 730 days (2 years).
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeMonthMonth">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Month"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Month"/>.
            This value normally defaults to 300 days (10 months).
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeDayDay">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Day"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Day"/>.
            This value normally defaults to 10 days.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeDayHour">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Day"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Hour"/>.
            This value normally defaults to 3 days.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeHourHour">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Hour"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Hour"/>.
            This value normally defaults to 0.4167 days (10 hours).
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeHourMinute">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Hour"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Minute"/>.
            This value normally defaults to 0.125 days (3 hours).
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeMinuteMinute">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Minute"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Minute"/>.
            This value normally defaults to 6.94e-3 days (10 minutes).
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeMinuteSecond">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Minute"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Second"/>.
            This value normally defaults to 2.083e-3 days (3 minutes).
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.RangeSecondSecond">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:ZedGraph.Scale.MajorUnit"/> = <see cref="F:ZedGraph.DateUnit.Second"/>
            and <see cref="P:ZedGraph.Scale.MinorUnit"/> = <see cref="F:ZedGraph.DateUnit.Second"/>.
            This value normally defaults to 3.472e-5 days (3 seconds).
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatYearYear">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Year"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Year"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatYearMonth">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Year"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Month"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatMonthMonth">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Month"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Month"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatDayDay">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Day"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Day"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatDayHour">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Day"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Hour"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatHourHour">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Hour"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Hour"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatHourMinute">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Hour"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Minute"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatMinuteMinute">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Minute"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Minute"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatMinuteSecond">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Minute"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Second"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatSecondSecond">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Second"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Second"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FormatMillisecond">
            <summary>
            A default setting for the <see cref="F:ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:ZedGraph.Scale.Default.Format"/> of <see cref="F:ZedGraph.DateUnit.Millisecond"/>
            for <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="F:ZedGraph.DateUnit.Millisecond"/> for 
            for <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.Align">
            <summary> The default alignment of the <see cref="T:ZedGraph.Axis"/> tic labels.
            This value controls whether the inside, center, or outside edges of the text labels are aligned.
            </summary>
            <seealso cref="T:ZedGraph.AlignP"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.AlignH">
            <summary> The default alignment of the <see cref="T:ZedGraph.Axis"/> tic labels.
            This value controls whether the left, center, or right edges of the text labels are aligned.
            </summary>
            <seealso cref="F:ZedGraph.Scale.Default.AlignH"/>
        </member>
        <member name="F:ZedGraph.Scale.Default.FontFamily">
            <summary>
            The default font family for the <see cref="T:ZedGraph.Axis"/> scale values
            font specification <see cref="P:ZedGraph.Scale.FontSpec"/>
            (<see cref="P:ZedGraph.FontSpec.Family"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.FontSize">
            <summary>
            The default font size for the <see cref="T:ZedGraph.Axis"/> scale values
            font specification <see cref="P:ZedGraph.Scale.FontSpec"/>
            (<see cref="P:ZedGraph.FontSpec.Size"/> property).  Units are
            in points (1/72 inch).
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.FontColor">
            <summary>
            The default font color for the <see cref="T:ZedGraph.Axis"/> scale values
            font specification <see cref="P:ZedGraph.Scale.FontSpec"/>
            (<see cref="P:ZedGraph.FontSpec.FontColor"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.FontBold">
            <summary>
            The default font bold mode for the <see cref="T:ZedGraph.Axis"/> scale values
            font specification <see cref="P:ZedGraph.Scale.FontSpec"/>
            (<see cref="P:ZedGraph.FontSpec.IsBold"/> property). true
            for a bold typeface, false otherwise.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.FontItalic">
            <summary>
            The default font italic mode for the <see cref="T:ZedGraph.Axis"/> scale values
            font specification <see cref="P:ZedGraph.Scale.FontSpec"/>
            (<see cref="P:ZedGraph.FontSpec.IsItalic"/> property). true
            for an italic typeface, false otherwise.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.FontUnderline">
            <summary>
            The default font underline mode for the <see cref="T:ZedGraph.Axis"/> scale values
            font specification <see cref="P:ZedGraph.Scale.FontSpec"/>
            (<see cref="P:ZedGraph.FontSpec.IsUnderline"/> property). true
            for an underlined typeface, false otherwise.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.FillColor">
            <summary>
            The default color for filling in the scale text background
            (see <see cref="P:ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.FillBrush">
            <summary>
            The default custom brush for filling in the scale text background
            (see <see cref="P:ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.FillType">
            <summary>
            The default fill mode for filling in the scale text background
            (see <see cref="P:ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.IsVisible">
            <summary>
            The default value for <see cref="F:ZedGraph.Scale.Default.IsVisible"/>, which determines
            whether or not the scale values are displayed.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.IsLabelsInside">
            <summary>
            The default value for <see cref="F:ZedGraph.Scale.Default.IsLabelsInside"/>, which determines
            whether or not the scale labels and title for the <see cref="T:ZedGraph.Axis"/> will appear
            on the opposite side of the <see cref="T:ZedGraph.Axis"/> that it normally appears.
            </summary>
        </member>
        <member name="F:ZedGraph.Scale.Default.EdgeTolerance">
            <summary>
            Determines the size of the band at the beginning and end of the axis that will have labels
            omitted if the axis is shifted due to a non-default location using the <see cref="P:ZedGraph.Axis.Cross"/>
            property.
            </summary>
            <remarks>
            This parameter applies only when <see cref="P:ZedGraph.Axis.CrossAuto"/> is false.  It is scaled according
            to the size of the graph based on <see cref="P:ZedGraph.PaneBase.BaseDimension"/>.  When a non-default
            axis location is selected, the first and last labels on that axis will overlap the opposing
            axis frame.  This parameter allows those labels to be omitted to avoid the overlap.  Set this
            parameter to zero to turn off the effect.
            </remarks>
        </member>
        <member name="F:ZedGraph.Scale.Default.LabelGap">
            <summary>
            The default setting for the gap between the outside tics (or the axis edge
            if there are no outside tics) and the scale labels, expressed as a fraction of
            the major tic size.
            </summary>
        </member>
        <member name="M:ZedGraph.Scale.#ctor(ZedGraph.Axis)">
            <summary>
            Basic constructor -- requires that the <see cref="T:ZedGraph.Scale" /> object be intialized with
            a pre-existing owner <see cref="T:ZedGraph.Axis" />.
            </summary>
            <param name="ownerAxis">The <see cref="T:ZedGraph.Axis" /> object that is the owner of this
            <see cref="T:ZedGraph.Scale" /> instance.</param>
        </member>
        <member name="M:ZedGraph.Scale.#ctor(ZedGraph.Scale,ZedGraph.Axis)">
            <summary>
            Copy Constructor.  Create a new <see cref="T:ZedGraph.Scale" /> object based on the specified
            existing one.
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.Scale" /> object to be copied.</param>
            <param name="owner">The <see cref="T:ZedGraph.Axis" /> object that will own the
            new instance of <see cref="T:ZedGraph.Scale" /></param>
        </member>
        <member name="M:ZedGraph.Scale.Clone(ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:ZedGraph.Axis" /> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:ZedGraph.Scale" /> clone.</returns>
        </member>
        <member name="M:ZedGraph.Scale.MakeNewScale(ZedGraph.Scale,ZedGraph.AxisType)">
            <summary>
            A construction method that creates a new <see cref="T:ZedGraph.Scale"/> object using the
            properties of an existing <see cref="T:ZedGraph.Scale"/> object, but specifying a new
            <see cref="T:ZedGraph.AxisType"/>.
            </summary>
            <remarks>
            This constructor is used to change the type of an existing <see cref="T:ZedGraph.Axis" />.
            By specifying the old <see cref="T:ZedGraph.Scale"/> object, you are giving a set of properties
            (which encompasses all fields associated with the scale, since the derived types
            have no fields) to be used in creating a new <see cref="T:ZedGraph.Scale"/> object, only this
            time having the newly specified object type.</remarks>
            <param name="oldScale">The existing <see cref="T:ZedGraph.Scale" /> object from which to
            copy the field data.</param>
            <param name="type">An <see cref="T:ZedGraph.AxisType"/> representing the type of derived type
            of new <see cref="T:ZedGraph.Scale" /> object to create.</param>
            <returns>The new <see cref="T:ZedGraph.Scale"/> object.</returns>
        </member>
        <member name="F:ZedGraph.Scale.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.Scale.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.Scale.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to
            serialize the target object
            </summary>
            <remarks>
            You MUST set the _ownerAxis property after deserializing a BarSettings object.
            </remarks>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:ZedGraph.Scale.Type">
            <summary>
            Get an <see cref="T:ZedGraph.AxisType" /> enumeration that indicates the type of this scale.
            </summary>
        </member>
        <member name="P:ZedGraph.Scale.IsLog">
            <summary>
            True if this scale is <see cref="F:ZedGraph.AxisType.Log" />, false otherwise.
            </summary>
        </member>
        <member name="P:ZedGraph.Scale.IsExponent">
            <summary>
            True if this scale is <see cref="F:ZedGraph.AxisType.Exponent" />, false otherwise.
            </summary>
        </member>
        <member name="P:ZedGraph.Scale.IsDate">
            <summary>
            True if this scale is <see cref="F:ZedGraph.AxisType.Date" />, false otherwise.
            </summary>
        </member>
        <member name="P:ZedGraph.Scale.IsText">
            <summary>
            True if this scale is <see cref="F:ZedGraph.AxisType.Text" />, false otherwise.
            </summary>
        </member>
        <member name="P:ZedGraph.Scale.IsOrdinal">
            <summary>
            True if this scale is <see cref="F:ZedGraph.AxisType.Ordinal" />, false otherwise.
            </summary>
            <remarks>
            Note that this is only true for an actual <see cref="T:ZedGraph.OrdinalScale" /> class.
            This property will be false for other ordinal types such as
            <see cref="F:ZedGraph.AxisType.Text" />, <see cref="F:ZedGraph.AxisType.LinearAsOrdinal" />,
            or <see cref="F:ZedGraph.AxisType.DateAsOrdinal" />.  Use the <see cref="P:ZedGraph.Scale.IsAnyOrdinal" />
            as a "catchall" for all ordinal type axes.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale.IsAnyOrdinal">
            <summary>
            Gets a value that indicates if this <see cref="T:ZedGraph.Scale" /> is of any of the
            ordinal types in the <see cref="T:ZedGraph.AxisType" /> enumeration.
            </summary>
            <seealso cref="P:ZedGraph.Scale.Type" />
        </member>
        <member name="P:ZedGraph.Scale.Min">
            <summary>
            Gets or sets the minimum scale value for this <see cref="T:ZedGraph.Scale" />.
            </summary>
            <remarks>This value can be set
            automatically based on the state of <see cref="P:ZedGraph.Scale.MinAuto"/>.  If
            this value is set manually, then <see cref="P:ZedGraph.Scale.MinAuto"/> will
            also be set to false.
            </remarks>
            <value> The value is defined in user scale units for <see cref="F:ZedGraph.AxisType.Log"/>
            and <see cref="F:ZedGraph.AxisType.Linear"/> axes. For <see cref="F:ZedGraph.AxisType.Text"/>
            and <see cref="F:ZedGraph.AxisType.Ordinal"/> axes,
            this value is an ordinal starting with 1.0.  For <see cref="F:ZedGraph.AxisType.Date"/>
            axes, this value is in XL Date format (see <see cref="T:ZedGraph.XDate"/>, which is the
            number of days since the reference date of January 1, 1900.</value>
            <seealso cref="P:ZedGraph.Scale.Max"/>
            <seealso cref="P:ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:ZedGraph.Scale.MinAuto"/>
        </member>
        <member name="P:ZedGraph.Scale.Max">
            <summary>
            Gets or sets the maximum scale value for this <see cref="T:ZedGraph.Scale" />.
            </summary>
            <remarks>
            This value can be set
            automatically based on the state of <see cref="P:ZedGraph.Scale.MaxAuto"/>.  If
            this value is set manually, then <see cref="P:ZedGraph.Scale.MaxAuto"/> will
            also be set to false.
            </remarks>
            <value> The value is defined in user scale units for <see cref="F:ZedGraph.AxisType.Log"/>
            and <see cref="F:ZedGraph.AxisType.Linear"/> axes. For <see cref="F:ZedGraph.AxisType.Text"/>
            and <see cref="F:ZedGraph.AxisType.Ordinal"/> axes,
            this value is an ordinal starting with 1.0.  For <see cref="F:ZedGraph.AxisType.Date"/>
            axes, this value is in XL Date format (see <see cref="T:ZedGraph.XDate"/>, which is the
            number of days since the reference date of January 1, 1900.</value>
            <seealso cref="P:ZedGraph.Scale.Min"/>
            <seealso cref="P:ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:ZedGraph.Scale.MaxAuto"/>
        </member>
        <member name="P:ZedGraph.Scale.MajorStep">
            <summary>
            Gets or sets the scale step size for this <see cref="T:ZedGraph.Scale" /> (the increment between
            labeled axis values).
            </summary>
            <remarks>
            This value can be set
            automatically based on the state of <see cref="P:ZedGraph.Scale.MajorStepAuto"/>.  If
            this value is set manually, then <see cref="P:ZedGraph.Scale.MajorStepAuto"/> will
            also be set to false.  This value is ignored for <see cref="F:ZedGraph.AxisType.Log"/>
            axes.  For <see cref="F:ZedGraph.AxisType.Date"/> axes, this
            value is defined in units of <see cref="P:ZedGraph.Scale.MajorUnit"/>.
            </remarks>
            <value> The value is defined in user scale units </value>
            <seealso cref="P:ZedGraph.Scale.Min"/>
            <seealso cref="P:ZedGraph.Scale.Max"/>
            <seealso cref="P:ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:ZedGraph.Scale.MajorStepAuto"/>
            <seealso cref="F:ZedGraph.Scale.Default.TargetXSteps"/>
            <seealso cref="F:ZedGraph.Scale.Default.TargetYSteps"/>
            <seealso cref="F:ZedGraph.Scale.Default.ZeroLever"/>
            <seealso cref="F:ZedGraph.Scale.Default.MaxTextLabels"/>
        </member>
        <member name="P:ZedGraph.Scale.MinorStep">
            <summary>
            Gets or sets the scale minor step size for this <see cref="T:ZedGraph.Scale" /> (the spacing between
            minor tics).
            </summary>
            <remarks>This value can be set
            automatically based on the state of <see cref="P:ZedGraph.Scale.MinorStepAuto"/>.  If
            this value is set manually, then <see cref="P:ZedGraph.Scale.MinorStepAuto"/> will
            also be set to false.  This value is ignored for <see cref="F:ZedGraph.AxisType.Log"/> and
            <see cref="F:ZedGraph.AxisType.Text"/> axes.  For <see cref="F:ZedGraph.AxisType.Date"/> axes, this
            value is defined in units of <see cref="P:ZedGraph.Scale.MinorUnit"/>.
            </remarks>
            <value> The value is defined in user scale units </value>
            <seealso cref="P:ZedGraph.Scale.Min"/>
            <seealso cref="P:ZedGraph.Scale.Max"/>
            <seealso cref="P:ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:ZedGraph.Scale.MinorStepAuto"/>
        </member>
        <member name="P:ZedGraph.Scale.Exponent">
            <summary>
            Gets or sets the scale exponent value.  This only applies to <see cref="F:ZedGraph.AxisType.Exponent" />. 
            </summary>
            <seealso cref="P:ZedGraph.Scale.Min"/>
            <seealso cref="P:ZedGraph.Scale.Max"/>
            <seealso cref="P:ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:ZedGraph.Scale.MajorStepAuto"/>
            <seealso cref="F:ZedGraph.Scale.Default.TargetXSteps"/>
            <seealso cref="F:ZedGraph.Scale.Default.TargetYSteps"/>
            <seealso cref="F:ZedGraph.Scale.Default.ZeroLever"/>
            <seealso cref="F:ZedGraph.Scale.Default.MaxTextLabels"/>
        </member>
        <member name="P:ZedGraph.Scale.BaseTic">
            <summary>
            Gets or sets the scale value at which the first major tic label will appear.
            </summary>
            <remarks>This property allows the scale labels to start at an irregular value.
            For example, on a scale range with <see cref="P:ZedGraph.Scale.Min"/> = 0, <see cref="P:ZedGraph.Scale.Max"/> = 1000,
            and <see cref="P:ZedGraph.Scale.MajorStep"/> = 200, a <see cref="P:ZedGraph.Scale.BaseTic"/> value of 50 would cause
            the scale labels to appear at values 50, 250, 450, 650, and 850.  Note that the
            default value for this property is <see cref="F:ZedGraph.PointPairBase.Missing"/>, which means the
            value is not used.  Setting this property to any value other than
            <see cref="F:ZedGraph.PointPairBase.Missing"/> will activate the effect.  The value specified must
            coincide with the first major tic.  That is, if <see cref="P:ZedGraph.Scale.BaseTic"/> were set to
            650 in the example above, then the major tics would only occur at 650 and 850.  This
            setting may affect the minor tics, since the minor tics are always referenced to the
            <see cref="P:ZedGraph.Scale.BaseTic"/>.  That is, in the example above, if the <see cref="P:ZedGraph.Scale.MinorStep"/>
            were set to 30 (making it a non-multiple of the major step), then the minor tics would
            occur at 20, 50 (so it lines up with the BaseTic), 80, 110, 140, etc.
            </remarks>
            <value> The value is defined in user scale units </value>
            <seealso cref="P:ZedGraph.Scale.Min"/>
            <seealso cref="P:ZedGraph.Scale.Max"/>
            <seealso cref="P:ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:ZedGraph.Axis.Cross"/>
        </member>
        <member name="P:ZedGraph.Scale.MajorUnit">
            <summary>
            Gets or sets the type of units used for the major step size (<see cref="P:ZedGraph.Scale.MajorStep"/>).
            </summary>
            <remarks>
            This unit type only applies to Date-Time axes (<see cref="F:ZedGraph.AxisType.Date"/> = true).
            The axis is set to date type with the <see cref="P:ZedGraph.Scale.Type"/> property.
            The unit types are defined as <see cref="T:ZedGraph.DateUnit"/>.
            </remarks>
            <value> The value is a <see cref="T:ZedGraph.DateUnit"/> enum type </value>
            <seealso cref="P:ZedGraph.Scale.Min"/>
            <seealso cref="P:ZedGraph.Scale.Max"/>
            <seealso cref="P:ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:ZedGraph.Scale.MajorStepAuto"/>
        </member>
        <member name="P:ZedGraph.Scale.MinorUnit">
            <summary>
            Gets or sets the type of units used for the minor step size (<see cref="P:ZedGraph.Scale.MinorStep"/>).
            </summary>
            <remarks>
            This unit type only applies to Date-Time axes (<see cref="F:ZedGraph.AxisType.Date"/> = true).
            The axis is set to date type with the <see cref="P:ZedGraph.Scale.Type"/> property.
            The unit types are defined as <see cref="T:ZedGraph.DateUnit"/>.
            </remarks>
            <value> The value is a <see cref="T:ZedGraph.DateUnit"/> enum type </value>
            <seealso cref="P:ZedGraph.Scale.Min"/>
            <seealso cref="P:ZedGraph.Scale.Max"/>
            <seealso cref="P:ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:ZedGraph.Scale.MinorStepAuto"/>
        </member>
        <member name="P:ZedGraph.Scale.MajorUnitMultiplier">
            <summary>
            Gets the major unit multiplier for this scale type, if any.
            </summary>
            <remarks>The major unit multiplier will correct the units of
            <see cref="P:ZedGraph.Scale.MajorStep" /> to match the units of <see cref="P:ZedGraph.Scale.Min" />
            and <see cref="P:ZedGraph.Scale.Max" />.  This reflects the setting of
            <see cref="P:ZedGraph.Scale.MajorUnit" />.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale.MinorUnitMultiplier">
            <summary>
            Gets the minor unit multiplier for this scale type, if any.
            </summary>
            <remarks>The minor unit multiplier will correct the units of
            <see cref="P:ZedGraph.Scale.MinorStep" /> to match the units of <see cref="P:ZedGraph.Scale.Min" />
            and <see cref="P:ZedGraph.Scale.Max" />.  This reflects the setting of
            <see cref="P:ZedGraph.Scale.MinorUnit" />.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale.MinAuto">
            <summary>
            Gets or sets a value that determines whether or not the minimum scale value <see cref="P:ZedGraph.Scale.Min"/>
            is set automatically.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:ZedGraph.Scale.Min"/> is manually changed.
            </remarks>
            <value>true for automatic mode, false for manual mode</value>
            <seealso cref="P:ZedGraph.Scale.Min"/>
        </member>
        <member name="P:ZedGraph.Scale.MaxAuto">
            <summary>
            Gets or sets a value that determines whether or not the maximum scale value <see cref="P:ZedGraph.Scale.Max"/>
            is set automatically.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:ZedGraph.Scale.Max"/> is manually changed.
            </remarks>
            <value>true for automatic mode, false for manual mode</value>
            <seealso cref="P:ZedGraph.Scale.Max"/>
        </member>
        <member name="P:ZedGraph.Scale.MajorStepAuto">
            <summary>
            Gets or sets a value that determines whether or not the scale step size <see cref="P:ZedGraph.Scale.MajorStep"/>
            is set automatically.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:ZedGraph.Scale.MajorStep"/> is manually changed.
            </remarks>
            <value>true for automatic mode, false for manual mode</value>
            <seealso cref="P:ZedGraph.Scale.MajorStep"/>
        </member>
        <member name="P:ZedGraph.Scale.MinorStepAuto">
            <summary>
            Gets or sets a value that determines whether or not the minor scale step size <see cref="P:ZedGraph.Scale.MinorStep"/>
            is set automatically.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:ZedGraph.Scale.MinorStep"/> is manually changed.
            </remarks>
            <value>true for automatic mode, false for manual mode</value>
            <seealso cref="P:ZedGraph.Scale.MinorStep"/>
        </member>
        <member name="P:ZedGraph.Scale.FormatAuto">
            <summary>
            Determines whether or not the scale label format <see cref="P:ZedGraph.Scale.Format"/>
            is determined automatically based on the range of data values.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:ZedGraph.Scale.Format"/> is manually changed.
            </remarks>
            <value>true if <see cref="P:ZedGraph.Scale.Format"/> will be set automatically, false
            if it is to be set manually by the user</value>
            <seealso cref="P:ZedGraph.Scale.Mag"/>
            <seealso cref="P:ZedGraph.Scale.Format"/>
            <seealso cref="P:ZedGraph.Scale.FontSpec"/>
        </member>
        <member name="P:ZedGraph.Scale.Format">
            <summary>
            The format of the <see cref="T:ZedGraph.Axis"/> tic labels.
            </summary>
            <remarks>
            This property may be a date format or a numeric format, depending on the setting of
            <see cref="P:ZedGraph.Scale.Type">Scale.Type</see>.
            This property may be set automatically by ZedGraph, depending on the state of
            <see cref="P:ZedGraph.Scale.FormatAuto"/>.
            </remarks>
            <value>The format string conforms to the
            <see cref="T:System.Globalization.DateTimeFormatInfo" /> for date formats, and
            <see cref="T:System.Globalization.NumberFormatInfo" /> for numeric formats.
            </value>
            <seealso cref="P:ZedGraph.Scale.Mag"/>
            <seealso cref="P:ZedGraph.Scale.FormatAuto"/>
            <seealso cref="P:ZedGraph.Scale.FontSpec"/>
        </member>
        <member name="P:ZedGraph.Scale.Mag">
            <summary>
            The magnitude multiplier for scale values.
            </summary>
            <remarks>
            This is used to limit
            the size of the displayed value labels.  For example, if the value
            is really 2000000, then the graph will display 2000 with a 10^3
            magnitude multiplier.  This value can be determined automatically
            depending on the state of <see cref="P:ZedGraph.Scale.MagAuto"/>.
            If this value is set manually by the user,
            then <see cref="P:ZedGraph.Scale.MagAuto"/> will also be set to false.
            </remarks>
            <value>The magnitude multiplier (power of 10) for the scale
            value labels</value>
            <seealso cref="P:ZedGraph.AxisLabel.IsOmitMag"/>
            <seealso cref="P:ZedGraph.Axis.Title"/>
            <seealso cref="P:ZedGraph.Scale.Format"/>
            <seealso cref="P:ZedGraph.Scale.FontSpec"/>
        </member>
        <member name="P:ZedGraph.Scale.MagAuto">
            <summary>
            Determines whether the <see cref="P:ZedGraph.Scale.Mag"/> value will be set
            automatically based on the data, or manually by the user.
            </summary>
            <remarks>
            If the user manually sets the <see cref="P:ZedGraph.Scale.Mag"/> value, then this
            flag will be set to false.
            </remarks>
            <value>true to have <see cref="P:ZedGraph.Scale.Mag"/> set automatically,
            false otherwise</value>
            <seealso cref="P:ZedGraph.AxisLabel.IsOmitMag"/>
            <seealso cref="P:ZedGraph.Axis.Title"/>
            <seealso cref="P:ZedGraph.Scale.Mag"/>
        </member>
        <member name="P:ZedGraph.Scale.MinGrace">
            <summary> Gets or sets the "grace" value applied to the minimum data range.
            </summary>
            <remarks>
            This value is
            expressed as a fraction of the total data range.  For example, assume the data
            range is from 4.0 to 16.0, leaving a range of 12.0.  If MinGrace is set to
            0.1, then 10% of the range, or 1.2 will be subtracted from the minimum data value.
            The scale will then be ranged to cover at least 2.8 to 16.0.
            </remarks>
            <seealso cref="P:ZedGraph.Scale.Min"/>
            <seealso cref="F:ZedGraph.Scale.Default.MinGrace"/>
            <seealso cref="P:ZedGraph.Scale.MaxGrace"/>
        </member>
        <member name="P:ZedGraph.Scale.MaxGrace">
            <summary> Gets or sets the "grace" value applied to the maximum data range.
            </summary>
            <remarks>
            This values determines how much extra space is left after the last data value.
            This value is
            expressed as a fraction of the total data range.  For example, assume the data
            range is from 4.0 to 16.0, leaving a range of 12.0.  If MaxGrace is set to
            0.1, then 10% of the range, or 1.2 will be added to the maximum data value.
            The scale will then be ranged to cover at least 4.0 to 17.2.
            </remarks>
            <seealso cref="P:ZedGraph.Scale.Max"/>
            <seealso cref="F:ZedGraph.Scale.Default.MaxGrace"/>
            <seealso cref="P:ZedGraph.Scale.MinGrace"/>
        </member>
        <member name="P:ZedGraph.Scale.Align">
            <summary> Controls the alignment of the <see cref="T:ZedGraph.Axis"/> tic labels.
            </summary>
            <remarks>
            This property controls whether the inside, center, or outside edges of the
            text labels are aligned.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale.AlignH">
            <summary> Controls the alignment of the <see cref="T:ZedGraph.Axis"/> tic labels.
            </summary>
            <remarks>
            This property controls whether the left, center, or right edges of the
            text labels are aligned.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale.FontSpec">
            <summary>
            Gets a reference to the <see cref="T:ZedGraph.FontSpec"/> class used to render
            the scale values
            </summary>
            <seealso cref="F:ZedGraph.Scale.Default.FontFamily"/>
            <seealso cref="F:ZedGraph.Scale.Default.FontSize"/>
            <seealso cref="F:ZedGraph.Scale.Default.FontColor"/>
            <seealso cref="F:ZedGraph.Scale.Default.FontBold"/>
            <seealso cref="F:ZedGraph.Scale.Default.FontUnderline"/>
            <seealso cref="F:ZedGraph.Scale.Default.FontItalic"/>
        </member>
        <member name="P:ZedGraph.Scale.LabelGap">
            <summary>
            The gap between the scale labels and the tics.
            </summary>
        </member>
        <member name="P:ZedGraph.Scale.IsLabelsInside">
            <summary>
            Gets or sets a value that causes the axis scale labels and title to appear on the
            opposite side of the axis.
            </summary>
            <remarks>
            For example, setting this flag to true for the <see cref="T:ZedGraph.YAxis"/> will shift the
            axis labels and title to the right side of the <see cref="T:ZedGraph.YAxis"/> instead of the
            normal left-side location.  Set this property to true for the <see cref="T:ZedGraph.XAxis" />,
            and set the <see cref="P:ZedGraph.Axis.Cross"/> property for the <see cref="T:ZedGraph.XAxis"/> to an arbitrarily
            large value (assuming <see cref="P:ZedGraph.Scale.IsReverse"/> is false for the <see cref="T:ZedGraph.YAxis" />) in
            order to have the <see cref="T:ZedGraph.XAxis"/> appear at the top of the <see cref="P:ZedGraph.Chart.Rect" />.
            </remarks>
            <seealso cref="P:ZedGraph.Scale.IsReverse"/>
            <seealso cref="P:ZedGraph.Axis.Cross"/>
        </member>
        <member name="P:ZedGraph.Scale.IsSkipFirstLabel">
            <summary>
            Gets or sets a value that causes the first scale label for this <see cref="T:ZedGraph.Axis"/> to be
            hidden.
            </summary>
            <remarks>
            Often, for axis that have an active <see cref="P:ZedGraph.Axis.Cross"/> setting (e.g., <see cref="P:ZedGraph.Axis.CrossAuto"/>
            is false), the first and/or last scale label are overlapped by opposing axes.  Use this
            property to hide the first scale label to avoid the overlap.  Note that setting this value
            to true will hide any scale label that appears within <see cref="F:ZedGraph.Scale.Default.EdgeTolerance"/> of the
            beginning of the <see cref="T:ZedGraph.Axis"/>.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale.IsSkipLastLabel">
            <summary>
            Gets or sets a value that causes the last scale label for this <see cref="T:ZedGraph.Axis"/> to be
            hidden.
            </summary>
            <remarks>
            Often, for axis that have an active <see cref="P:ZedGraph.Axis.Cross"/> setting (e.g., <see cref="P:ZedGraph.Axis.CrossAuto"/>
            is false), the first and/or last scale label are overlapped by opposing axes.  Use this
            property to hide the last scale label to avoid the overlap.  Note that setting this value
            to true will hide any scale label that appears within <see cref="F:ZedGraph.Scale.Default.EdgeTolerance"/> of the
            end of the <see cref="T:ZedGraph.Axis"/>.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale.IsSkipCrossLabel">
            <summary>
            Gets or sets a value that causes the scale label that is located at the <see cref="P:ZedGraph.Axis.Cross" />
            value for this <see cref="T:ZedGraph.Axis"/> to be hidden.
            </summary>
            <remarks>
            For axes that have an active <see cref="P:ZedGraph.Axis.Cross"/> setting (e.g., <see cref="P:ZedGraph.Axis.CrossAuto"/>
            is false), the scale label at the <see cref="P:ZedGraph.Axis.Cross" /> value is overlapped by opposing axes.
            Use this property to hide the scale label to avoid the overlap.
            </remarks>
        </member>
        <member name="P:ZedGraph.Scale.IsReverse">
            <summary>
            Determines if the scale values are reversed for this <see cref="T:ZedGraph.Axis"/>
            </summary>
            <value>true for the X values to decrease to the right or the Y values to
            decrease upwards, false otherwise</value>
            <seealso cref="F:ZedGraph.Scale.Default.IsReverse"/>.
        </member>
        <member name="P:ZedGraph.Scale.IsUseTenPower">
            <summary>
            Determines if powers-of-ten notation will be used for the numeric value labels.
            </summary>
            <remarks>
            The powers-of-ten notation is just the text "10" followed by a superscripted value
            indicating the magnitude.  This mode is only valid for log scales (see
            <see cref="P:ZedGraph.Scale.IsLog"/> and <see cref="P:ZedGraph.Scale.Type"/>).
            </remarks>
            <value> boolean value; true to show the title as a power of ten, false to
            show a regular numeric value (e.g., "0.01", "10", "1000")</value>
        </member>
        <member name="P:ZedGraph.Scale.IsPreventLabelOverlap">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that determines if ZedGraph will check to
            see if the <see cref="T:ZedGraph.Axis"/> scale labels are close enough to overlap.  If so,
            ZedGraph will adjust the step size to prevent overlap.
            </summary>
            <remarks>
            The process of checking for overlap is done during the <see cref="M:ZedGraph.GraphPane.AxisChange"/>
            method call, and affects the selection of the major step size (<see cref="P:ZedGraph.Scale.MajorStep"/>).
            </remarks>
            <value> boolean value; true to check for overlap, false otherwise</value>
        </member>
        <member name="P:ZedGraph.Scale.IsVisible">
            <summary>
            Gets or sets a property that determines whether or not the scale values will be shown.
            </summary>
            <value>true to show the scale values, false otherwise</value>
            <seealso cref="P:ZedGraph.Axis.IsVisible"/>.
        </member>
        <member name="P:ZedGraph.Scale.TextLabels">
            <summary>
            The text labels for this <see cref="T:ZedGraph.Axis"/>.
            </summary>
            <remarks>
            This property is only
            applicable if <see cref="P:ZedGraph.Scale.Type"/> is set to <see cref="F:ZedGraph.AxisType.Text"/>.
            </remarks>
        </member>
        <member name="M:ZedGraph.Scale.SetupScaleData(ZedGraph.GraphPane,ZedGraph.Axis)">
            <summary>
            Setup some temporary transform values in preparation for rendering the
            <see cref="T:ZedGraph.Axis"/>.
            </summary>
            <remarks>
            This method is typically called by the parent <see cref="T:ZedGraph.GraphPane"/>
            object as part of the <see cref="M:ZedGraph.GraphPane.Draw(System.Drawing.Graphics)"/> method.  It is also
            called by <see cref="M:ZedGraph.GraphPane.GeneralTransform(System.Double,System.Double,ZedGraph.CoordType)"/> and
            <see cref="M:ZedGraph.GraphPane.ReverseTransform(System.Drawing.PointF,System.Double@,System.Double@)"/>
            methods to setup for coordinate transformations.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="axis">
            The parent <see cref="T:ZedGraph.Axis" /> for this <see cref="T:ZedGraph.Scale" />
            </param>
        </member>
        <member name="M:ZedGraph.Scale.Linearize(System.Double)">
            <summary>
            Convert a value to its linear equivalent for this type of scale.
            </summary>
            <remarks>
            The default behavior is to just return the value unchanged.  However,
            for <see cref="F:ZedGraph.AxisType.Log" /> and <see cref="F:ZedGraph.AxisType.Exponent" />,
            it returns the log or power equivalent.
            </remarks>
            <param name="val">The value to be converted</param>
        </member>
        <member name="M:ZedGraph.Scale.DeLinearize(System.Double)">
            <summary>
            Convert a value from its linear equivalent to its actual scale value
            for this type of scale.
            </summary>
            <remarks>
            The default behavior is to just return the value unchanged.  However,
            for <see cref="F:ZedGraph.AxisType.Log" /> and <see cref="F:ZedGraph.AxisType.Exponent" />,
            it returns the anti-log or inverse-power equivalent.
            </remarks>
            <param name="val">The value to be converted</param>
        </member>
        <member name="M:ZedGraph.Scale.MakeLabel(ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for the axis at the specified ordinal position.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:ZedGraph.Scale.IsLog"/>, <see cref="P:ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log (<see cref="P:ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String" /></returns>
        </member>
        <member name="M:ZedGraph.Scale.GetScaleMaxSpace(System.Drawing.Graphics,ZedGraph.GraphPane,System.Single,System.Boolean)">
            <summary>
            Get the maximum width of the scale value text that is required to label this
            <see cref="T:ZedGraph.Axis"/>.
            The results of this method are used to determine how much space is required for
            the axis labels.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="applyAngle">
            true to get the bounding box of the text using the <see cref="P:ZedGraph.FontSpec.Angle" />,
            false to just get the bounding box without rotation
            </param>
            <returns>the maximum width of the text in pixel units</returns>
        </member>
        <member name="M:ZedGraph.Scale.CalcMajorTicValue(System.Double,System.Double)">
            <summary>
            Determine the value for any major tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:ZedGraph.Scale.IsLog"/>, <see cref="P:ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double)
            </param>
            <param name="tic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified major tic value (floating point double).
            </returns>
        </member>
        <member name="M:ZedGraph.Scale.CalcMinorTicValue(System.Double,System.Int32)">
            <summary>
            Determine the value for any minor tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:ZedGraph.Scale.IsLog"/>, <see cref="P:ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double).  This tic value is the base
            reference for all tics (including minor ones).
            </param>
            <param name="iTic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified minor tic value (floating point double).
            </returns>
        </member>
        <member name="M:ZedGraph.Scale.CalcMinorStart(System.Double)">
            <summary>
            Internal routine to determine the ordinals of the first minor tic mark
            </summary>
            <param name="baseVal">
            The value of the first major tic for the axis.
            </param>
            <returns>
            The ordinal position of the first minor tic, relative to the first major tic.
            This value can be negative (e.g., -3 means the first minor tic is 3 minor step
            increments before the first major tic.
            </returns>
        </member>
        <member name="M:ZedGraph.Scale.CalcBaseTic">
            <summary>
            Determine the value for the first major tic.
            </summary>
            <remarks>
            This is done by finding the first possible value that is an integral multiple of
            the step size, taking into account the date/time units if appropriate.
            This method properly accounts for <see cref="P:ZedGraph.Scale.IsLog"/>, <see cref="P:ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <returns>
            First major tic value (floating point double).
            </returns>
        </member>
        <member name="M:ZedGraph.Scale.DrawLabels(System.Drawing.Graphics,ZedGraph.GraphPane,System.Double,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Draw the value labels, tic marks, and grid lines as
            required for this <see cref="T:ZedGraph.Axis"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="baseVal">
            The first major tic value for the axis
            </param>
            <param name="nTics">
            The total number of major tics for the axis
            </param>
            <param name="topPix">
            The pixel location of the far side of the ChartRect from this axis.
            This value is the ChartRect.Height for the XAxis, or the ChartRect.Width
            for the YAxis and Y2Axis.
            </param>
            <param name="shift">The number of pixels to shift this axis, based on the
            value of <see cref="P:ZedGraph.Axis.Cross"/>.  A positive value is into the ChartRect relative to
            the default axis position.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:ZedGraph.Scale.Draw(System.Drawing.Graphics,ZedGraph.GraphPane,System.Single,System.Single)">
            <summary>
            Draw the scale, including the tic marks, value labels, and grid lines as
            required for this <see cref="T:ZedGraph.Axis"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="shiftPos">
            The number of pixels to shift to account for non-primary axis position (e.g.,
            the second, third, fourth, etc. <see cref="T:ZedGraph.YAxis" /> or <see cref="T:ZedGraph.Y2Axis" />.
            </param>
        </member>
        <member name="M:ZedGraph.Scale.GetClusterWidth(ZedGraph.GraphPane)">
            <summary>
            Determine the width, in pixel units, of each bar cluster including
            the cluster gaps and bar gaps.
            </summary>
            <remarks>
            This method uses the <see cref="P:ZedGraph.BarSettings.ClusterScaleWidth" /> for
            non-ordinal axes, or a cluster width of 1.0 for ordinal axes.
            </remarks>
            <param name="pane">A reference to the <see cref="T:ZedGraph.GraphPane"/> object
            associated with this <see cref="T:ZedGraph.Axis"/></param>
            <returns>The width of each bar cluster, in pixel units</returns>
        </member>
        <member name="M:ZedGraph.Scale.GetClusterWidth(System.Double)">
            <summary>
            Calculates the cluster width, in pixels, by transforming the specified
            clusterScaleWidth.
            </summary>
            <param name="clusterScaleWidth">The width in user scale units of each
            bar cluster</param>
            <returns>The equivalent pixel size of the bar cluster</returns>
        </member>
        <member name="M:ZedGraph.Scale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)">
            <summary>
            Select a reasonable scale given a range of data values.
            </summary>
            <remarks>
            The scale range is chosen
            based on increments of 1, 2, or 5 (because they are even divisors of 10).  This
            routine honors the <see cref="P:ZedGraph.Scale.MinAuto"/>, <see cref="P:ZedGraph.Scale.MaxAuto"/>,
            and <see cref="P:ZedGraph.Scale.MajorStepAuto"/> autorange settings as well as the <see cref="P:ZedGraph.Scale.IsLog"/>
            setting.  In the event that any of the autorange settings are false, the
            corresponding <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>, or <see cref="P:ZedGraph.Scale.MajorStep"/>
            setting is explicitly honored, and the remaining autorange settings (if any) will
            be calculated to accomodate the non-autoranged values.  The basic defaults for
            scale selection are defined using <see cref="F:ZedGraph.Scale.Default.ZeroLever"/>,
            <see cref="F:ZedGraph.Scale.Default.TargetXSteps"/>, and <see cref="F:ZedGraph.Scale.Default.TargetYSteps"/>
            from the <see cref="T:ZedGraph.Scale.Default"/> default class.
            <para>On Exit:</para>
            <para><see cref="P:ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:ZedGraph.Scale.MinorStep"/> is set to scale minor step size (if <see cref="P:ZedGraph.Scale.MinorStepAuto"/> = true)</para>
            <para><see cref="P:ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:ZedGraph.GraphPane"/> object
            associated with this <see cref="T:ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:ZedGraph.Scale.CalcMaxLabels(System.Drawing.Graphics,ZedGraph.GraphPane,System.Single)">
            <summary>
            Calculate the maximum number of labels that will fit on this axis.
            </summary>
            <remarks>
            This method works for
            both X and Y direction axes, and it works for angled text (assuming that a bounding box
            is an appropriate measure).  Technically, labels at 45 degree angles could fit better than
            the return value of this method since the bounding boxes can overlap without the labels actually
            overlapping.
            </remarks>
            <param name="pane">A reference to the <see cref="T:ZedGraph.GraphPane"/> object
            associated with this <see cref="T:ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:ZedGraph.Scale.SetScaleMag(System.Double,System.Double,System.Double)">
            <summary>
            Sets the Magnitude factor for the scale if the <see cref="F:ZedGraph.Scale._magAuto"/> is set to <c>true</c>.
            </summary>
            <remarks>
            if <see cref="F:ZedGraph.Scale._formatAuto"/> is set to <c>true</c> then the label formatting will
            be adjusted for the requried number of decimal places.
            </remarks>
            <param name="min">the minimum scale value.</param>
            <param name="max">the maximum scale value.</param>
            <param name="step">the scale stepping.</param>
        </member>
        <member name="M:ZedGraph.Scale.CalcStepSize(System.Double,System.Double)">
            <summary>
            Calculate a step size based on a data range.
            </summary>
            <remarks>
            This utility method
            will try to honor the <see cref="F:ZedGraph.Scale.Default.TargetXSteps"/> and
            <see cref="F:ZedGraph.Scale.Default.TargetYSteps"/> number of
            steps while using a rational increment (1, 2, or 5 -- which are
            even divisors of 10).  This method is used by <see cref="M:ZedGraph.Scale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)"/>.
            </remarks>
            <param name="range">The range of data in user scale units.  This can
            be a full range of the data for the major step size, or just the
            value of the major step size to calculate the minor step size</param>
            <param name="targetSteps">The desired "typical" number of steps
            to divide the range into</param>
            <returns>The calculated step size for the specified data range.</returns>
        </member>
        <member name="M:ZedGraph.Scale.CalcBoundedStepSize(System.Double,System.Double)">
            <summary>
            Calculate a step size based on a data range, limited to a maximum number of steps.
            </summary>
            <remarks>
            This utility method
            will calculate a step size, of no more than maxSteps,
            using a rational increment (1, 2, or 5 -- which are
            even divisors of 10).  This method is used by <see cref="M:ZedGraph.Scale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)"/>.
            </remarks>
            <param name="range">The range of data in user scale units.  This can
            be a full range of the data for the major step size, or just the
            value of the major step size to calculate the minor step size</param>
            <param name="maxSteps">The maximum allowable number of steps
            to divide the range into</param>
            <returns>The calculated step size for the specified data range.</returns>
        </member>
        <member name="M:ZedGraph.Scale.CalcNumTics">
            <summary>
            Internal routine to determine the ordinals of the first and last major axis label.
            </summary>
            <returns>
            This is the total number of major tics for this axis.
            </returns>
        </member>
        <member name="M:ZedGraph.Scale.MyMod(System.Double,System.Double)">
            <summary>
            Calculate the modulus (remainder) in a safe manner so that divide
            by zero errors are avoided
            </summary>
            <param name="x">The divisor</param>
            <param name="y">The dividend</param>
            <returns>the value of the modulus, or zero for the divide-by-zero
            case</returns>
        </member>
        <member name="M:ZedGraph.Scale.SetRange(ZedGraph.GraphPane,ZedGraph.Axis)">
            <summary>
            Define suitable default ranges for an axis in the event that
            no data were available
            </summary>
            <param name="pane">The <see cref="T:ZedGraph.GraphPane"/> of interest</param>
            <param name="axis">The <see cref="T:ZedGraph.Axis"/> for which to set the range</param>
        </member>
        <member name="M:ZedGraph.Scale.Transform(System.Double)">
            <summary>
            Transform the coordinate value from user coordinates (scale value)
            to graphics device coordinates (pixels).
            </summary>
            <remarks>This method takes into
            account the scale range (<see cref="P:ZedGraph.Scale.Min"/> and <see cref="P:ZedGraph.Scale.Max"/>),
            logarithmic state (<see cref="P:ZedGraph.Scale.IsLog"/>), scale reverse state
            (<see cref="P:ZedGraph.Scale.IsReverse"/>) and axis type (<see cref="T:ZedGraph.XAxis"/>,
            <see cref="T:ZedGraph.YAxis"/>, or <see cref="T:ZedGraph.Y2Axis"/>).
            Note that the <see cref="P:ZedGraph.Chart.Rect"/> must be valid, and
            <see cref="M:ZedGraph.Scale.SetupScaleData(ZedGraph.GraphPane,ZedGraph.Axis)"/> must be called for the
            current configuration before using this method (this is called everytime
            the graph is drawn (i.e., <see cref="M:ZedGraph.GraphPane.Draw(System.Drawing.Graphics)"/> is called).
            </remarks>
            <param name="x">The coordinate value, in user scale units, to
            be transformed</param>
            <returns>the coordinate value transformed to screen coordinates
            for use in calling the <see cref="T:System.Drawing.Graphics"/> draw routines</returns>
        </member>
        <member name="M:ZedGraph.Scale.Transform(System.Boolean,System.Int32,System.Double)">
            <summary>
            Transform the coordinate value from user coordinates (scale value)
            to graphics device coordinates (pixels).
            </summary>
            <remarks>
            This method takes into
            account the scale range (<see cref="P:ZedGraph.Scale.Min"/> and <see cref="P:ZedGraph.Scale.Max"/>),
            logarithmic state (<see cref="P:ZedGraph.Scale.IsLog"/>), scale reverse state
            (<see cref="P:ZedGraph.Scale.IsReverse"/>) and axis type (<see cref="T:ZedGraph.XAxis"/>,
            <see cref="T:ZedGraph.YAxis"/>, or <see cref="T:ZedGraph.Y2Axis"/>).
            Note that the <see cref="P:ZedGraph.Chart.Rect"/> must be valid, and
            <see cref="M:ZedGraph.Scale.SetupScaleData(ZedGraph.GraphPane,ZedGraph.Axis)"/> must be called for the
            current configuration before using this method (this is called everytime
            the graph is drawn (i.e., <see cref="M:ZedGraph.GraphPane.Draw(System.Drawing.Graphics)"/> is called).
            </remarks>
            <param name="isOverrideOrdinal">true to force the axis to honor the data
            value, rather than replacing it with the ordinal value</param>
            <param name="i">The ordinal value of this point, just in case
            this is an <see cref="F:ZedGraph.AxisType.Ordinal"/> axis</param>
            <param name="x">The coordinate value, in user scale units, to
            be transformed</param>
            <returns>the coordinate value transformed to screen coordinates
            for use in calling the <see cref="T:System.Drawing.Graphics"/> draw routines</returns>
        </member>
        <member name="M:ZedGraph.Scale.ReverseTransform(System.Single)">
            <summary>
            Reverse transform the user coordinates (scale value)
            given a graphics device coordinate (pixels).
            </summary>
            <remarks>
            This method takes into
            account the scale range (<see cref="P:ZedGraph.Scale.Min"/> and <see cref="P:ZedGraph.Scale.Max"/>),
            logarithmic state (<see cref="P:ZedGraph.Scale.IsLog"/>), scale reverse state
            (<see cref="P:ZedGraph.Scale.IsReverse"/>) and axis type (<see cref="T:ZedGraph.XAxis"/>,
            <see cref="T:ZedGraph.YAxis"/>, or <see cref="T:ZedGraph.Y2Axis"/>).
            Note that the <see cref="P:ZedGraph.Chart.Rect"/> must be valid, and
            <see cref="M:ZedGraph.Scale.SetupScaleData(ZedGraph.GraphPane,ZedGraph.Axis)"/> must be called for the
            current configuration before using this method (this is called everytime
            the graph is drawn (i.e., <see cref="M:ZedGraph.GraphPane.Draw(System.Drawing.Graphics)"/> is called).
            </remarks>
            <param name="pixVal">The screen pixel value, in graphics device coordinates to
            be transformed</param>
            <returns>The user scale value that corresponds to the screen pixel location</returns>
        </member>
        <member name="M:ZedGraph.Scale.LocalTransform(System.Double)">
            <summary>
            Transform the coordinate value from user coordinates (scale value)
            to graphics device coordinates (pixels).
            </summary>
            <remarks>Assumes that the origin
            has been set to the "left" of this axis, facing from the label side.
            Note that the left side corresponds to the scale minimum for the X and
            Y2 axes, but it is the scale maximum for the Y axis.
            This method takes into
            account the scale range (<see cref="P:ZedGraph.Scale.Min"/> and <see cref="P:ZedGraph.Scale.Max"/>),
            logarithmic state (<see cref="P:ZedGraph.Scale.IsLog"/>), scale reverse state
            (<see cref="P:ZedGraph.Scale.IsReverse"/>) and axis type (<see cref="T:ZedGraph.XAxis"/>,
            <see cref="T:ZedGraph.YAxis"/>, or <see cref="T:ZedGraph.Y2Axis"/>).  Note that
            the <see cref="P:ZedGraph.Chart.Rect"/> must be valid, and
            <see cref="M:ZedGraph.Scale.SetupScaleData(ZedGraph.GraphPane,ZedGraph.Axis)"/> must be called for the
            current configuration before using this method.
            </remarks>
            <param name="x">The coordinate value, in linearized user scale units, to
            be transformed</param>
            <returns>the coordinate value transformed to screen coordinates
            for use in calling the <see cref="M:ZedGraph.Scale.Draw(System.Drawing.Graphics,ZedGraph.GraphPane,System.Single,System.Single)"/> method</returns>
        </member>
        <member name="M:ZedGraph.Scale.SafeLog(System.Double)">
            <summary>
            Calculate a base 10 logarithm in a safe manner to avoid math exceptions
            </summary>
            <param name="x">The value for which the logarithm is to be calculated</param>
            <returns>The value of the logarithm, or 0 if the <paramref name="x"/>
            argument was negative or zero</returns>
        </member>
        <member name="M:ZedGraph.Scale.SafeExp(System.Double,System.Double)">
            <summary>
            Calculate an exponential in a safe manner to avoid math exceptions
            </summary> 
             <param name="x">The value for which the exponential is to be calculated</param>
             <param name="exponent">The exponent value to use for calculating the exponential.</param>
        </member>
        <member name="T:ZedGraph.ScaleState">
            <summary>
            A class that captures an <see cref="T:ZedGraph.Axis"/> scale range.
            </summary>
            <remarks>This structure is used by the <see cref="T:ZedGraph.ZoomState"/> class to store
            <see cref="T:ZedGraph.Axis"/> scale range settings in a collection for later retrieval.
            The class stores the <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.MajorStep"/> properties, along with
            the corresponding auto-scale settings: <see cref="P:ZedGraph.Scale.MinAuto"/>,
            <see cref="P:ZedGraph.Scale.MaxAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:ZedGraph.Scale.MajorStepAuto"/>.</remarks>
            <author> John Champion </author>
            <version> $Revision: 3.2 $ $Date: 2007-02-19 08:05:24 $ </version>
        </member>
        <member name="F:ZedGraph.ScaleState._min">
            <summary>
            The axis range data for <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.MajorStep"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._minorStep">
            <summary>
            The axis range data for <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.MajorStep"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._majorStep">
            <summary>
            The axis range data for <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.MajorStep"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._max">
            <summary>
            The axis range data for <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>,
            <see cref="P:ZedGraph.Scale.MinorStep"/>, and <see cref="P:ZedGraph.Scale.MajorStep"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._minAuto">
            <summary>
            The status of <see cref="P:ZedGraph.Scale.MinAuto"/>,
            <see cref="P:ZedGraph.Scale.MaxAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._minorStepAuto">
            <summary>
            The status of <see cref="P:ZedGraph.Scale.MinAuto"/>,
            <see cref="P:ZedGraph.Scale.MaxAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._majorStepAuto">
            <summary>
            The status of <see cref="P:ZedGraph.Scale.MinAuto"/>,
            <see cref="P:ZedGraph.Scale.MaxAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._maxAuto">
            <summary>
            The status of <see cref="P:ZedGraph.Scale.MinAuto"/>,
            <see cref="P:ZedGraph.Scale.MaxAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._formatAuto">
            <summary>
            The status of <see cref="P:ZedGraph.Scale.MinAuto"/>,
            <see cref="P:ZedGraph.Scale.MaxAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._magAuto">
            <summary>
            The status of <see cref="P:ZedGraph.Scale.MinAuto"/>,
            <see cref="P:ZedGraph.Scale.MaxAuto"/>, <see cref="P:ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._minorUnit">
            <summary>
            The status of <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:ZedGraph.ScaleState._majorUnit">
            <summary>
            The status of <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="M:ZedGraph.ScaleState.#ctor(ZedGraph.Axis)">
            <summary>
            Construct a <see cref="T:ZedGraph.ScaleState"/> from the specified <see cref="T:ZedGraph.Axis"/>
            </summary>
            <param name="axis">The <see cref="T:ZedGraph.Axis"/> from which to collect the scale
            range settings.</param>
        </member>
        <member name="M:ZedGraph.ScaleState.#ctor(ZedGraph.ScaleState)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.ScaleState"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.ScaleState.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.ScaleState.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.ScaleState.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:ZedGraph.ScaleState.ApplyScale(ZedGraph.Axis)">
            <summary>
            Copy the properties from this <see cref="T:ZedGraph.ScaleState"/> out to the specified <see cref="T:ZedGraph.Axis"/>.
            </summary>
            <param name="axis">The <see cref="T:ZedGraph.Axis"/> reference to which the properties should be
            copied</param>
        </member>
        <member name="M:ZedGraph.ScaleState.IsChanged(ZedGraph.Axis)">
            <summary>
            Determine if the state contained in this <see cref="T:ZedGraph.ScaleState"/> object is different from
            the state of the specified <see cref="T:ZedGraph.Axis"/>.
            </summary>
            <param name="axis">The <see cref="T:ZedGraph.Axis"/> object with which to compare states.</param>
            <returns>true if the states are different, false otherwise</returns>
        </member>
        <member name="T:ZedGraph.ScaleStateList">
            <summary>
            A collection class that maintains a list of <see cref="T:ZedGraph.ScaleState" />
            objects, corresponding to the list of <see cref="T:ZedGraph.Axis" /> objects
            from <see cref="P:ZedGraph.GraphPane.YAxisList" /> or <see cref="P:ZedGraph.GraphPane.Y2AxisList" />.
            </summary>
        </member>
        <member name="M:ZedGraph.ScaleStateList.#ctor(ZedGraph.YAxisList)">
            <summary>
            Construct a new <see cref="T:ZedGraph.ScaleStateList" /> automatically from an
            existing <see cref="T:ZedGraph.YAxisList" />.
            </summary>
            <param name="list">The <see cref="T:ZedGraph.YAxisList" /> (a list of Y axes),
            from which to retrieve the state and create the <see cref="T:ZedGraph.ScaleState" />
            objects.</param>
        </member>
        <member name="M:ZedGraph.ScaleStateList.#ctor(ZedGraph.Y2AxisList)">
            <summary>
            Construct a new <see cref="T:ZedGraph.ScaleStateList" /> automatically from an
            existing <see cref="T:ZedGraph.Y2AxisList" />.
            </summary>
            <param name="list">The <see cref="T:ZedGraph.Y2AxisList" /> (a list of Y axes),
            from which to retrieve the state and create the <see cref="T:ZedGraph.ScaleState" />
            objects.</param>
        </member>
        <member name="M:ZedGraph.ScaleStateList.#ctor(ZedGraph.ScaleStateList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.ScaleStateList"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.ScaleStateList.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.ScaleStateList.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.ScaleStateList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:ZedGraph.ScaleStateList.IsChanged(ZedGraph.YAxisList)">
            <summary>
            Iterate through the list of <see cref="T:ZedGraph.ScaleState" /> objects, comparing them
            to the state of the specified <see cref="T:ZedGraph.YAxisList" /> <see cref="T:ZedGraph.Axis" />
            objects.
            </summary>
            <param name="list">A <see cref="T:ZedGraph.YAxisList" /> object specifying a list of
            <see cref="T:ZedGraph.Axis" /> objects to be compared with this <see cref="T:ZedGraph.ScaleStateList" />.
            </param>
            <returns>true if a difference is found, false otherwise</returns>
        </member>
        <member name="M:ZedGraph.ScaleStateList.IsChanged(ZedGraph.Y2AxisList)">
            <summary>
            Iterate through the list of <see cref="T:ZedGraph.ScaleState" /> objects, comparing them
            to the state of the specified <see cref="T:ZedGraph.Y2AxisList" /> <see cref="T:ZedGraph.Axis" />
            objects.
            </summary>
            <param name="list">A <see cref="T:ZedGraph.Y2AxisList" /> object specifying a list of
            <see cref="T:ZedGraph.Axis" /> objects to be compared with this <see cref="T:ZedGraph.ScaleStateList" />.
            </param>
            <returns>true if a difference is found, false otherwise</returns>
        </member>
        <member name="M:ZedGraph.ScaleStateList.ApplyScale(ZedGraph.YAxisList)">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ZedGraph.ScaleStateList.ApplyScale(ZedGraph.Y2AxisList)">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:ZedGraph.ScrollRange">
            <summary>
            A simple struct to store minimum and maximum <see cref="T:System.Double" /> type
            values for the scroll range
            </summary>
        </member>
        <member name="M:ZedGraph.ScrollRange.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Construct a <see cref="T:ZedGraph.ScrollRange" /> object given the specified data values.
            </summary>
            <param name="min">The minimum axis value limit for the scroll bar</param>
            <param name="max">The maximum axis value limit for the scroll bar</param>
            <param name="isScrollable">true to make this item scrollable, false otherwise</param>
        </member>
        <member name="M:ZedGraph.ScrollRange.#ctor(System.Boolean)">
            <summary>
            Sets the scroll range to default values of zero, and sets the <see cref="P:ZedGraph.ScrollRange.IsScrollable" />
            property as specified.
            </summary>
            <param name="isScrollable">true to make this item scrollable, false otherwise</param>
        </member>
        <member name="M:ZedGraph.ScrollRange.#ctor(ZedGraph.ScrollRange)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.ScrollRange"/> object from which to copy</param>
        </member>
        <member name="P:ZedGraph.ScrollRange.IsScrollable">
            <summary>
            Gets or sets a property that determines if the <see cref="T:ZedGraph.Axis" /> corresponding to
            this <see cref="T:ZedGraph.ScrollRange" /> object can be scrolled.
            </summary>
        </member>
        <member name="P:ZedGraph.ScrollRange.Min">
            <summary>
            The minimum axis value limit for the scroll bar.
            </summary>
        </member>
        <member name="P:ZedGraph.ScrollRange.Max">
            <summary>
            The maximum axis value limit for the scroll bar.
            </summary>
        </member>
        <member name="T:ZedGraph.ScrollRangeList">
            <summary>
            A collection class containing a list of <see cref="T:ZedGraph.ScrollRange"/> objects.
            </summary>
            
            <author>John Champion</author>
            <version> $Revision: 3.3 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="M:ZedGraph.ScrollRangeList.#ctor">
            <summary>
            Default constructor for the collection class.
            </summary>
        </member>
        <member name="M:ZedGraph.ScrollRangeList.#ctor(ZedGraph.ScrollRangeList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.ScrollRangeList"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.ScrollRangeList.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.ScrollRangeList.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.ScrollRangeList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="P:ZedGraph.ScrollRangeList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:ZedGraph.ScrollRange"/> object by
            its ordinal position in the list.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:ZedGraph.ScrollRange"/> object to be accessed.</param>
            <value>A <see cref="T:ZedGraph.ScrollRange"/> object instance</value>
        </member>
        <member name="T:ZedGraph.Selection">
            <summary>
            </summary>
            <remarks>
            </remarks>
            
            <author> John Champion and JCarpenter </author>
            <version> $Revision: 3.5 $ $Date: 2007-03-11 02:08:16 $ </version>
        </member>
        <member name="E:ZedGraph.Selection.SelectionChangedEvent">
            <summary>
            Subscribe to this event to receive notice 
            that the list of selected CurveItems has changed
            </summary>
        </member>
        <member name="F:ZedGraph.Selection.Border">
            <summary>
            The <see cref="F:ZedGraph.Selection.Border" /> type to be used for drawing "selected"
            <see cref="T:ZedGraph.PieItem" />, <see cref="T:ZedGraph.BarItem" />, <see cref="T:ZedGraph.HiLowBarItem" />,
            <see cref="T:ZedGraph.OHLCBarItem" />, and <see cref="T:ZedGraph.JapaneseCandleStickItem" /> item types.
            </summary>
        </member>
        <member name="F:ZedGraph.Selection.Fill">
            <summary>
            The <see cref="F:ZedGraph.Selection.Fill" /> type to be used for drawing "selected"
            <see cref="T:ZedGraph.PieItem" />, <see cref="T:ZedGraph.BarItem" />, <see cref="T:ZedGraph.HiLowBarItem" />,
            and <see cref="T:ZedGraph.JapaneseCandleStickItem" /> item types.
            </summary>
        </member>
        <member name="F:ZedGraph.Selection.Line">
            <summary>
            The <see cref="F:ZedGraph.Selection.Line" /> type to be used for drawing "selected"
            <see cref="T:ZedGraph.LineItem" /> and <see cref="T:ZedGraph.StickItem" /> types
            </summary>
        </member>
        <member name="F:ZedGraph.Selection.Symbol">
            <summary>
            The <see cref="F:ZedGraph.Selection.Symbol" /> type to be used for drawing "selected"
            <see cref="T:ZedGraph.LineItem" /> and <see cref="T:ZedGraph.ErrorBarItem" /> types.
            </summary>
        </member>
        <member name="M:ZedGraph.Selection.Select(ZedGraph.MasterPane,ZedGraph.CurveItem)">
            <summary>
            Place a <see cref="T:ZedGraph.CurveItem" /> in the selection list, removing all other
            items.
            </summary>
            <param name="master">The <see cref="T:ZedGraph.MasterPane" /> that is the "owner"
            of the <see cref="T:ZedGraph.CurveItem" />'s.</param>
            <param name="ci">The <see cref="T:ZedGraph.CurveItem" /> to be added to the list.</param>
        </member>
        <member name="M:ZedGraph.Selection.Select(ZedGraph.MasterPane,ZedGraph.CurveList)">
            <summary>
            Place a list of <see cref="T:ZedGraph.CurveItem" />'s in the selection list, removing all other
            items.
            </summary>
            <param name="master">The <see cref="T:ZedGraph.MasterPane" /> that is the "owner"
            of the <see cref="T:ZedGraph.CurveItem" />'s.</param>
            <param name="ciList">The list of <see cref="T:ZedGraph.CurveItem" /> to be added to the list.</param>
        </member>
        <member name="M:ZedGraph.Selection.AddToSelection(ZedGraph.MasterPane,ZedGraph.CurveItem)">
            <summary>
            Add a <see cref="T:ZedGraph.CurveItem" /> to the selection list.
            </summary>
            <param name="master">The <see cref="T:ZedGraph.MasterPane" /> that is the "owner"
            of the <see cref="T:ZedGraph.CurveItem" />'s.</param>
            <param name="ci">The <see cref="T:ZedGraph.CurveItem" /> to be added to the list.</param>
        </member>
        <member name="M:ZedGraph.Selection.AddToSelection(ZedGraph.MasterPane,ZedGraph.CurveList)">
            <summary>
            Add a list of <see cref="T:ZedGraph.CurveItem" />'s to the selection list.
            </summary>
            <param name="master">The <see cref="T:ZedGraph.MasterPane" /> that is the "owner"
            of the <see cref="T:ZedGraph.CurveItem" />'s.</param>
            <param name="ciList">The list of <see cref="T:ZedGraph.CurveItem" />'s to be added to the list.</param>
        </member>
        <member name="M:ZedGraph.Selection.RemoveFromSelection(ZedGraph.MasterPane,ZedGraph.CurveItem)">
            <summary>
            Remove the specified <see cref="T:ZedGraph.CurveItem" /> from the selection list.
            </summary>
            <param name="master">The <see cref="T:ZedGraph.MasterPane" /> that is the "owner"
            of the <see cref="T:ZedGraph.CurveItem" />'s.</param>
            <param name="ci">The <see cref="T:ZedGraph.CurveItem" /> to be removed from the list.</param>
        </member>
        <member name="M:ZedGraph.Selection.ClearSelection(ZedGraph.MasterPane)">
            <summary>
            Clear the selection list and trigger a <see cref="E:ZedGraph.Selection.SelectionChangedEvent" />.
            </summary>
            <param name="master">The <see cref="T:ZedGraph.MasterPane" /> that "owns" the selection list.</param>
        </member>
        <member name="M:ZedGraph.Selection.ClearSelection(ZedGraph.MasterPane,System.Boolean)">
            <summary>
            Clear the selection list and optionally trigger a <see cref="E:ZedGraph.Selection.SelectionChangedEvent" />.
            </summary>
            <param name="master">The <see cref="T:ZedGraph.MasterPane" /> that "owns" the selection list.</param>
            <param name="sendEvent">true to trigger a <see cref="E:ZedGraph.Selection.SelectionChangedEvent" />,
            false otherwise.</param>
        </member>
        <member name="M:ZedGraph.Selection.UpdateSelection(ZedGraph.MasterPane)">
            <summary>
            Mark the <see cref="T:ZedGraph.CurveItem" />'s that are included in the selection list
            by setting the <see cref="P:ZedGraph.CurveItem.IsSelected" /> property to true.
            </summary>
            <param name="master">The <see cref="T:ZedGraph.MasterPane" /> that "owns" the selection list.</param>
        </member>
        <member name="T:ZedGraph.StickItem">
            <summary>
            Encapsulates a curve type that is displayed as a series of vertical "sticks",
            one at each defined point.
            </summary>
            <remarks>
            The sticks run from the zero value of the Y axis, to the Y point defined in each
            <see cref="T:ZedGraph.PointPair"/> of the <see cref="T:ZedGraph.IPointList" /> (see <see cref="P:ZedGraph.CurveItem.Points"/>).
            The properties of the sticks are defined in the <see cref="T:ZedGraph.Line"/> property.
            Normally, the <see cref="T:ZedGraph.Symbol"/> is not visible.  However, if you manually enable the
            <see cref="T:ZedGraph.Symbol"/> using the <see cref="P:ZedGraph.Symbol.IsVisible"/> property, the
            symbols will be drawn at the "Z" value from each <see cref="T:ZedGraph.PointPair" /> (see
            <see cref="F:ZedGraph.PointPair.Z" />).
            </remarks>
            
            <author> John Champion </author>
            <version> $Revision: 1.7 $ $Date: 2007-01-25 07:56:09 $ </version>
        </member>
        <member name="M:ZedGraph.StickItem.IsZIncluded(ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <param name="pane">The parent <see cref="T:ZedGraph.GraphPane" /> of this <see cref="T:ZedGraph.CurveItem" />.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:ZedGraph.StickItem.IsXIndependent(ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:ZedGraph.CurveItem" />
            </summary>
            <param name="pane">The parent <see cref="T:ZedGraph.GraphPane" /> of this <see cref="T:ZedGraph.CurveItem" />.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:ZedGraph.StickItem.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:ZedGraph.StickItem"/>, specifying only the legend <see cref="P:ZedGraph.CurveItem.Label" />.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
        </member>
        <member name="M:ZedGraph.StickItem.#ctor(System.String,System.Double[],System.Double[],System.Drawing.Color,System.Single)">
            <summary>
            Create a new <see cref="T:ZedGraph.StickItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="x">An array of double precision values that define
            the independent (X axis) values for this curve</param>
            <param name="y">An array of double precision values that define
            the dependent (Y axis) values for this curve</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> value that will be applied to
            the <see cref="T:ZedGraph.Line"/> and <see cref="T:ZedGraph.Symbol"/> properties.
            </param>
            <param name="lineWidth">The width (in points) to be used for the <see cref="T:ZedGraph.Line"/>.  This
            width is scaled based on <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/>.  Use a value of zero to
            hide the line (see <see cref="P:ZedGraph.LineBase.IsVisible"/>).</param>
        </member>
        <member name="M:ZedGraph.StickItem.#ctor(System.String,System.Double[],System.Double[],System.Drawing.Color)">
            <summary>
            Create a new <see cref="T:ZedGraph.StickItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="x">An array of double precision values that define
            the independent (X axis) values for this curve</param>
            <param name="y">An array of double precision values that define
            the dependent (Y axis) values for this curve</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> value that will be applied to
            the <see cref="T:ZedGraph.Line"/> and <see cref="T:ZedGraph.Symbol"/> properties.
            </param>
        </member>
        <member name="M:ZedGraph.StickItem.#ctor(System.String,ZedGraph.IPointList,System.Drawing.Color)">
            <summary>
            Create a new <see cref="T:ZedGraph.StickItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="points">A <see cref="T:ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> value that will be applied to
            the <see cref="T:ZedGraph.Line"/> and <see cref="T:ZedGraph.Symbol"/> properties.
            </param>
        </member>
        <member name="M:ZedGraph.StickItem.#ctor(System.String,ZedGraph.IPointList,System.Drawing.Color,System.Single)">
            <summary>
            Create a new <see cref="T:ZedGraph.StickItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="points">A <see cref="T:ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> value that will be applied to
            the <see cref="T:ZedGraph.Line"/> and <see cref="T:ZedGraph.Symbol"/> properties.
            </param>
            <param name="lineWidth">The width (in points) to be used for the <see cref="T:ZedGraph.Line"/>.  This
            width is scaled based on <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/>.  Use a value of zero to
            hide the line (see <see cref="P:ZedGraph.LineBase.IsVisible"/>).</param>
        </member>
        <member name="M:ZedGraph.StickItem.#ctor(ZedGraph.StickItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.StickItem"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.StickItem.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.StickItem.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.StickItem.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="F:ZedGraph.StickItem.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.StickItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.StickItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="T:ZedGraph.StockPointList">
            <summary>
            A collection class containing a list of <see cref="T:ZedGraph.StockPt"/> objects
            that define the set of points to be displayed on the curve.
            </summary>
            
            <author> John Champion based on code by Jerry Vos</author>
            <version> $Revision: 3.4 $ $Date: 2007-02-18 05:51:54 $ </version>
        </member>
        <member name="P:ZedGraph.StockPointList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:ZedGraph.StockPt"/> object by
            its ordinal position in the list.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:ZedGraph.StockPt"/> object to be accessed.</param>
            <value>A <see cref="T:ZedGraph.StockPt"/> object reference.</value>
        </member>
        <member name="M:ZedGraph.StockPointList.#ctor">
            <summary>
            Default constructor for the collection class
            </summary>
        </member>
        <member name="M:ZedGraph.StockPointList.#ctor(ZedGraph.StockPointList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The StockPointList from which to copy</param>
        </member>
        <member name="M:ZedGraph.StockPointList.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.StockPointList.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.StockPointList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:ZedGraph.StockPointList.Add(ZedGraph.StockPt)">
            <summary>
            Add a <see cref="T:ZedGraph.StockPt"/> object to the collection at the end of the list.
            </summary>
            <param name="point">The <see cref="T:ZedGraph.StockPt"/> object to
            be added</param>
        </member>
        <member name="M:ZedGraph.StockPointList.Add(ZedGraph.PointPair)">
            <summary>
            Add a <see cref="T:ZedGraph.PointPair"/> object to the collection at the end of the list.
            </summary>
            <param name="point">The <see cref="T:ZedGraph.PointPair"/> object to be added</param>
        </member>
        <member name="M:ZedGraph.StockPointList.Add(System.Double,System.Double)">
            <summary>
            Add a <see cref="T:ZedGraph.StockPt"/> object to the collection at the end of the list using
            the specified values.  The unspecified values (low, open, close) are all set to
            <see cref="F:ZedGraph.PointPairBase.Missing" />.
            </summary>
            <param name="date">An <see cref="T:ZedGraph.XDate" /> value</param>
            <param name="high">The high value for the day</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:ZedGraph.StockPointList.Add(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add a single point to the <see cref="T:ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="date">An <see cref="T:ZedGraph.XDate" /> value</param>
            <param name="high">The high value for the day</param>
            <param name="low">The low value for the day</param>
            <param name="open">The opening value for the day</param>
            <param name="close">The closing value for the day</param>
            <param name="vol">The trading volume for the day</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:ZedGraph.StockPointList.GetAt(System.Int32)">
            <summary>
            Access the <see cref="T:ZedGraph.StockPt" /> at the specified ordinal index.
            </summary>
            <remarks>
            To be compatible with the <see cref="T:ZedGraph.IPointList" /> interface, the
            <see cref="T:ZedGraph.StockPointList" /> must implement an index that returns a
            <see cref="T:ZedGraph.PointPair" /> rather than a <see cref="T:ZedGraph.StockPt" />.  This method
            will return the actual <see cref="T:ZedGraph.StockPt" /> at the specified position.
            </remarks>
            <param name="index">The ordinal position (zero-based) in the list</param>
            <returns>The specified <see cref="T:ZedGraph.StockPt" />.
            </returns>
        </member>
        <member name="T:ZedGraph.StockPt">
            <summary>
            The basic <see cref="T:ZedGraph.PointPair" /> class holds three data values (X, Y, Z).  This
            class extends the basic PointPair to contain five data values (X, Y, Z, Open, Close).
            </summary>
            <remarks>
            The values are remapped to <see cref="P:ZedGraph.StockPt.Date" />, <see cref="P:ZedGraph.StockPt.High" />,
            <see cref="P:ZedGraph.StockPt.Low" />, <see cref="F:ZedGraph.StockPt.Open" />, and <see cref="F:ZedGraph.StockPt.Close" />.
            </remarks>
            
            <author> John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2007-02-07 07:46:46 $ </version>
        </member>
        <member name="F:ZedGraph.StockPt.Open">
            <summary>
            This opening value
            </summary>
        </member>
        <member name="F:ZedGraph.StockPt.Close">
            <summary>
            This closing value
            </summary>
        </member>
        <member name="F:ZedGraph.StockPt.Vol">
            <summary>
            This daily trading volume
            </summary>
        </member>
        <member name="F:ZedGraph.StockPt._colorValue">
            <summary>
            This is a user value that can be anything.  It is used to provide special 
            property-based coloration to the graph elements.
            </summary>
        </member>
        <member name="M:ZedGraph.StockPt.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ZedGraph.StockPt.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new StockPt from the specified data values
            </summary>
            <param name="date">The trading date (<see cref="T:ZedGraph.XDate" />)</param>
            <param name="open">The opening stock price</param>
            <param name="close">The closing stock price</param>
            <param name="high">The daily high stock price</param>
            <param name="low">The daily low stock price</param>
            <param name="vol">The daily trading volume</param>
        </member>
        <member name="M:ZedGraph.StockPt.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Construct a new StockPt from the specified data values including a Tag property
            </summary>
            <param name="date">The trading date (<see cref="T:ZedGraph.XDate" />)</param>
            <param name="open">The opening stock price</param>
            <param name="close">The closing stock price</param>
            <param name="high">The daily high stock price</param>
            <param name="low">The daily low stock price</param>
            <param name="vol">The daily trading volume</param>
            <param name="tag">The user-defined <see cref="F:ZedGraph.PointPair.Tag" /> property.</param>
        </member>
        <member name="M:ZedGraph.StockPt.#ctor(ZedGraph.StockPt)">
            <summary>
            The StockPt copy constructor.
            </summary>
            <param name="rhs">The basis for the copy.</param>
        </member>
        <member name="M:ZedGraph.StockPt.#ctor(ZedGraph.PointPair)">
            <summary>
            The StockPt copy constructor.
            </summary>
            <param name="rhs">The basis for the copy.</param>
        </member>
        <member name="F:ZedGraph.StockPt.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.StockPt.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.StockPt.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:ZedGraph.StockPt.Date">
            <summary>
            Map the Date property to the X value
            </summary>
        </member>
        <member name="P:ZedGraph.StockPt.High">
            <summary>
            Map the high property to the Y value
            </summary>
        </member>
        <member name="P:ZedGraph.StockPt.Low">
            <summary>
            Map the low property to the Z value
            </summary>
        </member>
        <member name="P:ZedGraph.StockPt.ColorValue">
            <summary>
            The ColorValue property.  This is used with the
            <see cref="F:ZedGraph.FillType.GradientByColorValue" /> option.
            </summary>
        </member>
        <member name="P:ZedGraph.StockPt.IsInvalid5D">
            <summary>
            Readonly value that determines if either the Date, Close, Open, High, or Low
            coordinate in this StockPt is an invalid (not plotable) value.
            It is considered invalid if it is missing (equal to System.Double.Max),
            Infinity, or NaN.
            </summary>
            <returns>true if any value is invalid</returns>
        </member>
        <member name="M:ZedGraph.StockPt.ToString(System.Boolean)">
            <summary>
            Format this StockPt value using the default format.  Example:  "( 12.345, -16.876 )".
            The two double values are formatted with the "g" format type.
            </summary>
            <param name="isShowAll">true to show all the value coordinates</param>
            <returns>A string representation of the <see cref="T:ZedGraph.StockPt" />.</returns>
        </member>
        <member name="M:ZedGraph.StockPt.ToString(System.String,System.Boolean)">
            <summary>
            Format this PointPair value using a general format string.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            If <see paramref="isShowAll"/>
            is true, then the third all coordinates are shown.
            </summary>
            <param name="format">A format string that will be used to format each of
            the two double type values (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
            <param name="isShowAll">true to show all the value coordinates</param>
        </member>
        <member name="T:ZedGraph.Symbol">
            <summary>
            This class handles the drawing of the curve <see cref="T:ZedGraph.Symbol"/> objects.
            The symbols are the small shapes that appear over each defined point
            along the curve.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.37 $ $Date: 2007-09-19 06:41:56 $ </version>
        </member>
        <member name="F:ZedGraph.Symbol._size">
            <summary>
            Private field that stores the size of this
            <see cref="T:ZedGraph.Symbol"/> in points (1/72 inch).  Use the public
            property <see cref="P:ZedGraph.Symbol.Size"/> to access this value.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol._type">
            <summary>
            Private field that stores the <see cref="T:ZedGraph.SymbolType"/> for this
            <see cref="T:ZedGraph.Symbol"/>.  Use the public
            property <see cref="P:ZedGraph.Symbol.Type"/> to access this value.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol._isAntiAlias">
            <summary>
            private field that determines if the symbols are drawn using
            Anti-Aliasing capabilities from the <see cref="T:System.Drawing.Graphics" /> class.
            Use the public property <see cref="P:ZedGraph.Symbol.IsAntiAlias" /> to access
            this value.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol._isVisible">
            <summary>
            Private field that stores the visibility of this
            <see cref="T:ZedGraph.Symbol"/>.  Use the public
            property <see cref="P:ZedGraph.Symbol.IsVisible"/> to access this value.  If this value is
            false, the symbols will not be shown (but the <see cref="T:ZedGraph.Line"/> may
            still be shown).
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol._fill">
            <summary>
            Private field that stores the <see cref="T:ZedGraph.Fill"/> data for this
            <see cref="T:ZedGraph.Symbol"/>.  Use the public property <see cref="P:ZedGraph.Symbol.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol._border">
            <summary>
            Private field that stores the <see cref="T:ZedGraph.Border"/> data for this
            <see cref="T:ZedGraph.Symbol"/>.  Use the public property <see cref="P:ZedGraph.Symbol.Border"/> to
            access this value.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol._userSymbol">
            <summary>
            Private field that stores the user defined <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> data for this
            <see cref="T:ZedGraph.Symbol"/>.  Use the public property <see cref="P:ZedGraph.Symbol.UserSymbol"/> to
            access this value.
            </summary>
        </member>
        <member name="T:ZedGraph.Symbol.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:ZedGraph.Symbol"/> class.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.Size">
            <summary>
            The default size for curve symbols (<see cref="P:ZedGraph.Symbol.Size"/> property),
            in units of points.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.PenWidth">
            <summary>
            The default pen width to be used for drawing curve symbols
            (<see cref="P:ZedGraph.LineBase.Width"/> property).  Units are points.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.FillColor">
            <summary>
            The default color for filling in this <see cref="T:ZedGraph.Symbol"/>
            (<see cref="P:ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.FillBrush">
            <summary>
            The default custom brush for filling in this <see cref="T:ZedGraph.Symbol"/>
            (<see cref="P:ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.FillType">
            <summary>
            The default fill mode for the curve (<see cref="P:ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.Type">
            <summary>
            The default symbol type for curves (<see cref="P:ZedGraph.Symbol.Type"/> property).
            This is defined as a <see cref="T:ZedGraph.SymbolType"/> enumeration.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.IsAntiAlias">
            <summary>
            The default value for the <see cref="P:ZedGraph.Symbol.IsAntiAlias"/>
            property.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.IsVisible">
            <summary>
            The default display mode for symbols (<see cref="P:ZedGraph.Symbol.IsVisible"/> property).
            true to display symbols, false to hide them.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.IsBorderVisible">
            <summary>
            The default for drawing frames around symbols (<see cref="P:ZedGraph.LineBase.IsVisible"/> property).
            true to display symbol frames, false to hide them.
            </summary>
        </member>
        <member name="F:ZedGraph.Symbol.Default.BorderColor">
            <summary>
            The default color for drawing symbols (<see cref="P:ZedGraph.LineBase.Color"/> property).
            </summary>
        </member>
        <member name="P:ZedGraph.Symbol.Size">
            <summary>
            Gets or sets the size of the <see cref="T:ZedGraph.Symbol"/>
            </summary>
            <value>Size in points (1/72 inch)</value>
            <seealso cref="F:ZedGraph.Symbol.Default.Size"/>
        </member>
        <member name="P:ZedGraph.Symbol.Type">
            <summary>
            Gets or sets the type (shape) of the <see cref="T:ZedGraph.Symbol"/>
            </summary>
            <value>A <see cref="T:ZedGraph.SymbolType"/> enum value indicating the shape</value>
            <seealso cref="F:ZedGraph.Symbol.Default.Type"/>
        </member>
        <member name="P:ZedGraph.Symbol.IsAntiAlias">
            <summary>
            Gets or sets a value that determines if the symbols are drawn using
            Anti-Aliasing capabilities from the <see cref="T:System.Drawing.Graphics" /> class.
            </summary>
            <remarks>
            If this value is set to true, then the <see cref="P:System.Drawing.Graphics.SmoothingMode" />
            property will be set to <see cref="F:System.Drawing.Drawing2D.SmoothingMode.HighQuality" /> only while
            this <see cref="T:ZedGraph.Symbol" /> is drawn.  A value of false will leave the value of
            <see cref="P:System.Drawing.Graphics.SmoothingMode" /> unchanged.
            </remarks>
        </member>
        <member name="P:ZedGraph.Symbol.IsVisible">
            <summary>
            Gets or sets a property that shows or hides the <see cref="T:ZedGraph.Symbol"/>.
            </summary>
            <value>true to show the symbol, false to hide it</value>
            <seealso cref="F:ZedGraph.Symbol.Default.IsVisible"/>
        </member>
        <member name="P:ZedGraph.Symbol.Fill">
            <summary>
            Gets or sets the <see cref="T:ZedGraph.Fill"/> data for this
            <see cref="T:ZedGraph.Symbol"/>.
            </summary>
        </member>
        <member name="P:ZedGraph.Symbol.Border">
            <summary>
            Gets or sets the <see cref="T:ZedGraph.Border"/> data for this
            <see cref="T:ZedGraph.Symbol"/>, which controls the border outline of the symbol.
            </summary>
        </member>
        <member name="P:ZedGraph.Symbol.UserSymbol">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> data for this
            <see cref="T:ZedGraph.Symbol"/>, describing the user-defined symbol type.
            </summary>
            <remarks>
            This value only applies if <see cref="P:ZedGraph.Symbol.Type">Symbol.Type</see>
            is <see cref="F:ZedGraph.SymbolType.UserDefined">SymbolType.UserDefined</see>
            </remarks>
        </member>
        <member name="M:ZedGraph.Symbol.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:ZedGraph.Symbol"/> properties to default
            values as defined in the <see cref="T:ZedGraph.Symbol.Default"/> class.
            </summary>
        </member>
        <member name="M:ZedGraph.Symbol.#ctor(ZedGraph.SymbolType,System.Drawing.Color)">
            <summary>
            Default constructor that sets the <see cref="T:ZedGraph.SymbolType"/> and
            <see cref="T:System.Drawing.Color"/> as specified, and the remaining
            <see cref="T:ZedGraph.Symbol"/> properties to default
            values as defined in the <see cref="T:ZedGraph.Symbol.Default"/> class.
            </summary>
            <param name="type">A <see cref="T:ZedGraph.SymbolType"/> enum value
            indicating the shape of the symbol</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> value indicating
            the color of the symbol
            </param>
        </member>
        <member name="M:ZedGraph.Symbol.#ctor(ZedGraph.Symbol)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The Symbol object from which to copy</param>
        </member>
        <member name="M:ZedGraph.Symbol.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.Symbol.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.Symbol.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="F:ZedGraph.Symbol.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.Symbol.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.Symbol.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:ZedGraph.Symbol.DrawSymbol(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Draw the <see cref="T:ZedGraph.Symbol"/> to the specified <see cref="T:System.Drawing.Graphics"/> device
            at the specified location.  This routine draws a single symbol.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="x">The x position of the center of the symbol in
            pixel units</param>
            <param name="y">The y position of the center of the symbol in
            pixel units</param>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> previously constructed by
            <see cref="M:ZedGraph.Symbol.MakePath(System.Drawing.Graphics,System.Single)"/> for this symbol</param>
            <param name="pen">A <see cref="T:System.Drawing.Pen"/> class representing the standard pen for this symbol</param>
            <param name="brush">A <see cref="T:System.Drawing.Brush"/> class representing a default solid brush for this symbol
            If this symbol uses a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>, it will be created on the fly for
            each point, since it has to be scaled to the individual point coordinates.</param>
        </member>
        <member name="M:ZedGraph.Symbol.DrawSymbol(System.Drawing.Graphics,ZedGraph.GraphPane,System.Int32,System.Int32,System.Single,System.Boolean,ZedGraph.PointPair)">
            <summary>
            Draw the <see cref="T:ZedGraph.Symbol"/> to the specified <see cref="T:System.Drawing.Graphics"/> device
            at the specified location.  This routine draws a single symbol.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="x">The x position of the center of the symbol in
            pixel units</param>
            <param name="y">The y position of the center of the symbol in
            pixel units</param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>
            <param name="dataValue">The data value to be used for a value-based
            color gradient.  This is only applicable for <see cref="F:ZedGraph.FillType.GradientByX"/>,
            <see cref="F:ZedGraph.FillType.GradientByY"/> or <see cref="F:ZedGraph.FillType.GradientByZ"/>.</param>
            <param name="isSelected">Indicates that the <see cref="T:ZedGraph.Symbol" /> should be drawn
            with attributes from the <see cref="T:ZedGraph.Selection" /> class.
            </param>
        </member>
        <member name="M:ZedGraph.Symbol.MakePath(System.Drawing.Graphics,System.Single)">
            <summary>
            Create a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> struct for the current symbol based on the
            specified scaleFactor and assuming the symbol will be centered at position 0,0.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.</param>
            <returns>Returns the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for the current symbol</returns>
        </member>
        <member name="M:ZedGraph.Symbol.Draw(System.Drawing.Graphics,ZedGraph.GraphPane,ZedGraph.LineItem,System.Single,System.Boolean)">
            <summary>
            Draw this <see cref="T:ZedGraph.CurveItem"/> to the specified <see cref="T:System.Drawing.Graphics"/>
            device as a symbol at each defined point.  The routine
            only draws the symbols; the lines are draw by the
            <see cref="M:ZedGraph.Line.DrawCurve(System.Drawing.Graphics,ZedGraph.GraphPane,ZedGraph.CurveItem,System.Single)"/> method.  This method
            is normally only called by the Draw method of the
            <see cref="T:ZedGraph.CurveItem"/> object
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:ZedGraph.LineItem"/> representing this
            curve.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="isSelected">Indicates that the <see cref="T:ZedGraph.Symbol" /> should be drawn
            with attributes from the <see cref="T:ZedGraph.Selection" /> class.
            </param>
        </member>
        <member name="T:ZedGraph.TextObj">
            <summary>
            A class that represents a text object on the graph.  A list of
            <see cref="T:ZedGraph.GraphObj"/> objects is maintained by the
            <see cref="T:ZedGraph.GraphObjList"/> collection class.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2007-01-25 07:56:09 $ </version>
        </member>
        <member name="F:ZedGraph.TextObj._text">
            <summary> Private field to store the actual text string for this
            <see cref="T:ZedGraph.TextObj"/>.  Use the public property <see cref="P:ZedGraph.TextObj.Text"/>
            to access this value.
            </summary>
        </member>
        <member name="F:ZedGraph.TextObj._fontSpec">
            <summary>
            Private field to store the <see cref="P:ZedGraph.TextObj.FontSpec"/> class used to render
            this <see cref="T:ZedGraph.TextObj"/>.  Use the public property <see cref="P:ZedGraph.TextObj.FontSpec"/>
            to access this class.
            </summary>
        </member>
        <member name="F:ZedGraph.TextObj._layoutArea">
            <summary>
            Private field holding the SizeF into which this <see cref="T:ZedGraph.TextObj"/>
            should be rendered. Use the public property <see cref="P:ZedGraph.TextObj.LayoutArea"/>
            to access this value.
            </summary>
        </member>
        <member name="T:ZedGraph.TextObj.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:ZedGraph.TextObj"/> class.
            </summary>
        </member>
        <member name="F:ZedGraph.TextObj.Default.FontFamily">
            <summary>
            The default font family for the <see cref="T:ZedGraph.TextObj"/> text
            (<see cref="P:ZedGraph.FontSpec.Family"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.TextObj.Default.FontSize">
            <summary>
            The default font size for the <see cref="T:ZedGraph.TextObj"/> text
            (<see cref="P:ZedGraph.FontSpec.Size"/> property).  Units are
            in points (1/72 inch).
            </summary>
        </member>
        <member name="F:ZedGraph.TextObj.Default.FontColor">
            <summary>
            The default font color for the <see cref="T:ZedGraph.TextObj"/> text
            (<see cref="P:ZedGraph.FontSpec.FontColor"/> property).
            </summary>
        </member>
        <member name="F:ZedGraph.TextObj.Default.FontBold">
            <summary>
            The default font bold mode for the <see cref="T:ZedGraph.TextObj"/> text
            (<see cref="P:ZedGraph.FontSpec.IsBold"/> property). true
            for a bold typeface, false otherwise.
            </summary>
        </member>
        <member name="F:ZedGraph.TextObj.Default.FontUnderline">
            <summary>
            The default font underline mode for the <see cref="T:ZedGraph.TextObj"/> text
            (<see cref="P:ZedGraph.FontSpec.IsUnderline"/> property). true
            for an underlined typeface, false otherwise.
            </summary>
        </member>
        <member name="F:ZedGraph.TextObj.Default.FontItalic">
            <summary>
            The default font italic mode for the <see cref="T:ZedGraph.TextObj"/> text
            (<see cref="P:ZedGraph.FontSpec.IsItalic"/> property). true
            for an italic typeface, false otherwise.
            </summary>
        </member>
        <member name="P:ZedGraph.TextObj.LayoutArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZedGraph.TextObj.Text">
            <summary>
            The <see cref="T:ZedGraph.TextObj"/> to be displayed.  This text can be multi-line by
            including newline ('\n') characters between the lines.
            </summary>
        </member>
        <member name="P:ZedGraph.TextObj.FontSpec">
            <summary>
            Gets a reference to the <see cref="P:ZedGraph.TextObj.FontSpec"/> class used to render
            this <see cref="T:ZedGraph.TextObj"/>
            </summary>
            <seealso cref="F:ZedGraph.TextObj.Default.FontColor"/>
            <seealso cref="F:ZedGraph.TextObj.Default.FontBold"/>
            <seealso cref="F:ZedGraph.TextObj.Default.FontItalic"/>
            <seealso cref="F:ZedGraph.TextObj.Default.FontUnderline"/>
            <seealso cref="F:ZedGraph.TextObj.Default.FontFamily"/>
            <seealso cref="F:ZedGraph.TextObj.Default.FontSize"/>
        </member>
        <member name="M:ZedGraph.TextObj.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Constructor that sets all <see cref="T:ZedGraph.TextObj"/> properties to default
            values as defined in the <see cref="T:ZedGraph.TextObj.Default"/> class.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="x">The x position of the text.  The units
            of this position are specified by the
            <see cref="P:ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the <see cref="T:ZedGraph.AlignH"/>
            property.</param>
            <param name="y">The y position of the text.  The units
            of this position are specified by the
            <see cref="P:ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the
            <see cref="T:ZedGraph.AlignV"/> property.</param>
        </member>
        <member name="M:ZedGraph.TextObj.#ctor(System.String,System.Double,System.Double,ZedGraph.CoordType)">
            <summary>
            Constructor that sets all <see cref="T:ZedGraph.TextObj"/> properties to default
            values as defined in the <see cref="T:ZedGraph.TextObj.Default"/> class.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="x">The x position of the text.  The units
            of this position are specified by the
            <see cref="P:ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the <see cref="T:ZedGraph.AlignH"/>
            property.</param>
            <param name="y">The y position of the text.  The units
            of this position are specified by the
            <see cref="P:ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the
            <see cref="T:ZedGraph.AlignV"/> property.</param>
            <param name="coordType">The <see cref="T:ZedGraph.CoordType"/> enum value that
            indicates what type of coordinate system the x and y parameters are
            referenced to.</param>
        </member>
        <member name="M:ZedGraph.TextObj.#ctor(System.String,System.Double,System.Double,ZedGraph.CoordType,ZedGraph.AlignH,ZedGraph.AlignV)">
            <summary>
            Constructor that sets all <see cref="T:ZedGraph.TextObj"/> properties to default
            values as defined in the <see cref="T:ZedGraph.TextObj.Default"/> class.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="x">The x position of the text.  The units
            of this position are specified by the
            <see cref="P:ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the <see cref="T:ZedGraph.AlignH"/>
            property.</param>
            <param name="y">The y position of the text.  The units
            of this position are specified by the
            <see cref="P:ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the
            <see cref="T:ZedGraph.AlignV"/> property.</param>
            <param name="coordType">The <see cref="T:ZedGraph.CoordType"/> enum value that
            indicates what type of coordinate system the x and y parameters are
            referenced to.</param>
            <param name="alignH">The <see cref="T:ZedGraph.AlignH"/> enum that specifies
            the horizontal alignment of the object with respect to the (x,y) location</param>
            <param name="alignV">The <see cref="T:ZedGraph.AlignV"/> enum that specifies
            the vertical alignment of the object with respect to the (x,y) location</param>
        </member>
        <member name="M:ZedGraph.TextObj.#ctor">
            <summary>
            Parameterless constructor that initializes a new <see cref="T:ZedGraph.TextObj"/>.
            </summary>
        </member>
        <member name="M:ZedGraph.TextObj.#ctor(ZedGraph.TextObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.TextObj"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.TextObj.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.TextObj.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.TextObj.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="F:ZedGraph.TextObj.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.TextObj.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.TextObj.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:ZedGraph.TextObj.Draw(System.Drawing.Graphics,ZedGraph.PaneBase,System.Single)">
            <summary>
            Render this <see cref="T:ZedGraph.TextObj"/> object to the specified <see cref="T:System.Drawing.Graphics"/> device
            This method is normally only called by the Draw method
            of the parent <see cref="T:ZedGraph.GraphObjList"/> collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:ZedGraph.TextObj.PointInBox(System.Drawing.PointF,ZedGraph.PaneBase,System.Drawing.Graphics,System.Single)">
            <summary>
            Determine if the specified screen point lies inside the bounding box of this
            <see cref="T:ZedGraph.TextObj"/>.  This method takes into account rotation and alignment
            parameters of the text, as specified in the <see cref="P:ZedGraph.TextObj.FontSpec"/>.
            </summary>
            <param name="pt">The screen point, in pixels</param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies in the bounding box, false otherwise</returns>
        </member>
        <member name="M:ZedGraph.TextObj.GetCoords(ZedGraph.PaneBase,System.Drawing.Graphics,System.Single,System.String@,System.String@)">
            <summary>
            Determines the shape type and Coords values for this GraphObj
            </summary>
        </member>
        <member name="T:ZedGraph.TextScale">
            <summary>
            The TextScale class inherits from the <see cref="T:ZedGraph.Scale" /> class, and implements
            the features specific to <see cref="F:ZedGraph.AxisType.Text" />.
            </summary>
            <remarks>
            TextScale is an ordinal axis with user-defined text labels.  An ordinal axis means that
            all data points are evenly spaced at integral values, and the actual coordinate values
            for points corresponding to that axis are ignored.  That is, if the X axis is an
            ordinal type, then all X values associated with the curves are ignored.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.8 $ $Date: 2006-08-25 05:19:09 $ </version>
        </member>
        <member name="M:ZedGraph.TextScale.#ctor(ZedGraph.Scale,ZedGraph.Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.TextScale" /> object from which to copy</param>
            <param name="owner">The <see cref="T:ZedGraph.Axis" /> object that will own the
            new instance of <see cref="T:ZedGraph.TextScale" /></param>
        </member>
        <member name="M:ZedGraph.TextScale.Clone(ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:ZedGraph.Axis" /> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:ZedGraph.Scale" /> clone.</returns>
        </member>
        <member name="M:ZedGraph.TextScale.CalcMinorStart(System.Double)">
            <summary>
            Internal routine to determine the ordinals of the first minor tic mark
            </summary>
            <param name="baseVal">
            The value of the first major tic for the axis.
            </param>
            <returns>
            The ordinal position of the first minor tic, relative to the first major tic.
            This value can be negative (e.g., -3 means the first minor tic is 3 minor step
            increments before the first major tic.
            </returns>
        </member>
        <member name="M:ZedGraph.TextScale.CalcBaseTic">
            <summary>
            Determine the value for the first major tic.
            </summary>
            <remarks>
            This is done by finding the first possible value that is an integral multiple of
            the step size, taking into account the date/time units if appropriate.
            This method properly accounts for <see cref="P:ZedGraph.Scale.IsLog"/>, <see cref="P:ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <returns>
            First major tic value (floating point double).
            </returns>
        </member>
        <member name="M:ZedGraph.TextScale.CalcNumTics">
            <summary>
            Internal routine to determine the ordinals of the first and last major axis label.
            </summary>
            <returns>
            This is the total number of major tics for this axis.
            </returns>
        </member>
        <member name="M:ZedGraph.TextScale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)">
            <summary>
            Select a reasonable text axis scale given a range of data values.
            </summary>
            <remarks>
            This method only applies to <see cref="F:ZedGraph.AxisType.Text"/> type axes, and it
            is called by the general <see cref="M:ZedGraph.TextScale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)"/> method.  This is an ordinal
            type, such that the labeled values start at 1.0 and increment by 1.0 for
            each successive label.  The maximum number of labels on the graph is
            determined by <see cref="F:ZedGraph.Scale.Default.MaxTextLabels"/>.  If necessary, this method will
            set the <see cref="P:ZedGraph.Scale.MajorStep"/> value to greater than 1.0 in order to keep the total
            labels displayed below <see cref="F:ZedGraph.Scale.Default.MaxTextLabels"/>.  For example, a
            <see cref="P:ZedGraph.Scale.MajorStep"/> size of 2.0 would only display every other label on the
            axis.  The <see cref="P:ZedGraph.Scale.MajorStep"/> value calculated by this routine is always
            an integral value.  This
            method honors the <see cref="P:ZedGraph.Scale.MinAuto"/>, <see cref="P:ZedGraph.Scale.MaxAuto"/>,
            and <see cref="P:ZedGraph.Scale.MajorStepAuto"/> autorange settings.
            In the event that any of the autorange settings are false, the
            corresponding <see cref="P:ZedGraph.Scale.Min"/>, <see cref="P:ZedGraph.Scale.Max"/>, or <see cref="P:ZedGraph.Scale.MajorStep"/>
            setting is explicitly honored, and the remaining autorange settings (if any) will
            be calculated to accomodate the non-autoranged values.
            <para>On Exit:</para>
            <para><see cref="P:ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:ZedGraph.Scale.MinorStep"/> is set to scale minor step size (if <see cref="P:ZedGraph.Scale.MinorStepAuto"/> = true)</para>
            <para><see cref="P:ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:ZedGraph.GraphPane"/> object
            associated with this <see cref="T:ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <seealso cref="M:ZedGraph.TextScale.PickScale(ZedGraph.GraphPane,System.Drawing.Graphics,System.Single)"/>
            <seealso cref="F:ZedGraph.AxisType.Text"/>
        </member>
        <member name="M:ZedGraph.TextScale.MakeLabel(ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for an <see cref="F:ZedGraph.AxisType.Text" /> <see cref="T:ZedGraph.Axis" />.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log (<see cref="P:ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String" /></returns>
        </member>
        <member name="F:ZedGraph.TextScale.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.TextScale.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.TextScale.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="T:ZedGraph.AxisType">
            <summary>
            Enumeration type for the various axis types that are available
            </summary>
            <seealso cref="P:ZedGraph.Axis.Type"/>
        </member>
        <member name="F:ZedGraph.AxisType.Linear">
            <summary> An ordinary, cartesian axis </summary>
        </member>
        <member name="F:ZedGraph.AxisType.Log">
            <summary> A base 10 log axis </summary>
        </member>
        <member name="F:ZedGraph.AxisType.Date">
            <summary> A cartesian axis with calendar dates or times </summary>
        </member>
        <member name="F:ZedGraph.AxisType.Text">
            <summary> An ordinal axis with user-defined text labels.  An ordinal axis means that
            all data points are evenly spaced at integral values, and the actual coordinate values
            for points corresponding to that axis are ignored.  That is, if the X axis is an
            ordinal type, then all X values associated with the curves are ignored.</summary>
            <seealso cref="F:ZedGraph.AxisType.Ordinal"/>
            <seealso cref="P:ZedGraph.Scale.IsText"/>
            <seealso cref="F:ZedGraph.Scale.Default.MaxTextLabels"/>
        </member>
        <member name="F:ZedGraph.AxisType.Ordinal">
            <summary> An ordinal axis with regular numeric labels.  An ordinal axis means that
            all data points are evenly spaced at integral values, and the actual coordinate values
            for points corresponding to that axis are ignored.  That is, if the X axis is an
            ordinal type, then all X values associated with the curves are ignored. </summary>
            <seealso cref="F:ZedGraph.AxisType.Text"/>
            <seealso cref="P:ZedGraph.Scale.IsOrdinal"/>
        </member>
        <member name="F:ZedGraph.AxisType.DateAsOrdinal">
            <summary> An ordinal axis that will have labels formatted with ordinal values corresponding
            to the number of values in each <see cref="T:ZedGraph.CurveItem" />.
            </summary>
            <remarks>
            The <see cref="T:ZedGraph.CurveItem" /> data points will be evenly-spaced at ordinal locations, and the
            actual data values are ignored. </remarks>
            <seealso cref="F:ZedGraph.AxisType.Text"/>
            <seealso cref="P:ZedGraph.Scale.IsOrdinal"/>
        </member>
        <member name="F:ZedGraph.AxisType.LinearAsOrdinal">
            <summary> An ordinal axis that will have labels formatted with values from the actual data
            values of the first <see cref="T:ZedGraph.CurveItem" /> in the <see cref="T:ZedGraph.CurveList" />.
            </summary>
            <remarks>
            Although the tics are labeled with real data values, the actual points will be
            evenly-spaced in spite of the data values.  For example, if the X values of the first curve
            are 1, 5, and 100, then the tic labels will show 1, 5, and 100, but they will be equal
            distance from each other. </remarks>
            <seealso cref="F:ZedGraph.AxisType.Text"/>
            <seealso cref="P:ZedGraph.Scale.IsOrdinal"/>
        </member>
        <member name="F:ZedGraph.AxisType.Exponent">
            <summary> An exponential axis </summary>
        </member>
        <member name="T:ZedGraph.FillType">
            <summary>
            Enumeration type for the various types of fills that can be used with <see cref="T:ZedGraph.Bar"/>
            charts.
            </summary>
        </member>
        <member name="F:ZedGraph.FillType.None">
            <summary> No fill </summary>
        </member>
        <member name="F:ZedGraph.FillType.Solid">
            <summary> A solid fill using <see cref="T:System.Drawing.SolidBrush"/> </summary>
        </member>
        <member name="F:ZedGraph.FillType.Brush">
            <summary> A custom fill using either <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> or
            <see cref="T:System.Drawing.TextureBrush"/></summary>
        </member>
        <member name="F:ZedGraph.FillType.GradientByX">
            <summary>
            Fill with a single solid color based on the X value of the data.</summary>
            <remarks>The X value is
            used to determine the color value based on a gradient brush, and using a data range
            of <see cref="P:ZedGraph.Fill.RangeMin"/> and <see cref="P:ZedGraph.Fill.RangeMax"/>.  You can create a multicolor
            range by initializing the <see cref="T:ZedGraph.Fill"/> class with your own custom
            <see cref="F:ZedGraph.FillType.Brush"/> object based on a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/>.  In cases where a
            data value makes no sense (<see cref="P:ZedGraph.PaneBase.Fill"/>, <see cref="P:ZedGraph.Legend.Fill"/>,
            etc.), a default value of 50% of the range is assumed.  The default range is 0 to 1.
            </remarks>
            <seealso cref="P:ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:ZedGraph.Fill.RangeMax"/>
            <seealso cref="P:ZedGraph.Fill.RangeDefault"/>
        </member>
        <member name="F:ZedGraph.FillType.GradientByY">
            <summary>
            Fill with a single solid color based on the Z value of the data.</summary>
            <remarks>The Z value is
            used to determine the color value based on a gradient brush, and using a data range
            of <see cref="P:ZedGraph.Fill.RangeMin"/> and <see cref="P:ZedGraph.Fill.RangeMax"/>.  You can create a multicolor
            range by initializing the <see cref="T:ZedGraph.Fill"/> class with your own custom
            <see cref="F:ZedGraph.FillType.Brush"/> object based on a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/>.  In cases where a
            data value makes no sense (<see cref="P:ZedGraph.PaneBase.Fill"/>, <see cref="P:ZedGraph.Legend.Fill"/>,
            etc.), a default value of 50% of the range is assumed.  The default range is 0 to 1.
            </remarks>
            <seealso cref="P:ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:ZedGraph.Fill.RangeMax"/>
            <seealso cref="P:ZedGraph.Fill.RangeDefault"/>
        </member>
        <member name="F:ZedGraph.FillType.GradientByZ">
            <summary>
            Fill with a single solid color based on the Z value of the data.</summary>
            <remarks>The Z value is
            used to determine the color value based on a gradient brush, and using a data range
            of <see cref="P:ZedGraph.Fill.RangeMin"/> and <see cref="P:ZedGraph.Fill.RangeMax"/>.  You can create a multicolor
            range by initializing the <see cref="T:ZedGraph.Fill"/> class with your own custom
            <see cref="F:ZedGraph.FillType.Brush"/> object based on a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/>.  In cases where a
            data value makes no sense (<see cref="P:ZedGraph.PaneBase.Fill"/>, <see cref="P:ZedGraph.Legend.Fill"/>,
            etc.), a default value of 50% of the range is assumed.  The default range is 0 to 1.
            </remarks>
            <seealso cref="P:ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:ZedGraph.Fill.RangeMax"/>
            <seealso cref="P:ZedGraph.Fill.RangeDefault"/>
        </member>
        <member name="F:ZedGraph.FillType.GradientByColorValue">
            <summary>
            Fill with a single solid color based on the "ColorValue" property of the data.</summary>
            <remarks>The "ColorValue" property is
            used to determine the color value based on a gradient brush, and using a data range
            of <see cref="P:ZedGraph.Fill.RangeMin"/> and <see cref="P:ZedGraph.Fill.RangeMax"/>.  You can create a multicolor
            range by initializing the <see cref="T:ZedGraph.Fill"/> class with your own custom
            <see cref="F:ZedGraph.FillType.Brush"/> object based on a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/>.  In cases where a
            data value makes no sense (<see cref="P:ZedGraph.PaneBase.Fill"/>, <see cref="P:ZedGraph.Legend.Fill"/>,
            etc.), a default value of 50% of the range is assumed.  The default range is 0 to 1.
            </remarks>
            <seealso cref="P:ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:ZedGraph.Fill.RangeMax"/>
            <seealso cref="P:ZedGraph.Fill.RangeDefault"/>
        </member>
        <member name="T:ZedGraph.DateUnit">
            <summary>
            Enumeration type for the various axis date and time unit types that are available
            </summary>
        </member>
        <member name="F:ZedGraph.DateUnit.Year">
            <summary> Yearly units <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:ZedGraph.DateUnit.Month">
            <summary> Monthly units <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:ZedGraph.DateUnit.Day">
            <summary> Daily units <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:ZedGraph.DateUnit.Hour">
            <summary> Hourly units <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:ZedGraph.DateUnit.Minute">
            <summary> Minute units <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:ZedGraph.DateUnit.Second">
            <summary> Second units <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:ZedGraph.DateUnit.Millisecond">
            <summary> Millisecond units <see cref="P:ZedGraph.Scale.MajorUnit"/> and <see cref="P:ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="T:ZedGraph.SymbolType">
            <summary>
            Enumeration type for the various symbol shapes that are available
            </summary>
            <seealso cref="P:ZedGraph.Symbol.Fill"/>
        </member>
        <member name="F:ZedGraph.SymbolType.Square">
            <summary> Square-shaped <see cref="T:ZedGraph.Symbol"/> </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.Diamond">
            <summary> Rhombus-shaped <see cref="T:ZedGraph.Symbol"/> </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.Triangle">
            <summary> Equilateral triangle <see cref="T:ZedGraph.Symbol"/> </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.Circle">
            <summary> Uniform circle <see cref="T:ZedGraph.Symbol"/> </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.XCross">
            <summary> "X" shaped <see cref="T:ZedGraph.Symbol"/>.  This symbol cannot
            be filled since it has no outline. </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.Plus">
            <summary> "+" shaped <see cref="T:ZedGraph.Symbol"/>.  This symbol cannot
            be filled since it has no outline. </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.Star">
            <summary> Asterisk-shaped <see cref="T:ZedGraph.Symbol"/>.  This symbol
            cannot be filled since it has no outline. </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.TriangleDown">
            <summary> Unilateral triangle <see cref="T:ZedGraph.Symbol"/>, pointing
            down. </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.HDash">
            <summary>
            Horizontal dash <see cref="T:ZedGraph.Symbol"/>.  This symbol cannot be
            filled since it has no outline.
            </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.VDash">
            <summary>
            Vertical dash <see cref="T:ZedGraph.Symbol"/>.  This symbol cannot be
            filled since it has no outline.
            </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.UserDefined">
            <summary> A symbol defined by the <see cref="P:ZedGraph.Symbol.UserSymbol"/> propery.
            If no symbol is defined, the <see cref="F:ZedGraph.Symbol.Default.Type"/>. symbol will
            be used.
            </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.Default">
            <summary> A Default symbol type (the symbol type will be obtained
            from <see cref="F:ZedGraph.Symbol.Default.Type"/>. </summary>
        </member>
        <member name="F:ZedGraph.SymbolType.None">
            <summary> No symbol is shown (this is equivalent to using
            <see cref="P:ZedGraph.Symbol.IsVisible"/> = false.</summary>
        </member>
        <member name="T:ZedGraph.LegendPos">
            <summary>
            Enumeration type that defines the possible legend locations
            </summary>
            <seealso cref="P:ZedGraph.Legend.Position"/>
        </member>
        <member name="F:ZedGraph.LegendPos.Top">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> above the <see cref="P:ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.Left">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> on the left side of the <see cref="P:ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.Right">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> on the right side of the <see cref="P:ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.Bottom">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> below the <see cref="P:ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.InsideTopLeft">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> inside the <see cref="P:ZedGraph.Chart.Rect"/> in the
            top-left corner.  
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.InsideTopRight">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> inside the <see cref="P:ZedGraph.Chart.Rect"/> in the
            top-right corner. 
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.InsideBotLeft">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> inside the <see cref="P:ZedGraph.Chart.Rect"/> in the
            bottom-left corner.
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.InsideBotRight">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> inside the <see cref="P:ZedGraph.Chart.Rect"/> in the
            bottom-right corner. 
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.Float">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> as a floating object above the graph at the
            location specified by <see cref="P:ZedGraph.Legend.Location"/>.
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.TopCenter">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> centered above the <see cref="P:ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.BottomCenter">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> centered below the <see cref="P:ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.TopFlushLeft">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> above the <see cref="P:ZedGraph.Chart.Rect"/>, but flush
            against the left margin of the <see cref="P:ZedGraph.PaneBase.Rect" />.
            </summary>
        </member>
        <member name="F:ZedGraph.LegendPos.BottomFlushLeft">
            <summary>
            Locate the <see cref="T:ZedGraph.Legend"/> below the <see cref="P:ZedGraph.Chart.Rect"/>, but flush
            against the left margin of the <see cref="P:ZedGraph.PaneBase.Rect" />.
            </summary>
        </member>
        <member name="T:ZedGraph.AlignH">
            <summary>
            Enumeration type for the different horizontal text alignment options
            </summary>
            <seealso cref="T:ZedGraph.FontSpec"/>
        </member>
        <member name="F:ZedGraph.AlignH.Left">
            <summary>
            Position the text so that its left edge is aligned with the
            specified X,Y location.  Used by the
            <see cref="M:ZedGraph.FontSpec.Draw(System.Drawing.Graphics,ZedGraph.PaneBase,System.String,System.Single,System.Single,ZedGraph.AlignH,ZedGraph.AlignV,System.Single)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.AlignH.Center">
            <summary>
            Position the text so that its center is aligned (horizontally) with the
            specified X,Y location.  Used by the
            <see cref="M:ZedGraph.FontSpec.Draw(System.Drawing.Graphics,ZedGraph.PaneBase,System.String,System.Single,System.Single,ZedGraph.AlignH,ZedGraph.AlignV,System.Single)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.AlignH.Right">
            <summary>
            Position the text so that its right edge is aligned with the
            specified X,Y location.  Used by the
            <see cref="M:ZedGraph.FontSpec.Draw(System.Drawing.Graphics,ZedGraph.PaneBase,System.String,System.Single,System.Single,ZedGraph.AlignH,ZedGraph.AlignV,System.Single)"/> method.
            </summary>
        </member>
        <member name="T:ZedGraph.AlignP">
            <summary>
            Enumeration type for the different proximal alignment options
            </summary>
            <seealso cref="T:ZedGraph.FontSpec"/>
            <seealso cref="P:ZedGraph.Scale.Align"/>
        </member>
        <member name="F:ZedGraph.AlignP.Inside">
            <summary>
            Position the text so that its "inside" edge (the edge that is
            nearest to the alignment reference point or object) is aligned.
            Used by the <see cref="P:ZedGraph.Scale.Align"/> method to align text
            to the axis.
            </summary>
        </member>
        <member name="F:ZedGraph.AlignP.Center">
            <summary>
            Position the text so that its center is aligned with the
            reference object or point.
            Used by the <see cref="P:ZedGraph.Scale.Align"/> method to align text
            to the axis.
            </summary>
        </member>
        <member name="F:ZedGraph.AlignP.Outside">
            <summary>
            Position the text so that its right edge (the edge that is
            farthest from the alignment reference point or object) is aligned.
            Used by the <see cref="P:ZedGraph.Scale.Align"/> method to align text
            to the axis.
            </summary>
        </member>
        <member name="T:ZedGraph.AlignV">
            <summary>
            Enumeration type for the different vertical text alignment options
            </summary>
            specified X,Y location.  Used by the
            <see cref="M:ZedGraph.FontSpec.Draw(System.Drawing.Graphics,ZedGraph.PaneBase,System.String,System.Single,System.Single,ZedGraph.AlignH,ZedGraph.AlignV,System.Single)"/> method.
        </member>
        <member name="F:ZedGraph.AlignV.Top">
            <summary>
            Position the text so that its top edge is aligned with the
            specified X,Y location.  Used by the
            <see cref="M:ZedGraph.FontSpec.Draw(System.Drawing.Graphics,ZedGraph.PaneBase,System.String,System.Single,System.Single,ZedGraph.AlignH,ZedGraph.AlignV,System.Single)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.AlignV.Center">
            <summary>
            Position the text so that its center is aligned (vertically) with the
            specified X,Y location.  Used by the
            <see cref="M:ZedGraph.FontSpec.Draw(System.Drawing.Graphics,ZedGraph.PaneBase,System.String,System.Single,System.Single,ZedGraph.AlignH,ZedGraph.AlignV,System.Single)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.AlignV.Bottom">
            <summary>
            Position the text so that its bottom edge is aligned with the
            specified X,Y location.  Used by the
            <see cref="M:ZedGraph.FontSpec.Draw(System.Drawing.Graphics,ZedGraph.PaneBase,System.String,System.Single,System.Single,ZedGraph.AlignH,ZedGraph.AlignV,System.Single)"/> method.
            </summary>
        </member>
        <member name="T:ZedGraph.CoordType">
            <summary>
            Enumeration type for the user-defined coordinate types available.
            These coordinate types are used the <see cref="T:ZedGraph.ArrowObj"/> objects
            and <see cref="T:ZedGraph.TextObj"/> objects only.
            </summary>
            <seealso cref="P:ZedGraph.Location.CoordinateFrame"/>
        </member>
        <member name="F:ZedGraph.CoordType.ChartFraction">
            <summary>
            Coordinates are specified as a fraction of the
            <see cref="P:ZedGraph.Chart.Rect"/>.  That is, for the X coordinate, 0.0
            is at the left edge of the ChartRect and 1.0
            is at the right edge of the ChartRect. A value less
            than zero is left of the ChartRect and a value
            greater than 1.0 is right of the ChartRect.  For the Y coordinate, 0.0
            is the top and 1.0 is the bottom.
            </summary>
        </member>
        <member name="F:ZedGraph.CoordType.PaneFraction">
            <summary>
            Coordinates are specified as a fraction of the
            <see cref="P:ZedGraph.PaneBase.Rect"/>.  That is, for the X coordinate, 0.0
            is at the left edge of the Rect and 1.0
            is at the right edge of the Rect. A value less
            than zero is left of the Rect and a value
            greater than 1.0 is right of the Rect.  For the Y coordinate, 0.0
            is the top and 1.0 is the bottom.  Note that
            any value less than zero or greater than 1.0 will be outside
            the Rect, and therefore clipped.
            </summary>
        </member>
        <member name="F:ZedGraph.CoordType.AxisXYScale">
            <summary>
            Coordinates are specified according to the user axis scales
            for the <see cref="P:ZedGraph.GraphPane.XAxis"/> and <see cref="P:ZedGraph.GraphPane.YAxis"/>.
            </summary>
        </member>
        <member name="F:ZedGraph.CoordType.AxisXY2Scale">
            <summary>
            Coordinates are specified according to the user axis scales
            for the <see cref="P:ZedGraph.GraphPane.XAxis"/> and <see cref="P:ZedGraph.GraphPane.Y2Axis"/>.
            </summary>
        </member>
        <member name="F:ZedGraph.CoordType.XChartFractionYPaneFraction">
            <summary>
            The X coordinate is specified as a fraction of the <see cref="P:ZedGraph.Chart.Rect"/>,
            and the Y coordinate is specified as a fraction of the <see cref="P:ZedGraph.PaneBase.Rect" />.
            </summary>
            <remarks>
            For the X coordinate, 0.0
            is at the left edge of the ChartRect and 1.0
            is at the right edge of the ChartRect. A value less
            than zero is left of the ChartRect and a value
            greater than 1.0 is right of the ChartRect.  For the Y coordinate, a value of zero is at
            the left side of the pane, and a value of 1.0 is at the right side of the pane.
            </remarks>
        </member>
        <member name="F:ZedGraph.CoordType.XPaneFractionYChartFraction">
            <summary>
            The X coordinate is specified as a fraction of the <see cref="P:ZedGraph.PaneBase.Rect"/>,
            and the Y coordinate is specified as a fraction of the <see cref="P:ZedGraph.Chart.Rect" />.
            </summary>
            <remarks>
            For the X coordinate, a value of zero is at
            the left side of the pane, and a value of 1.0 is at the right side of the pane.
            For the Y coordinate, 0.0
            is at the top edge of the ChartRect and 1.0
            is at the bottom edge of the ChartRect. A value less
            than zero is above the ChartRect and a value
            greater than 1.0 is below the ChartRect.
            </remarks>
        </member>
        <member name="F:ZedGraph.CoordType.XScaleYChartFraction">
            <summary>
            The X coordinate is specified as an X Scale value, and the Y coordinate
            is specified as a fraction of the <see cref="P:ZedGraph.Chart.Rect"/>.
            </summary>
            <remarks>
            For the X coordinate, the value just corresponds to the values of the X scale.
            Values outside the scale range will be
            outside the <see cref="P:ZedGraph.Chart.Rect" />.  For the Y coordinate, 0.0
            is at the top edge of the ChartRect and 1.0
            is at the bottom edge of the ChartRect. A value less
            than zero is above the ChartRect and a value
            greater than 1.0 is below the ChartRect.
            </remarks>
        </member>
        <member name="F:ZedGraph.CoordType.XChartFractionYScale">
            <summary>
            The X coordinate is specified as a fraction of the
            <see cref="P:ZedGraph.Chart.Rect"/> and the Y coordinate is specified as
            a Y scale value.
            </summary>
            <remarks>
            For the X coordinate, 0.0
            is at the left edge of the ChartRect and 1.0
            is at the right edge of the ChartRect. A value less
            than zero is left of the ChartRect and a value
            greater than 1.0 is right of the ChartRect.  For the Y coordinate, the value just
            corresponds to the values of the Y scale.  Values outside the scale range will be
            outside the <see cref="P:ZedGraph.Chart.Rect" />.
            </remarks>
        </member>
        <member name="F:ZedGraph.CoordType.XChartFractionY2Scale">
            <summary>
            The X coordinate is specified as a fraction of the
            <see cref="P:ZedGraph.Chart.Rect"/> and the Y coordinate is specified as
            a Y2 scale value.
            </summary>
            <remarks>
            For the X coordinate, 0.0
            is at the left edge of the ChartRect and 1.0
            is at the right edge of the ChartRect. A value less
            than zero is left of the ChartRect and a value
            greater than 1.0 is right of the ChartRect.  For the Y coordinate, the value just
            corresponds to the values of the Y2 scale.  Values outside the scale range will be
            outside the <see cref="P:ZedGraph.Chart.Rect" />.
            </remarks>
        </member>
        <member name="T:ZedGraph.StepType">
            <summary>
            Enumeration type that defines how a curve is drawn.  Curves can be drawn
            as ordinary lines by connecting the points directly, or in a stair-step
            fashion as a series of discrete, constant values.  In a stair step plot,
            all lines segments are either horizontal or vertical.  In a non-step (line)
            plot, the lines can be any angle.
            </summary>
            <seealso cref="P:ZedGraph.Line.StepType"/>
        </member>
        <member name="F:ZedGraph.StepType.ForwardStep">
            <summary>
            Draw the <see cref="T:ZedGraph.CurveItem"/> as a stair-step in which each
            point defines the
            beginning (left side) of a new stair.  This implies the points are
            defined at the beginning of an "event."
            </summary>
        </member>
        <member name="F:ZedGraph.StepType.RearwardStep">
            <summary>
            Draw the <see cref="T:ZedGraph.CurveItem"/> as a stair-step in which each
            point defines the end (right side) of a new stair.  This implies
            the points are defined at the end of an "event."
            </summary>
        </member>
        <member name="F:ZedGraph.StepType.NonStep">
            <summary>
            Draw the <see cref="T:ZedGraph.CurveItem"/> as an ordinary line, in which the
            points are connected directly by line segments.
            </summary>
        </member>
        <member name="F:ZedGraph.StepType.ForwardSegment">
            <summary>
            Draw the <see cref="T:ZedGraph.CurveItem"/> as a segment in which each point defines the
            beginning (left side) of a new "stair."  This implies the points are defined
            at the beginning of an "event."  Note that ForwardSegment is different
            from ForwardStep in that it does not draw the vertical portion of the step.
            </summary>
        </member>
        <member name="F:ZedGraph.StepType.RearwardSegment">
            <summary>
            Draw the <see cref="T:ZedGraph.CurveItem"/> as a segment in which each point defines the
            end (right side) of a new "stair."  This implies the points are defined
            at the end of an "event."  Note that RearwardSegment is different
            from RearwardStep in that it does not draw the vertical portion of the step.
            </summary>
        </member>
        <member name="T:ZedGraph.BarBase">
            <summary>
            Enumeration type that defines the base axis from which <see cref="T:ZedGraph.Bar"/> graphs
            are displayed. The bars can be drawn on any of the four axes (<see cref="T:ZedGraph.XAxis"/>,
            <see cref="T:ZedGraph.X2Axis"/>, <see cref="T:ZedGraph.YAxis"/>, and <see cref="T:ZedGraph.Y2Axis"/>).
            </summary>
            <seealso cref="P:ZedGraph.BarSettings.Base"/>
        </member>
        <member name="F:ZedGraph.BarBase.X">
            <summary>
            Draw the <see cref="T:ZedGraph.Bar"/> chart based from the <see cref="T:ZedGraph.XAxis"/>.
            </summary>
        </member>
        <member name="F:ZedGraph.BarBase.X2">
            <summary>
            Draw the <see cref="T:ZedGraph.Bar"/> chart based from the <see cref="T:ZedGraph.X2Axis"/>.
            </summary>
        </member>
        <member name="F:ZedGraph.BarBase.Y">
            <summary>
            Draw the <see cref="T:ZedGraph.Bar"/> chart based from the <see cref="T:ZedGraph.YAxis"/>.
            </summary>
        </member>
        <member name="F:ZedGraph.BarBase.Y2">
            <summary>
            Draw the <see cref="T:ZedGraph.Bar"/> chart based from the <see cref="T:ZedGraph.Y2Axis"/>.
            </summary>
        </member>
        <member name="T:ZedGraph.LineType">
            <summary>
            Enumeration type that defines the available types of <see cref="T:ZedGraph.LineItem"/> graphs.
            </summary>
            <seealso cref="P:ZedGraph.GraphPane.LineType"/>
        </member>
        <member name="F:ZedGraph.LineType.Normal">
            <summary>
            Draw the lines as normal.  Any fill area goes from each line down to the X Axis.
            </summary>
        </member>
        <member name="F:ZedGraph.LineType.Stack">
            <summary>
            Draw the lines stacked on top of each other, accumulating values to a total value.
            </summary>
        </member>
        <member name="T:ZedGraph.BarType">
            <summary>
            Enumeration type that defines the available types of <see cref="T:ZedGraph.BarItem"/> graphs.
            </summary>
            <seealso cref="P:ZedGraph.BarSettings.Type"/>
        </member>
        <member name="F:ZedGraph.BarType.Cluster">
            <summary>
            Draw each <see cref="T:ZedGraph.BarItem"/> side by side in clusters.
            </summary>
        </member>
        <member name="F:ZedGraph.BarType.Overlay">
            <summary>
            Draw the <see cref="T:ZedGraph.BarItem"/> bars one on top of the other.  The bars will
            be drawn such that the last bar in the <see cref="T:ZedGraph.CurveList"/> will be behind
            all other bars.  Note that the bar values are not summed up for the overlay
            mode.  The data values must be summed before being passed
            to <see cref="M:ZedGraph.GraphPane.AddBar(System.String,ZedGraph.IPointList,System.Drawing.Color)"/>.
            For example, if the first bar of
            the first <see cref="T:ZedGraph.BarItem"/> has a value of 100, and the first bar of
            the second <see cref="T:ZedGraph.BarItem"/> has a value of 120, then that bar will
            appear to be 20 units on top of the first bar.
            </summary>
        </member>
        <member name="F:ZedGraph.BarType.SortedOverlay">
            <summary>
            Draw the <see cref="T:ZedGraph.BarItem"/> bars one on top of the other.  The bars will
            be drawn such that the bars are sorted according to the maximum value, with
            the tallest bar at each point at the back and the shortest bar at the front.
            This is similar to the <see cref="F:ZedGraph.BarType.Overlay"/> mode, but the bars are sorted at
            each base value.
            The data values must be summed before being passed
            to <see cref="M:ZedGraph.GraphPane.AddBar(System.String,ZedGraph.IPointList,System.Drawing.Color)"/>.  For example, if the first bar of
            the first <see cref="T:ZedGraph.BarItem"/> has a value of 100, and the first bar of
            the second <see cref="T:ZedGraph.BarItem"/> has a value of 120, then that bar will
            appear to be 20 units on top of the first bar.
            </summary>
        </member>
        <member name="F:ZedGraph.BarType.Stack">
            <summary>
            Draw the <see cref="T:ZedGraph.BarItem"/> bars in an additive format so that they stack on
            top of one another.  The value of the last bar drawn will be the sum of the values
            of all prior bars.
            </summary>
        </member>
        <member name="F:ZedGraph.BarType.PercentStack">
             <summary>
             Draw the <see cref="T:ZedGraph.BarItem"/> bars in a format whereby the height of each
             represents the percentage of the total each one represents.  Negative values
            are displayed below the zero line as percentages of the absolute total of all values. 
             </summary>
        </member>
        <member name="T:ZedGraph.SortType">
            <summary>
            Enumeration type that defines which set of data points - X or Y - is used  
            <seealso cref="M:System.Collections.ArrayList.Sort"/> to perform the sort.
            </summary>
        </member>
        <member name="F:ZedGraph.SortType.YValues">
            <summary>
            Use the Y values to sort the list.
            </summary>
        </member>
        <member name="F:ZedGraph.SortType.XValues">
            <summary>
            Use the X values to sort the list.
            </summary>
        </member>
        <member name="T:ZedGraph.ZOrder">
            <summary>
            Enumeration that specifies a Z-Order position for <see cref="T:ZedGraph.GraphObj"/>
            objects.
            </summary>
            <remarks>This enumeration allows you to set the layering of various graph
            features.  Except for the <see cref="T:ZedGraph.GraphObj"/> objects, other feature types
            all have a fixed depth as follows (front to back):
            <list>
            <see cref="T:ZedGraph.Legend"/> objects
            The border around <see cref="P:ZedGraph.Chart.Rect"/>
            <see cref="T:ZedGraph.CurveItem"/> objects
            The <see cref="T:ZedGraph.Axis"/> features
            The background fill of the <see cref="P:ZedGraph.Chart.Rect"/>
            The pane <see cref="P:ZedGraph.PaneBase.Title"/>
            The background fill of the <see cref="P:ZedGraph.PaneBase.Rect"/>
            </list>
            You cannot place anything behind the <see cref="P:ZedGraph.PaneBase.Rect"/>
            background fill, but <see cref="P:ZedGraph.GraphObj.ZOrder"/> allows you to
            explicitly control the depth of <see cref="T:ZedGraph.GraphObj"/> objects
            between all other object types.  For items of equal <see cref="T:ZedGraph.ZOrder"/>,
            such as multiple <see cref="T:ZedGraph.CurveItem"/>'s or <see cref="T:ZedGraph.GraphObj"/>'s
            having the same <see cref="T:ZedGraph.ZOrder"/> value, the relative depth is
            controlled by the ordinal position in the list (either
            <see cref="T:ZedGraph.CurveList"/> or <see cref="T:ZedGraph.GraphObjList"/>).
            <see cref="T:ZedGraph.GraphObj"/> objects
            can be placed in the <see cref="T:ZedGraph.GraphObjList"/> of either a
            <see cref="T:ZedGraph.GraphPane"/> or a <see cref="T:ZedGraph.MasterPane"/>.  For a
            <see cref="T:ZedGraph.GraphPane"/>-based <see cref="T:ZedGraph.GraphObj"/>, all <see cref="T:ZedGraph.ZOrder"/>
            values are applicable.  For a <see cref="T:ZedGraph.MasterPane"/>-based
            <see cref="T:ZedGraph.GraphObj"/>, any <see cref="T:ZedGraph.ZOrder"/> value can be used, but there
            are really only three depths:
            <list><see cref="F:ZedGraph.ZOrder.H_BehindAll"/> will place the item behind the pane title,
            <see cref="F:ZedGraph.ZOrder.A_InFront"/> will place on top of all other graph features,
            any other value places the object above the pane title, but behind the <see cref="T:ZedGraph.GraphPane"/>'s.
            </list>
            </remarks>
        </member>
        <member name="F:ZedGraph.ZOrder.H_BehindAll">
            <summary>
            Specifies that the <see cref="T:ZedGraph.GraphObj"/> will be behind all other
            objects (including the <see cref="T:ZedGraph.PaneBase"/> <see cref="P:ZedGraph.PaneBase.Title"/>).
            </summary>
        </member>
        <member name="F:ZedGraph.ZOrder.G_BehindChartFill">
            <summary>
            Specifies that the <see cref="T:ZedGraph.GraphObj"/> will be behind the
            <see cref="P:ZedGraph.Chart.Rect"/> background <see cref="T:ZedGraph.Fill"/>
            (see <see cref="P:ZedGraph.Chart.Fill"/>).
            </summary>
        </member>
        <member name="F:ZedGraph.ZOrder.F_BehindGrid">
            <summary>
            Specifies that the <see cref="T:ZedGraph.GraphObj"/> will be behind the grid lines.
            </summary>
        </member>
        <member name="F:ZedGraph.ZOrder.E_BehindCurves">
            <summary>
            Specifies that the <see cref="T:ZedGraph.GraphObj"/> will be behind the
            <see cref="T:ZedGraph.CurveItem"/> objects.
            </summary>
        </member>
        <member name="F:ZedGraph.ZOrder.D_BehindAxis">
            <summary>
            Specifies that the <see cref="T:ZedGraph.GraphObj"/> will be behind the
            <see cref="T:ZedGraph.Axis"/> objects.
            </summary>
        </member>
        <member name="F:ZedGraph.ZOrder.C_BehindChartBorder">
            <summary>
            Specifies that the <see cref="T:ZedGraph.GraphObj"/> will be behind the
            <see cref="T:ZedGraph.Chart"/> border.
            </summary>
        </member>
        <member name="F:ZedGraph.ZOrder.B_BehindLegend">
            <summary>
            Specifies that the <see cref="T:ZedGraph.GraphObj"/> will be behind the
            <see cref="T:ZedGraph.Legend"/> object.
            </summary>
        </member>
        <member name="F:ZedGraph.ZOrder.A_InFront">
            <summary>
            Specifies that the <see cref="T:ZedGraph.GraphObj"/> will be in front of
            all other objects, except for the other <see cref="T:ZedGraph.GraphObj"/>
            objects that have the same <see cref="T:ZedGraph.ZOrder"/> and are before
            this object in the <see cref="T:ZedGraph.GraphObjList"/>.
            </summary>
        </member>
        <member name="T:ZedGraph.PieLabelType">
            <summary>
            Enumeration that determines the type of label that is displayed for each pie slice
            (see <see cref="P:ZedGraph.PieItem.LabelType"/>).
            </summary>
        </member>
        <member name="F:ZedGraph.PieLabelType.Name_Value">
            <summary>
            Displays <see cref="P:ZedGraph.CurveItem.Label"/> and <see cref="P:ZedGraph.PieItem.Value"/> for
            a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:ZedGraph.PieLabelType.Name_Percent">
            <summary>
            Displays <see cref="P:ZedGraph.CurveItem.Label"/> and <see cref="P:ZedGraph.PieItem.Value"/> (as % of total) for
            a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:ZedGraph.PieLabelType.Name_Value_Percent">
            <summary>
            Displays a <see cref="P:ZedGraph.CurveItem.Label"/> containing the <see cref="P:ZedGraph.PieItem.Value"/> both  
            as an absolute number and as percentage of the total.
            </summary>
        </member>
        <member name="F:ZedGraph.PieLabelType.Value">
            <summary>
            Displays <see cref="P:ZedGraph.PieItem.Value"/> for
            a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:ZedGraph.PieLabelType.Percent">
            <summary>
            Displays <see cref="P:ZedGraph.PieItem.Value"/> (as % of total) for
            a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:ZedGraph.PieLabelType.Name">
            <summary>
            Displays <see cref="P:ZedGraph.CurveItem.Label"/> for a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:ZedGraph.PieLabelType.None">
             <summary>
            No label displayed. 
             </summary>
        </member>
        <member name="T:ZedGraph.PaneLayout">
            <summary>
            Define the auto layout options for the
            <see cref="M:ZedGraph.MasterPane.SetLayout(System.Drawing.Graphics,ZedGraph.PaneLayout)"/> method.
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.ForceSquare">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s so they are in a square grid (always 2x2, 3x3, 4x4),
            leaving blank spaces as required.
            </summary>
            <remarks>For example, a single pane would generate a 1x1 grid, between 2 and 4 panes would generate
            a 2x2 grid, 5 to 9 panes would generate a 3x3 grid.</remarks>
        </member>
        <member name="F:ZedGraph.PaneLayout.SquareColPreferred">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s so they are in a general square (2x2, 3x3, etc.), but use extra
            columns when necessary (row x column = 1x2, 2x3, 3x4, etc.) depending on the total number
            of panes required.
            </summary>
            <remarks>For example, a 2x2 grid has four panes and a 3x3 grid has 9 panes.  If there are
            6 panes required, then this option will eliminate a row (column preferred) to make a
            2 row x 3 column grid.  With 7 panes, it will make a 3x3 grid with 2 empty spaces.</remarks>
        </member>
        <member name="F:ZedGraph.PaneLayout.SquareRowPreferred">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s so they are in a general square (2x2, 3x3, etc.), but use extra
            rows when necessary (2x1, 3x2, 4x3, etc.) depending on the total number of panes required.
            </summary>
            <remarks>For example, a 2x2 grid has four panes and a 3x3 grid has 9 panes.  If there are
            6 panes required, then this option will eliminate a column (row preferred) to make a
            3 row x 2 column grid.  With 7 panes, it will make a 3x3 grid with 2 empty spaces.</remarks>
        </member>
        <member name="F:ZedGraph.PaneLayout.SingleRow">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s in a single row
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.SingleColumn">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s in a single column
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.ExplicitCol12">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s with an explicit number of columns: The first row has
            1 column and the second row has 2 columns for a total of 3 panes.
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.ExplicitCol21">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s with an explicit number of columns: The first row has
            2 columns and the second row has 1 column for a total of 3 panes.
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.ExplicitCol23">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s with an explicit number of columns: The first row has
            2 columns and the second row has 3 columns for a total of 5 panes.
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.ExplicitCol32">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s with an explicit number of columns: The first row has
            3 columns and the second row has 2 columns for a total of 5 panes.
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.ExplicitRow12">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s with an explicit number of rows: The first column has
            1 row and the second column has 2 rows for a total of 3 panes.
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.ExplicitRow21">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s with an explicit number of rows: The first column has
            2 rows and the second column has 1 row for a total of 3 panes.
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.ExplicitRow23">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s with an explicit number of rows: The first column has
            2 rows and the second column has 3 rows for a total of 5 panes.
            </summary>
        </member>
        <member name="F:ZedGraph.PaneLayout.ExplicitRow32">
            <summary>
            Layout the <see cref="T:ZedGraph.GraphPane"/>'s with an explicit number of rows: The first column has
            3 rows and the second column has 2 rows for a total of 5 panes.
            </summary>
        </member>
        <member name="T:ZedGraph.RenderModeType">
            <summary>
            Enum for specifying the type of data to be returned by the ZedGraphWeb Render() method.
            </summary>
        </member>
        <member name="F:ZedGraph.RenderModeType.ImageTag">
            <summary>
            Renders as an IMG tag referencing a local generated image. ContentType stays text.
            </summary>
        </member>
        <member name="F:ZedGraph.RenderModeType.RawImage">
            <summary>
            Renders the binary image. ContentType is changed accordingly.
            </summary>
        </member>
        <member name="T:ZedGraph.ValueHandler">
            <summary>
            A class designed to simplify the process of getting the actual value for
            the various stacked and regular curve types
            </summary>
            
            <author> John Champion</author>
            <version> $Revision: 3.21 $ $Date: 2008-12-02 12:55:34 $ </version>
        </member>
        <member name="M:ZedGraph.ValueHandler.#ctor(ZedGraph.GraphPane,System.Boolean)">
            <summary>
            Basic constructor that saves a reference to the parent
            <see cref="T:ZedGraph.GraphPane"/> object.
            </summary>
            <param name="pane">The parent <see cref="T:ZedGraph.GraphPane"/> object.</param>
            <param name="initialize">A <see cref="T:System.Boolean"/> flag to indicate whether or
            not the drawing variables should be initialized.  Initialization is not
            required if this is part of a ZedGraph internal draw operation (i.e., its in
            the middle of a call to <see cref="M:ZedGraph.GraphPane.Draw(System.Drawing.Graphics)"/>).  Otherwise, you should
            initialize to make sure the drawing variables are configured.  true to do
            an initialization, false otherwise.</param>
        </member>
        <member name="M:ZedGraph.ValueHandler.GetValues(ZedGraph.CurveItem,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get the user scale values associate with a particular point of a
            particular curve.</summary>
            <remarks>The main purpose of this method is to handle
            stacked bars, in which case the stacked values are returned rather
            than the individual data values.
            </remarks>
            <param name="curve">A <see cref="T:ZedGraph.CurveItem"/> object of interest.</param>
            <param name="iPt">The zero-based point index for the point of interest.</param>
            <param name="baseVal">A <see cref="T:System.Double"/> value representing the value
            for the independent axis.</param>
            <param name="lowVal">A <see cref="T:System.Double"/> value representing the lower
            value for the dependent axis.</param>
            <param name="hiVal">A <see cref="T:System.Double"/> value representing the upper
            value for the dependent axis.</param>
            <returns>true if the data point is value, false for
            <see cref="F:ZedGraph.PointPairBase.Missing"/>, invalid, etc. data.</returns>
        </member>
        <member name="M:ZedGraph.ValueHandler.GetValues(ZedGraph.GraphPane,ZedGraph.CurveItem,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get the user scale values associate with a particular point of a
            particular curve.</summary>
            <remarks>The main purpose of this method is to handle
            stacked bars and lines, in which case the stacked values are returned rather
            than the individual data values.  However, this method works generically for any
            curve type.
            </remarks>
            <param name="pane">The parent <see cref="T:ZedGraph.GraphPane"/> object.</param>
            <param name="curve">A <see cref="T:ZedGraph.CurveItem"/> object of interest.</param>
            <param name="iPt">The zero-based point index for the point of interest.</param>
            <param name="baseVal">A <see cref="T:System.Double"/> value representing the value
            for the independent axis.</param>
            <param name="lowVal">A <see cref="T:System.Double"/> value representing the lower
            value for the dependent axis.</param>
            <param name="hiVal">A <see cref="T:System.Double"/> value representing the upper
            value for the dependent axis.</param>
            <returns>true if the data point is value, false for
            <see cref="F:ZedGraph.PointPairBase.Missing"/>, invalid, etc. data.</returns>
        </member>
        <member name="M:ZedGraph.ValueHandler.BarCenterValue(ZedGraph.CurveItem,System.Single,System.Int32,System.Double,System.Int32)">
            <summary>
            Calculate the user scale position of the center of the specified bar, using the
            <see cref="T:ZedGraph.Axis"/> as specified by <see cref="P:ZedGraph.BarSettings.Base"/>.  This method is
            used primarily by the
            <see cref="M:ZedGraph.GraphPane.FindNearestPoint(System.Drawing.PointF,ZedGraph.CurveItem@,System.Int32@)"/> method in order to
            determine the bar "location," which is defined as the center of the top of the individual bar.
            </summary>
            <param name="curve">The <see cref="T:ZedGraph.CurveItem"/> representing the
            bar of interest.</param>
            <param name="barWidth">The width of each individual bar. This can be calculated using
            the <see cref="M:ZedGraph.CurveItem.GetBarWidth(ZedGraph.GraphPane)"/> method.</param>
            <param name="iCluster">The cluster number for the bar of interest.  This is the ordinal
            position of the current point.  That is, if a particular <see cref="T:ZedGraph.CurveItem"/> has
            10 points, then a value of 3 would indicate the 4th point in the data array.</param>
            <param name="val">The actual independent axis value for the bar of interest.</param>
            <param name="iOrdinal">The ordinal position of the <see cref="T:ZedGraph.CurveItem"/> of interest.
            That is, the first bar series is 0, the second is 1, etc.  Note that this applies only
            to the bars.  If a graph includes both bars and lines, then count only the bars.</param>
            <returns>A user scale value position of the center of the bar of interest.</returns>
        </member>
        <member name="T:ZedGraph.X2Axis">
            <summary>
            <see cref="T:ZedGraph.X2Axis"/> inherits from <see cref="T:ZedGraph.Axis"/>, and defines the
            special characteristics of a horizontal axis, specifically located at
            the top of the <see cref="P:ZedGraph.Chart.Rect"/> of the <see cref="T:ZedGraph.GraphPane"/>
            object
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2007-04-16 00:03:07 $ </version>
        </member>
        <member name="T:ZedGraph.X2Axis.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:ZedGraph.X2Axis"/> class.
            </summary>
        </member>
        <member name="F:ZedGraph.X2Axis.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:ZedGraph.X2Axis"/>
            (<see cref="P:ZedGraph.Axis.IsVisible"/> property). true to display the scale
            values, title, tic marks, false to hide the axis entirely.
            </summary>
        </member>
        <member name="F:ZedGraph.X2Axis.Default.IsZeroLine">
            <summary>
            Determines if a line will be drawn at the zero value for the 
            <see cref="T:ZedGraph.X2Axis"/>, that is, a line that
            divides the negative values from positive values.
            <seealso cref="P:ZedGraph.MajorGrid.IsZeroLine"/>.
            </summary>
        </member>
        <member name="M:ZedGraph.X2Axis.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:ZedGraph.X2Axis"/> properties to
            default values as defined in the <see cref="T:ZedGraph.X2Axis.Default"/> class
            </summary>
        </member>
        <member name="M:ZedGraph.X2Axis.#ctor(System.String)">
            <summary>
            Default constructor that sets all <see cref="T:ZedGraph.X2Axis"/> properties to
            default values as defined in the <see cref="T:ZedGraph.X2Axis.Default"/> class, except
            for the axis title
            </summary>
            <param name="title">The <see cref="P:ZedGraph.Axis.Title"/> for this axis</param>
        </member>
        <member name="M:ZedGraph.X2Axis.#ctor(ZedGraph.X2Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The X2Axis object from which to copy</param>
        </member>
        <member name="M:ZedGraph.X2Axis.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.X2Axis.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.X2Axis.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="F:ZedGraph.X2Axis.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.X2Axis.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.X2Axis.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:ZedGraph.X2Axis.SetTransformMatrix(System.Drawing.Graphics,ZedGraph.GraphPane,System.Single)">
            <summary>
            Setup the Transform Matrix to handle drawing of this <see cref="T:ZedGraph.X2Axis"/>
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:ZedGraph.X2Axis.IsPrimary(ZedGraph.GraphPane)">
            <summary>
            Determines if this <see cref="T:ZedGraph.Axis" /> object is a "primary" one.
            </summary>
            <remarks>
            The primary axes are the <see cref="T:ZedGraph.XAxis" /> (always),
            the <see cref="T:ZedGraph.X2Axis" /> (always), the first
            <see cref="T:ZedGraph.YAxis" /> in the <see cref="P:ZedGraph.GraphPane.YAxisList" /> 
            (<see cref="P:ZedGraph.CurveItem.YAxisIndex" /> = 0),  and the first
            <see cref="T:ZedGraph.Y2Axis" /> in the <see cref="P:ZedGraph.GraphPane.Y2AxisList" /> 
            (<see cref="P:ZedGraph.CurveItem.YAxisIndex" /> = 0).  Note that
            <see cref="P:ZedGraph.GraphPane.YAxis" /> and <see cref="P:ZedGraph.GraphPane.Y2Axis" />
            always reference the primary axes.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>true for a primary <see cref="T:ZedGraph.Axis" /> (for the <see cref="T:ZedGraph.X2Axis" />,
            this is always true), false otherwise</returns>
        </member>
        <member name="M:ZedGraph.X2Axis.CalcCrossShift(ZedGraph.GraphPane)">
            <summary>
            Calculate the "shift" size, in pixels, in order to shift the axis from its default
            location to the value specified by <see cref="P:ZedGraph.Axis.Cross"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>The shift amount measured in pixels</returns>
        </member>
        <member name="M:ZedGraph.X2Axis.GetCrossAxis(ZedGraph.GraphPane)">
            <summary>
            Gets the "Cross" axis that corresponds to this axis.
            </summary>
            <remarks>
            The cross axis is the axis which determines the of this Axis when the
            <see cref="P:ZedGraph.Axis.Cross" >Axis.Cross</see> property is used.  The
            cross axis for any <see cref="T:ZedGraph.XAxis" /> or <see cref="T:ZedGraph.X2Axis" />
            is always the primary <see cref="T:ZedGraph.YAxis" />, and
            the cross axis for any <see cref="T:ZedGraph.YAxis" /> or <see cref="T:ZedGraph.Y2Axis" /> is
            always the primary <see cref="T:ZedGraph.XAxis" />.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
        </member>
        <member name="T:ZedGraph.XAxis">
            <summary>
            <see cref="T:ZedGraph.XAxis"/> inherits from <see cref="T:ZedGraph.Axis"/>, and defines the
            special characteristics of a horizontal axis, specifically located at
            the bottom of the <see cref="P:ZedGraph.Chart.Rect"/> of the <see cref="T:ZedGraph.GraphPane"/>
            object
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.16 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="T:ZedGraph.XAxis.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:ZedGraph.XAxis"/> class.
            </summary>
        </member>
        <member name="F:ZedGraph.XAxis.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:ZedGraph.XAxis"/>
            (<see cref="P:ZedGraph.Axis.IsVisible"/> property). true to display the scale
            values, title, tic marks, false to hide the axis entirely.
            </summary>
        </member>
        <member name="F:ZedGraph.XAxis.Default.IsZeroLine">
            <summary>
            Determines if a line will be drawn at the zero value for the 
            <see cref="T:ZedGraph.XAxis"/>, that is, a line that
            divides the negative values from positive values.
            <seealso cref="P:ZedGraph.MajorGrid.IsZeroLine"/>.
            </summary>
        </member>
        <member name="M:ZedGraph.XAxis.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:ZedGraph.XAxis"/> properties to
            default values as defined in the <see cref="T:ZedGraph.XAxis.Default"/> class
            </summary>
        </member>
        <member name="M:ZedGraph.XAxis.#ctor(System.String)">
            <summary>
            Default constructor that sets all <see cref="T:ZedGraph.XAxis"/> properties to
            default values as defined in the <see cref="T:ZedGraph.XAxis.Default"/> class, except
            for the axis title
            </summary>
            <param name="title">The <see cref="P:ZedGraph.Axis.Title"/> for this axis</param>
        </member>
        <member name="M:ZedGraph.XAxis.#ctor(ZedGraph.XAxis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The XAxis object from which to copy</param>
        </member>
        <member name="M:ZedGraph.XAxis.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.XAxis.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.XAxis.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="F:ZedGraph.XAxis.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.XAxis.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.XAxis.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:ZedGraph.XAxis.SetTransformMatrix(System.Drawing.Graphics,ZedGraph.GraphPane,System.Single)">
            <summary>
            Setup the Transform Matrix to handle drawing of this <see cref="T:ZedGraph.XAxis"/>
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:ZedGraph.XAxis.IsPrimary(ZedGraph.GraphPane)">
            <summary>
            Determines if this <see cref="T:ZedGraph.Axis" /> object is a "primary" one.
            </summary>
            <remarks>
            The primary axes are the <see cref="T:ZedGraph.XAxis" /> (always), the first
            <see cref="T:ZedGraph.YAxis" /> in the <see cref="P:ZedGraph.GraphPane.YAxisList" /> 
            (<see cref="P:ZedGraph.CurveItem.YAxisIndex" /> = 0),  and the first
            <see cref="T:ZedGraph.Y2Axis" /> in the <see cref="P:ZedGraph.GraphPane.Y2AxisList" /> 
            (<see cref="P:ZedGraph.CurveItem.YAxisIndex" /> = 0).  Note that
            <see cref="P:ZedGraph.GraphPane.YAxis" /> and <see cref="P:ZedGraph.GraphPane.Y2Axis" />
            always reference the primary axes.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>true for a primary <see cref="T:ZedGraph.Axis" /> (for the <see cref="T:ZedGraph.XAxis" />,
            this is always true), false otherwise</returns>
        </member>
        <member name="M:ZedGraph.XAxis.CalcCrossShift(ZedGraph.GraphPane)">
            <summary>
            Calculate the "shift" size, in pixels, in order to shift the axis from its default
            location to the value specified by <see cref="P:ZedGraph.Axis.Cross"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>The shift amount measured in pixels</returns>
        </member>
        <member name="M:ZedGraph.XAxis.GetCrossAxis(ZedGraph.GraphPane)">
            <summary>
            Gets the "Cross" axis that corresponds to this axis.
            </summary>
            <remarks>
            The cross axis is the axis which determines the of this Axis when the
            <see cref="P:ZedGraph.Axis.Cross" >Axis.Cross</see> property is used.  The
            cross axis for any <see cref="T:ZedGraph.XAxis" /> or <see cref="T:ZedGraph.X2Axis" />
            is always the primary <see cref="T:ZedGraph.YAxis" />, and
            the cross axis for any <see cref="T:ZedGraph.YAxis" /> or <see cref="T:ZedGraph.Y2Axis" /> is
            always the primary <see cref="T:ZedGraph.XAxis" />.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
        </member>
        <member name="T:ZedGraph.XDate">
            <summary>
            This struct encapsulates a date and time value, and handles associated
            calculations and conversions between various formats.
            </summary>
            <remarks>
            This format stored as a double value representing days since a reference date
            (XL date 0.0 is December 30, 1899 at 00:00 hrs).
            Negative values are permissible, and the
            range of valid dates is from noon on January 1st, 4713 B.C. forward.  Internally, the
            date calculations are done using Astronomical Julian Day numbers.  The Astronomical Julian
            Day number is defined as the number of days since noon on January 1st, 4713 B.C.
            (also referred to as 12:00 on January 1, -4712).
            NOTE: MS Excel actually has an error in the Serial Date calculations because it
            errantly assumes 1900 is a leap year.  The XDate calculations do not have this same
            error.  Therefore, XDate and Excel Date Serial values are 1 day different up until
            the date value of 60 (in Excel, this is February 29th, 1900, and in XDate, this is
            February 28th, 1900).  At a value of 61 (March 1st, 1900) or greater, they agree with
            eachother.
            </remarks>
            <author> John Champion </author>
            <version> $Revision: 3.23 $ $Date: 2007-11-11 06:56:34 $ </version>
        </member>
        <member name="F:ZedGraph.XDate._xlDate">
            <summary>
            The actual date value in MS Excel format.  This is the only data field in
            the <see cref="T:ZedGraph.XDate"/> struct.
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.XLDay1">
            <summary>
            The Astronomical Julian Day number that corresponds to XL Date 0.0
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.JulDayMin">
            <summary>
            The minimum valid Julian Day, which corresponds to January 1st, 4713 B.C.
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.JulDayMax">
            <summary>
            The maximum valid Julian Day, which corresponds to December 31st, 9999 A.D.
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.XLDayMin">
            <summary>
            The minimum valid Excel Day, which corresponds to January 1st, 4713 B.C.
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.XLDayMax">
            <summary>
            The maximum valid Excel Day, which corresponds to December 31st, 9999 A.D.
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.MonthsPerYear">
            <summary>
            The number of months in a year
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.HoursPerDay">
            <summary>
            The number of hours in a day
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.MinutesPerHour">
            <summary>
            The number of minutes in an hour
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.SecondsPerMinute">
            <summary>
            The number of seconds in a minute
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.MinutesPerDay">
            <summary>
            The number of minutes in a day
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.SecondsPerDay">
            <summary>
            The number of seconds in a day
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.MillisecondsPerSecond">
            <summary>
            The number of milliseconds in a second
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.MillisecondsPerDay">
            <summary>
            The number of milliseconds in a day
            </summary>
        </member>
        <member name="F:ZedGraph.XDate.DefaultFormatStr">
            <summary>
            The default format string to be used in <see cref="M:ZedGraph.XDate.ToString"/> when
            no format is provided
            </summary>
        </member>
        <member name="M:ZedGraph.XDate.#ctor(System.Double)">
            <summary>
            Construct a date class from an XL date value.
            </summary>
            <param name="xlDate">
            An XL Date value in floating point double format
            </param>
        </member>
        <member name="M:ZedGraph.XDate.#ctor(System.DateTime)">
            <summary>
            Construct a date class from a <see cref="P:ZedGraph.XDate.DateTime"/> struct.
            </summary>
            <param name="dateTime">
            A <see cref="P:ZedGraph.XDate.DateTime"/> struct containing the initial date information.
            </param>
        </member>
        <member name="M:ZedGraph.XDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a date class from a calendar date (year, month, day).  Assumes the time
            of day is 00:00 hrs
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.
            It is permissible to have day numbers outside of the 1-31 range,
            which will rollover to the previous or next month and year.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.  It is permissible to have months outside of the 1-12 range,
            which will rollover to the previous or next year.</param>
        </member>
        <member name="M:ZedGraph.XDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a date class from a calendar date and time (year, month, day, hour, minute,
            second). 
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.
            It is permissible to have day numbers outside of the 1-31 range,
            which will rollover to the previous or next month and year.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.  It is permissible to have months outside of the 1-12 range,
            which will rollover to the previous or next year.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.
            It is permissible to have hour values outside the 0-23 range, which
            will rollover to the previous or next day.</param>
            <param name="minute">An integer value for the minute, e.g. 45.
            It is permissible to have hour values outside the 0-59 range, which
            will rollover to the previous or next hour.</param>
            <param name="second">An integer value for the second, e.g. 35.
            It is permissible to have second values outside the 0-59 range, which
            will rollover to the previous or next minute.</param>
        </member>
        <member name="M:ZedGraph.XDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Construct a date class from a calendar date and time (year, month, day, hour, minute,
            second), where seconds is a <see cref="T:System.Double" /> value (allowing fractional seconds). 
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.
            It is permissible to have day numbers outside of the 1-31 range,
            which will rollover to the previous or next month and year.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.  It is permissible to have months outside of the 1-12 range,
            which will rollover to the previous or next year.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.
            It is permissible to have hour values outside the 0-23 range, which
            will rollover to the previous or next day.</param>
            <param name="minute">An integer value for the minute, e.g. 45.
            It is permissible to have hour values outside the 0-59 range, which
            will rollover to the previous or next hour.</param>
            <param name="second">A double value for the second, e.g. 35.75.
            It is permissible to have second values outside the 0-59 range, which
            will rollover to the previous or next minute.</param>
        </member>
        <member name="M:ZedGraph.XDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a date class from a calendar date and time (year, month, day, hour, minute,
            second, millisecond). 
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.
            It is permissible to have day numbers outside of the 1-31 range,
            which will rollover to the previous or next month and year.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.  It is permissible to have months outside of the 1-12 range,
            which will rollover to the previous or next year.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.
            It is permissible to have hour values outside the 0-23 range, which
            will rollover to the previous or next day.</param>
            <param name="minute">An integer value for the minute, e.g. 45.
            It is permissible to have hour values outside the 0-59 range, which
            will rollover to the previous or next hour.</param>
            <param name="second">An integer value for the second, e.g. 35.
            It is permissible to have second values outside the 0-59 range, which
            will rollover to the previous or next minute.</param>
            <param name="millisecond">An integer value for the millisecond, e.g. 632.
            It is permissible to have millisecond values outside the 0-999 range, which
            will rollover to the previous or next second.</param>
        </member>
        <member name="M:ZedGraph.XDate.#ctor(ZedGraph.XDate)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The GraphPane object from which to copy</param>
        </member>
        <member name="P:ZedGraph.XDate.XLDate">
            <summary>
            Gets or sets the date value for this item in MS Excel format.
            </summary>
        </member>
        <member name="P:ZedGraph.XDate.IsValidDate">
            <summary>
            Returns true if this <see cref="T:ZedGraph.XDate" /> struct is in the valid date range
            </summary>
        </member>
        <member name="P:ZedGraph.XDate.DateTime">
            <summary>
            Gets or sets the date value for this item in .Net DateTime format.
            </summary>
        </member>
        <member name="P:ZedGraph.XDate.JulianDay">
            <summary>
            Gets or sets the date value for this item in Julain day format.  This is the
            Astronomical Julian Day number, so a value of 0.0 corresponds to noon GMT on
            January 1st, -4712.  Thus, Julian Day number 2,400,000.0 corresponds to
            noon GMT on November 16, 1858.
            </summary>
        </member>
        <member name="P:ZedGraph.XDate.DecimalYear">
            <summary>
            Gets or sets the decimal year number (i.e., 1997.345) corresponding to this item.
            </summary>
        </member>
        <member name="M:ZedGraph.XDate.CheckValidDate(System.Double)">
            <summary>
            Returns true if the specified date value is in the valid range
            </summary>
            <param name="xlDate">The XL date value to be verified for validity</param>
            <returns>true for a valid date, false otherwise</returns>
        </member>
        <member name="M:ZedGraph.XDate.MakeValidDate(System.Double)">
            <summary>
            Take the specified date, and bound it to the valid date range for the XDate struct.
            </summary>
            <param name="xlDate">The date to be bounded</param>
            <returns>An XLDate value that lies between the minimum and maximum valid date ranges
            (see <see cref="F:ZedGraph.XDate.XLDayMin" /> and <see cref="F:ZedGraph.XDate.XLDayMax" />)</returns>
        </member>
        <member name="M:ZedGraph.XDate.GetDate(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the calendar date (year, month, day) corresponding to this instance.
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.</param>
        </member>
        <member name="M:ZedGraph.XDate.SetDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the calendar date (year, month, day) of this instance.
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.</param>
        </member>
        <member name="M:ZedGraph.XDate.GetDate(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the calendar date (year, month, day, hour, minute, second) corresponding
            to this instance.
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.</param>
            <param name="minute">An integer value for the minute, e.g. 45.</param>
            <param name="second">An integer value for the second, e.g. 35.</param>
        </member>
        <member name="M:ZedGraph.XDate.SetDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the calendar date (year, month, day, hour, minute, second) of this instance.
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.</param>
            <param name="minute">An integer value for the minute, e.g. 45.</param>
            <param name="second">An integer value for the second, e.g. 35.</param>
        </member>
        <member name="M:ZedGraph.XDate.GetDayOfYear">
            <summary>
            Get the day of year value (241.345 means the 241st day of the year)
            corresponding to this instance.
            </summary>
            <returns>The day of the year in floating point double format.</returns>
        </member>
        <member name="M:ZedGraph.XDate.CalendarDateToXLDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate an XL Date from the specified Calendar date (year, month, day, hour, minute, second),
            first normalizing all input data values.
            </summary>
            <remarks>
            The Calendar date is always based on the Gregorian Calendar.  Note that the Gregorian calendar is really
            only valid from October 15, 1582 forward.  The countries that adopted the Gregorian calendar
            first did so on October 4, 1582, so that the next day was October 15, 1582.  Prior to that time
            the Julian Calendar was used.  However, Prior to March 1, 4 AD the treatment of leap years was
            inconsistent, and prior to 45 BC the Julian Calendar did not exist.  The <see cref="T:ZedGraph.XDate"/>
            struct projects only Gregorian dates backwards and does not deal with Julian calendar dates at all.  The
            <see cref="M:ZedGraph.XDate.ToString(System.Double,System.String)"/> method will just append a "(BC)" notation to the end of any dates
            prior to 1 AD, since the <see cref="P:ZedGraph.XDate.DateTime"/> struct throws an exception when formatting earlier dates.
            </remarks>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The integer millisecond value (e.g., 374 for 374 milliseconds past the second).
            </param>
            <returns>The corresponding XL date, expressed in double floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.CalendarDateToXLDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate an XL Date from the specified Calendar date (year, month, day, hour, minute, second),
            first normalizing all input data values.
            </summary>
            <remarks>
            The Calendar date is always based on the Gregorian Calendar.  Note that the Gregorian calendar is really
            only valid from October 15, 1582 forward.  The countries that adopted the Gregorian calendar
            first did so on October 4, 1582, so that the next day was October 15, 1582.  Prior to that time
            the Julian Calendar was used.  However, Prior to March 1, 4 AD the treatment of leap years was
            inconsistent, and prior to 45 BC the Julian Calendar did not exist.  The <see cref="T:ZedGraph.XDate"/>
            struct projects only Gregorian dates backwards and does not deal with Julian calendar dates at all.  The
            <see cref="M:ZedGraph.XDate.ToString(System.Double,System.String)"/> method will just append a "(BC)" notation to the end of any dates
            prior to 1 AD, since the <see cref="P:ZedGraph.XDate.DateTime"/> struct throws an exception when formatting earlier dates.
            </remarks>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <returns>The corresponding XL date, expressed in double floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.CalendarDateToXLDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Calculate an XL Date from the specified Calendar date (year, month, day, hour, minute, second),
            first normalizing all input data values.  The seconds value is a double type, allowing fractional
            seconds.
            </summary>
            <remarks>
            The Calendar date is always based on the Gregorian Calendar.  Note that the Gregorian calendar is really
            only valid from October 15, 1582 forward.  The countries that adopted the Gregorian calendar
            first did so on October 4, 1582, so that the next day was October 15, 1582.  Prior to that time
            the Julian Calendar was used.  However, Prior to March 1, 4 AD the treatment of leap years was
            inconsistent, and prior to 45 BC the Julian Calendar did not exist.  The <see cref="T:ZedGraph.XDate"/>
            struct projects only Gregorian dates backwards and does not deal with Julian calendar dates at all.  The
            <see cref="M:ZedGraph.XDate.ToString(System.Double,System.String)"/> method will just append a "(BC)" notation to the end of any dates
            prior to 1 AD, since the <see cref="P:ZedGraph.XDate.DateTime"/> struct throws an exception when formatting earlier dates.
            </remarks>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The double second value (e.g., 42.3 for 42.3 seconds past the minute).
            </param>
            <returns>The corresponding XL date, expressed in double floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.CalendarDateToJulianDay(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate an Astronomical Julian Day number from the specified Calendar date
            (year, month, day, hour, minute, second), first normalizing all input data values
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <returns>The corresponding Astronomical Julian Day number, expressed in double
            floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.CalendarDateToJulianDay(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate an Astronomical Julian Day number from the specified Calendar date
            (year, month, day, hour, minute, second), first normalizing all input data values
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The integer second value (e.g., 325 for 325 milliseconds past the minute).
            </param>
            <returns>The corresponding Astronomical Julian Day number, expressed in double
            floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.NormalizeCalendarDate(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Normalize a set of Calendar date values (year, month, day, hour, minute, second) to make sure
            that month is between 1 and 12, hour is between 0 and 23, etc.
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The double millisecond value (e.g., 325.3 for 325.3 milliseconds past the second).
            </param>
        </member>
        <member name="M:ZedGraph.XDate._CalendarDateToXLDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Calculate an XL date from the specified Calendar date (year, month, day, hour, minute, second).
            This is the internal trusted version, where all values are assumed to be legitimate
            ( month is between 1 and 12, minute is between 0 and 59, etc. )
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The double millisecond value (e.g., 325.3 for 325.3 milliseconds past the second).
            </param>
            <returns>The corresponding XL date, expressed in double floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate._CalendarDateToJulianDay(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Calculate an Astronomical Julian Day Number from the specified Calendar date
            (year, month, day, hour, minute, second).
            This is the internal trusted version, where all values are assumed to be legitimate
            ( month is between 1 and 12, minute is between 0 and 59, etc. )
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The double millisecond value (e.g., 325.3 for 325.3 milliseconds past the second).
            </param>
            <returns>The corresponding Astronomical Julian Day number, expressed in double
            floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.XLDateToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
        </member>
        <member name="M:ZedGraph.XDate.XLDateToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The integer millisecond value (e.g., 325 for 325 milliseconds past the second).
            </param>
        </member>
        <member name="M:ZedGraph.XDate.XLDateToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The double second value (e.g., 42.3 for 42.3 seconds past the minute).
            </param>
        </member>
        <member name="M:ZedGraph.XDate.JulianDayToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the Astronomical Julian Day number
            </summary>
            <param name="jDay">
            The Astronomical Julian Day number to be converted
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
        </member>
        <member name="M:ZedGraph.XDate.JulianDayToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the Astronomical Julian Day number
            </summary>
            <param name="jDay">
            The Astronomical Julian Day number to be converted
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The double second value (e.g., 42.3 for 42.3 seconds past the minute).
            </param>
        </member>
        <member name="M:ZedGraph.XDate.JulianDayToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the Astronomical Julian Day number
            </summary>
            <param name="jDay">
            The Astronomical Julian Day number to be converted
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The <see cref="T:System.Double" /> millisecond value (e.g., 342.5 for 342.5 milliseconds past
            the second).
            </param>
        </member>
        <member name="M:ZedGraph.XDate.XLDateToJulianDay(System.Double)">
            <summary>
            Calculate an Astronomical Julian Day number corresponding to the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding Astronomical Julian Day number, expressed in double
            floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.JulianDayToXLDate(System.Double)">
            <summary>
            Calculate an XL Date corresponding to the specified Astronomical Julian Day number
            </summary>
            <param name="jDay">
            The Astronomical Julian Day number in floating point double format.
            </param>
            <returns>The corresponding XL Date, expressed in double
            floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.XLDateToDecimalYear(System.Double)">
            <summary>
            Calculate a decimal year value (e.g., 1994.6523) corresponding to the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding decimal year value, expressed in double
            floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.DecimalYearToXLDate(System.Double)">
            <summary>
            Calculate a decimal year value (e.g., 1994.6523) corresponding to the specified XL date
            </summary>
            <param name="yearDec">
            The decimal year value in floating point double format.
            </param>
            <returns>The corresponding XL Date, expressed in double
            floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.XLDateToDayOfYear(System.Double)">
            <summary>
            Calculate a day-of-year value (e.g., 241.543 corresponds to the 241st day of the year)
            corresponding to the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding day-of-year (DoY) value, expressed in double
            floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.XLDateToDayOfWeek(System.Double)">
            <summary>
            Calculate a day-of-week value (e.g., Sun=0, Mon=1, Tue=2, etc.)
            corresponding to the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding day-of-week (DoW) value, expressed in integer format</returns>
        </member>
        <member name="M:ZedGraph.XDate.XLDateToDateTime(System.Double)">
            <summary>
            Convert an XL date format to a .Net DateTime struct
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding XL Date, expressed in double
            floating point format</returns>
            <returns>The corresponding date in the form of a .Net DateTime struct</returns>
        </member>
        <member name="M:ZedGraph.XDate.DateTimeToXLDate(System.DateTime)">
            <summary>
            Convert a .Net DateTime struct to an XL Format date
            </summary>
            <param name="dt">
            The date value in the form of a .Net DateTime struct
            </param>
            <returns>The corresponding XL Date, expressed in double
            floating point format</returns>
        </member>
        <member name="M:ZedGraph.XDate.AddMilliseconds(System.Double)">
            <summary>
            Add the specified number of milliseconds (can be fractional) to the current XDate instance.
            </summary>
            <param name="dMilliseconds">
            The incremental number of milliseconds (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:ZedGraph.XDate.AddSeconds(System.Double)">
            <summary>
            Add the specified number of seconds (can be fractional) to the current XDate instance.
            </summary>
            <param name="dSeconds">
            The incremental number of seconds (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:ZedGraph.XDate.AddMinutes(System.Double)">
            <summary>
            Add the specified number of minutes (can be fractional) to the current XDate instance.
            </summary>
            <param name="dMinutes">
            The incremental number of minutes (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:ZedGraph.XDate.AddHours(System.Double)">
            <summary>
            Add the specified number of hours (can be fractional) to the current XDate instance.
            </summary>
            <param name="dHours">
            The incremental number of hours (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:ZedGraph.XDate.AddDays(System.Double)">
            <summary>
            Add the specified number of days (can be fractional) to the current XDate instance.
            </summary>
            <param name="dDays">
            The incremental number of days (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:ZedGraph.XDate.AddMonths(System.Double)">
            <summary>
            Add the specified number of Months (can be fractional) to the current XDate instance.
            </summary>
            <param name="dMonths">
            The incremental number of months (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:ZedGraph.XDate.AddYears(System.Double)">
            <summary>
            Add the specified number of years (can be fractional) to the current XDate instance.
            </summary>
            <param name="dYears">
            The incremental number of years (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:ZedGraph.XDate.op_Subtraction(ZedGraph.XDate,ZedGraph.XDate)">
            <summary>
            '-' operator overload.  When two XDates are subtracted, the number of days between dates
            is returned.
            </summary>
            <param name="lhs">The left-hand-side of the '-' operator (an XDate class)</param>
            <param name="rhs">The right-hand-side of the '-' operator (an XDate class)</param>
            <returns>The days between dates, expressed as a floating point double</returns>
        </member>
        <member name="M:ZedGraph.XDate.op_Subtraction(ZedGraph.XDate,System.Double)">
            <summary>
            '-' operator overload.  When a double value is subtracted from an XDate, the result is a
            new XDate with the number of days subtracted.
            </summary>
            <param name="lhs">The left-hand-side of the '-' operator (an XDate class)</param>
            <param name="rhs">The right-hand-side of the '-' operator (a double value)</param>
            <returns>An XDate with the rhs number of days subtracted</returns>
        </member>
        <member name="M:ZedGraph.XDate.op_Addition(ZedGraph.XDate,System.Double)">
            <summary>
            '+' operator overload.  When a double value is added to an XDate, the result is a
            new XDate with the number of days added.
            </summary>
            <param name="lhs">The left-hand-side of the '-' operator (an XDate class)</param>
            <param name="rhs">The right-hand-side of the '+' operator (a double value)</param>
            <returns>An XDate with the rhs number of days added</returns>
        </member>
        <member name="M:ZedGraph.XDate.op_Increment(ZedGraph.XDate)">
            <summary>
            '++' operator overload.  Increment the date by one day.
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>An XDate one day later than the specified date</returns>
        </member>
        <member name="M:ZedGraph.XDate.op_Decrement(ZedGraph.XDate)">
            <summary>
            '--' operator overload.  Decrement the date by one day.
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>An XDate one day prior to the specified date</returns>
        </member>
        <member name="M:ZedGraph.XDate.op_Implicit(ZedGraph.XDate)~System.Double">
            <summary>
            Implicit conversion from XDate to double (an XL Date).
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>A double floating point value representing the XL Date</returns>
        </member>
        <member name="M:ZedGraph.XDate.op_Implicit(ZedGraph.XDate)~System.Single">
            <summary>
            Implicit conversion from XDate to float (an XL Date).
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>A double floating point value representing the XL Date</returns>
        </member>
        <member name="M:ZedGraph.XDate.op_Implicit(System.Double)~ZedGraph.XDate">
            <summary>
            Implicit conversion from double (an XL Date) to XDate.
            </summary>
            <param name="xlDate">The XDate struct on which to operate</param>
            <returns>An XDate struct representing the specified xlDate value.</returns>
        </member>
        <member name="M:ZedGraph.XDate.op_Implicit(ZedGraph.XDate)~System.DateTime">
            <summary>
            Implicit conversion from XDate to <see cref="P:ZedGraph.XDate.DateTime"/>.
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>A <see cref="P:ZedGraph.XDate.DateTime"/> struct representing the specified xDate value.</returns>
        </member>
        <member name="M:ZedGraph.XDate.op_Implicit(System.DateTime)~ZedGraph.XDate">
            <summary>
            Implicit conversion from <see cref="P:ZedGraph.XDate.DateTime"/> to <see cref="T:ZedGraph.XDate"/>.
            </summary>
            <param name="dt">The <see cref="P:ZedGraph.XDate.DateTime"/> struct on which to operate</param>
            <returns>An <see cref="T:ZedGraph.XDate"/> struct representing the specified DateTime value.</returns>
        </member>
        <member name="M:ZedGraph.XDate.Equals(System.Object)">
            <summary>
            Tests whether <param>obj</param> is either an <see cref="T:ZedGraph.XDate"/> structure or
            a double floating point value that is equal to the same date as this <c>XDate</c>
            struct instance.
            </summary>
            <param name="obj">The object to compare for equality with this XDate instance.
            This object should be either a type XDate or type double.</param>
            <returns>Returns <c>true</c> if <param>obj</param> is the same date as this
            instance; otherwise, <c>false</c></returns>
        </member>
        <member name="M:ZedGraph.XDate.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:ZedGraph.XDate"/> structure.  In this case, the
            hash code is simply the equivalent hash code for the floating point double date value.
            </summary>
            <returns>An integer representing the hash code for this XDate value</returns>
        </member>
        <member name="M:ZedGraph.XDate.CompareTo(System.Object)">
            <summary>
            Compares one <see cref="T:ZedGraph.XDate" /> object to another.
            </summary>
            <remarks>
            This method will throw an exception if <paramref name="target"/> is not an
            <see cref="T:ZedGraph.XDate"/> object.
            </remarks>
            <param name="target">The second <see cref="T:ZedGraph.XDate" /> object to be compared.</param>
            <returns>zero if <paramref name="target" /> is equal to the current instance,
            -1 if <paramref name="target"/> is less than the current instance, and
            1 if <paramref name="target"/> is greater than the current instance.</returns>
        </member>
        <member name="M:ZedGraph.XDate.ToString(System.Double)">
            <summary>
            Format this XDate value using the default format string (<see cref="F:ZedGraph.XDate.DefaultFormatStr"/>).
            </summary>
            <remarks>
            The formatting is done using the <see cref="P:ZedGraph.XDate.DateTime"/> <see cref="M:System.DateTime.ToString(System.String)"/>
            method in order to provide full localization capability.  The DateTime struct is limited to
            dates from 1 AD onward.  However, all calendar dates in <see cref="T:ZedGraph.XDate"/> and <see cref="P:ZedGraph.XDate.DateTime"/>
            are projected Gregorian calendar dates.  Since the Gregorian calendar was not implemented
            until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are
            really dates that would have been, had the Gregorian calendar existed.  In order to avoid
            throwing an exception, for dates prior to 1 AD, the year will be converted to a positive
            year and the text "(BC)" is appended to the end of the formatted string.  Under this mode, the
            year sequence is 2BC, 1BC, 1AD, 2AD, etc.  There is no year zero.
            </remarks>
            <param name="xlDate">
            The XL date value to be formatted in floating point double format.
            </param>
            <returns>A string representation of the date</returns>
        </member>
        <member name="M:ZedGraph.XDate.ToString">
            <summary>
            Format this XDate value using the default format string (see cref="DefaultFormatStr"/>).
            </summary>
            <remarks>
            The formatting is done using the <see cref="P:ZedGraph.XDate.DateTime" />
            <see cref="M:System.DateTime.ToString(System.String)" />
            method in order to provide full localization capability.  The DateTime struct is limited to
            dates from 1 AD onward.  However, all calendar dates in <see cref="T:ZedGraph.XDate" /> and
            <see cref="P:ZedGraph.XDate.DateTime" />
            are projected Gregorian calendar dates.  Since the Gregorian calendar was not implemented
            until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are
            really dates that would have been, had the Gregorian calendar existed.  In order to avoid
            throwing an exception, for dates prior to 1 AD, the year will be converted to a positive
            year and the text "(BC)" is appended to the end of the formatted string.  Under this mode, the
            year sequence is 2BC, 1BC, 1AD, 2AD, etc.  There is no year zero.
            </remarks>
            <returns>A string representation of the date</returns>
        </member>
        <member name="M:ZedGraph.XDate.ToString(System.String)">
            <summary>
            Format this XL Date value using the specified format string.  The format
            string is specified according to the <see cref="P:ZedGraph.XDate.DateTime"/> class.
            </summary>
            <remarks>
            The formatting is done using the <see cref="P:ZedGraph.XDate.DateTime" />
            <see cref="M:System.DateTime.ToString(System.String)" />
            method in order to provide full localization capability.  The DateTime struct is limited to
            dates from 1 AD onward.  However, all calendar dates in <see cref="T:ZedGraph.XDate" /> and
            <see cref="P:ZedGraph.XDate.DateTime" />
            are projected Gregorian calendar dates.  Since the Gregorian calendar was not implemented
            until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are
            really dates that would have been, had the Gregorian calendar existed.  In order to avoid
            throwing an exception, for dates prior to 1 AD, the year will be converted to a positive
            year and the text "(BC)" is appended to the end of the formatted string.  Under this mode, the
            year sequence is 2BC, 1BC, 1AD, 2AD, etc.  There is no year zero.
            </remarks>
            <param name="fmtStr">
            The formatting string to be used for the date.  See
            <see cref="T:System.Globalization.DateTimeFormatInfo" />
            class for a list of the format types available.</param>
            <returns>A string representation of the date</returns>
        </member>
        <member name="M:ZedGraph.XDate.ToString(System.Double,System.String)">
            <summary>
            Format the specified XL Date value using the specified format string.  The format
            string is specified according to the <see cref="P:ZedGraph.XDate.DateTime" /> class.
            </summary>
            <remarks>
            The formatting is done using the <see cref="P:ZedGraph.XDate.DateTime" />
            <see cref="M:System.DateTime.ToString(System.String)" />
            method in order to provide full localization capability.  The DateTime struct is limited to
            dates from 1 AD onward.  However, all calendar dates in <see cref="T:ZedGraph.XDate" /> and
            <see cref="P:ZedGraph.XDate.DateTime" />
            are projected Gregorian calendar dates.  Since the Gregorian calendar was not implemented
            until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are
            really dates that would have been, had the Gregorian calendar existed.  In order to avoid
            throwing an exception, for dates prior to 1 AD, the year will be converted to a positive
            year and the text "(BC)" is appended to the end of the formatted string.  Under this mode, the
            year sequence is 2BC, 1BC, 1AD, 2AD, etc.  There is no year zero.
            </remarks>
            <param name="xlDate">
            The XL date value to be formatted in floating point double format.
            </param>
            <param name="fmtStr">
            The formatting string to be used for the date.  See
            <see cref="T:System.Globalization.DateTimeFormatInfo" />
            for a list of the format types available.</param>
            <returns>A string representation of the date</returns>
        </member>
        <member name="T:ZedGraph.Y2Axis">
            <summary>
            <see cref="T:ZedGraph.Y2Axis"/> inherits from <see cref="T:ZedGraph.Axis"/>, and defines the
            special characteristics of a vertical axis, specifically located on
            the right side of the <see cref="P:ZedGraph.Chart.Rect"/> of the <see cref="T:ZedGraph.GraphPane"/>
            object
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.16 $ $Date: 2007-04-16 00:03:05 $ </version>
        </member>
        <member name="T:ZedGraph.Y2Axis.Default">
            <summary>
            A simple subclass of the <see cref="T:ZedGraph.Y2Axis.Default"/> class that defines the
            default property values for the <see cref="T:ZedGraph.Y2Axis"/> class.
            </summary>
        </member>
        <member name="F:ZedGraph.Y2Axis.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:ZedGraph.Y2Axis"/>
            (<see cref="P:ZedGraph.Axis.IsVisible"/> property). true to display the scale
            values, title, tic marks, false to hide the axis entirely.
            </summary>
        </member>
        <member name="F:ZedGraph.Y2Axis.Default.IsZeroLine">
            <summary>
            Determines if a line will be drawn at the zero value for the 
            <see cref="T:ZedGraph.Y2Axis"/>, that is, a line that
            divides the negative values from positive values.
            <seealso cref="P:ZedGraph.MajorGrid.IsZeroLine"/>.
            </summary>
        </member>
        <member name="M:ZedGraph.Y2Axis.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:ZedGraph.Y2Axis"/> properties to
            default values as defined in the <see cref="T:ZedGraph.Y2Axis.Default"/> class
            </summary>
        </member>
        <member name="M:ZedGraph.Y2Axis.#ctor(System.String)">
            <summary>
            Default constructor that sets all <see cref="T:ZedGraph.Y2Axis"/> properties to
            default values as defined in the <see cref="T:ZedGraph.Y2Axis.Default"/> class, except
            for the axis title
            </summary>
            <param name="title">The <see cref="P:ZedGraph.Axis.Title"/> for this axis</param>
        </member>
        <member name="M:ZedGraph.Y2Axis.#ctor(ZedGraph.Y2Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The Y2Axis object from which to copy</param>
        </member>
        <member name="M:ZedGraph.Y2Axis.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.Y2Axis.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.Y2Axis.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="F:ZedGraph.Y2Axis.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.Y2Axis.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.Y2Axis.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:ZedGraph.Y2Axis.SetTransformMatrix(System.Drawing.Graphics,ZedGraph.GraphPane,System.Single)">
            <summary>
            Setup the Transform Matrix to handle drawing of this <see cref="T:ZedGraph.Y2Axis"/>
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:ZedGraph.Y2Axis.IsPrimary(ZedGraph.GraphPane)">
            <summary>
            Determines if this <see cref="T:ZedGraph.Axis" /> object is a "primary" one.
            </summary>
            <remarks>
            The primary axes are the <see cref="T:ZedGraph.XAxis" /> (always), the first
            <see cref="T:ZedGraph.YAxis" /> in the <see cref="P:ZedGraph.GraphPane.YAxisList" /> 
            (<see cref="P:ZedGraph.CurveItem.YAxisIndex" /> = 0),  and the first
            <see cref="T:ZedGraph.Y2Axis" /> in the <see cref="P:ZedGraph.GraphPane.Y2AxisList" /> 
            (<see cref="P:ZedGraph.CurveItem.YAxisIndex" /> = 0).  Note that
            <see cref="P:ZedGraph.GraphPane.YAxis" /> and <see cref="P:ZedGraph.GraphPane.Y2Axis" />
            always reference the primary axes.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>true for a primary <see cref="T:ZedGraph.Axis" />, false otherwise</returns>
        </member>
        <member name="M:ZedGraph.Y2Axis.CalcCrossShift(ZedGraph.GraphPane)">
            <summary>
            Calculate the "shift" size, in pixels, in order to shift the axis from its default
            location to the value specified by <see cref="P:ZedGraph.Axis.Cross"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>The shift amount measured in pixels</returns>
        </member>
        <member name="M:ZedGraph.Y2Axis.GetCrossAxis(ZedGraph.GraphPane)">
            <summary>
            Gets the "Cross" axis that corresponds to this axis.
            </summary>
            <remarks>
            The cross axis is the axis which determines the of this Axis when the
            <see cref="P:ZedGraph.Axis.Cross" >Axis.Cross</see> property is used.  The
            cross axis for any <see cref="T:ZedGraph.XAxis" /> or <see cref="T:ZedGraph.X2Axis" />
            is always the primary <see cref="T:ZedGraph.YAxis" />, and
            the cross axis for any <see cref="T:ZedGraph.YAxis" /> or <see cref="T:ZedGraph.Y2Axis" /> is
            always the primary <see cref="T:ZedGraph.XAxis" />.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
        </member>
        <member name="T:ZedGraph.Y2AxisList">
            <summary>
            A collection class containing a list of <see cref="T:ZedGraph.YAxis"/> objects.
            </summary>
            
            <author>John Champion</author>
            <version> $Revision: 3.3 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="M:ZedGraph.Y2AxisList.#ctor">
            <summary>
            Default constructor for the collection class.
            </summary>
        </member>
        <member name="M:ZedGraph.Y2AxisList.#ctor(ZedGraph.Y2AxisList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.Y2AxisList"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.Y2AxisList.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.Y2AxisList.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.Y2AxisList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="P:ZedGraph.Y2AxisList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:ZedGraph.Axis"/> object by
            its ordinal position in the list.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:ZedGraph.YAxis"/> object to be accessed.</param>
            <value>An <see cref="T:ZedGraph.Axis"/> object reference.</value>
        </member>
        <member name="P:ZedGraph.Y2AxisList.Item(System.String)">
            <summary>
            Indexer to access the specified <see cref="T:ZedGraph.Axis"/> object by
            its <see cref="P:ZedGraph.Axis.Title"/> string.
            </summary>
            <param name="title">The string title of the
            <see cref="T:ZedGraph.YAxis"/> object to be accessed.</param>
            <value>A <see cref="T:ZedGraph.Axis"/> object reference.</value>
        </member>
        <member name="M:ZedGraph.Y2AxisList.IndexOf(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:ZedGraph.Axis"/> with the specified <see cref="P:ZedGraph.Axis.Title"/>.
            </summary>
            <remarks>The comparison of titles is not case sensitive, but it must include
            all characters including punctuation, spaces, etc.</remarks>
            <param name="title">The <see cref="T:System.String"/> label that is in the
            <see cref="P:ZedGraph.Axis.Title"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:ZedGraph.Axis"/>,
            or -1 if the <see cref="P:ZedGraph.Axis.Title"/> was not found in the list</returns>
            <seealso cref="M:ZedGraph.Y2AxisList.IndexOfTag(System.String)"/>
        </member>
        <member name="M:ZedGraph.Y2AxisList.IndexOfTag(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:ZedGraph.Axis"/> with the specified <see cref="F:ZedGraph.Axis.Tag" />.
            </summary>
            <remarks>In order for this method to work, the <see cref="F:ZedGraph.Axis.Tag" />
            property must be of type <see cref="T:System.String"/>.</remarks>
            <param name="tagStr">The <see cref="T:System.String"/> tag that is in the
            <see cref="F:ZedGraph.Axis.Tag" /> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:ZedGraph.Axis" />,
            or -1 if the <see cref="F:ZedGraph.Axis.Tag" /> string is not in the list</returns>
            <seealso cref="M:ZedGraph.Y2AxisList.IndexOf(System.String)" />
        </member>
        <member name="M:ZedGraph.Y2AxisList.Add(System.String)">
            <summary>
            Create a new <see cref="T:ZedGraph.Y2Axis" /> and add it to this list.
            </summary>
            <param name="title">The title string for the new axis</param>
            <returns>An integer representing the ordinal position of the new <see cref="T:ZedGraph.Y2Axis" /> in
            this <see cref="T:ZedGraph.Y2AxisList" />.  This is the value that you would set the
            <see cref="P:ZedGraph.CurveItem.YAxisIndex" /> property of a given <see cref="T:ZedGraph.CurveItem" /> to 
            assign it to this new <see cref="T:ZedGraph.Y2Axis" />.  Note that, for a <see cref="T:ZedGraph.Y2Axis" />,
            you would also need to set the <see cref="P:ZedGraph.CurveItem.IsY2Axis" /> property to true.</returns>
        </member>
        <member name="T:ZedGraph.YAxis">
            <summary>
            <see cref="T:ZedGraph.YAxis"/> inherits from <see cref="T:ZedGraph.Axis"/>, and defines the
            special characteristics of a vertical axis, specifically located on
            the right side of the <see cref="P:ZedGraph.Chart.Rect"/> of the <see cref="T:ZedGraph.GraphPane"/>
            object
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.16 $ $Date: 2007-04-16 00:03:06 $ </version>
        </member>
        <member name="T:ZedGraph.YAxis.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:ZedGraph.YAxis"/> class.
            </summary>
        </member>
        <member name="F:ZedGraph.YAxis.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:ZedGraph.YAxis"/>
            (<see cref="P:ZedGraph.Axis.IsVisible"/> property). true to display the scale
            values, title, tic marks, false to hide the axis entirely.
            </summary>
        </member>
        <member name="F:ZedGraph.YAxis.Default.IsZeroLine">
            <summary>
            Determines if a line will be drawn at the zero value for the 
            <see cref="T:ZedGraph.YAxis"/>, that is, a line that
            divides the negative values from positive values.
            <seealso cref="P:ZedGraph.MajorGrid.IsZeroLine"/>.
            </summary>
        </member>
        <member name="M:ZedGraph.YAxis.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:ZedGraph.YAxis"/> properties to
            default values as defined in the <see cref="T:ZedGraph.YAxis.Default"/> class
            </summary>
        </member>
        <member name="M:ZedGraph.YAxis.#ctor(System.String)">
            <summary>
            Default constructor that sets all <see cref="T:ZedGraph.YAxis"/> properties to
            default values as defined in the <see cref="T:ZedGraph.YAxis.Default"/> class, except
            for the axis title
            </summary>
            <param name="title">The <see cref="P:ZedGraph.Axis.Title"/> for this axis</param>
        </member>
        <member name="M:ZedGraph.YAxis.#ctor(ZedGraph.YAxis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The YAxis object from which to copy</param>
        </member>
        <member name="M:ZedGraph.YAxis.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.YAxis.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.YAxis.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="F:ZedGraph.YAxis.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:ZedGraph.YAxis.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:ZedGraph.YAxis.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:ZedGraph.YAxis.SetTransformMatrix(System.Drawing.Graphics,ZedGraph.GraphPane,System.Single)">
            <summary>
            Setup the Transform Matrix to handle drawing of this <see cref="T:ZedGraph.YAxis"/>
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:ZedGraph.GraphPane"/> object using the
            <see cref="M:ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:ZedGraph.YAxis.IsPrimary(ZedGraph.GraphPane)">
            <summary>
            Determines if this <see cref="T:ZedGraph.Axis" /> object is a "primary" one.
            </summary>
            <remarks>
            The primary axes are the <see cref="T:ZedGraph.XAxis" /> (always), the first
            <see cref="T:ZedGraph.YAxis" /> in the <see cref="P:ZedGraph.GraphPane.YAxisList" /> 
            (<see cref="P:ZedGraph.CurveItem.YAxisIndex" /> = 0),  and the first
            <see cref="T:ZedGraph.Y2Axis" /> in the <see cref="P:ZedGraph.GraphPane.Y2AxisList" /> 
            (<see cref="P:ZedGraph.CurveItem.YAxisIndex" /> = 0).  Note that
            <see cref="P:ZedGraph.GraphPane.YAxis" /> and <see cref="P:ZedGraph.GraphPane.Y2Axis" />
            always reference the primary axes.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>true for a primary <see cref="T:ZedGraph.Axis" />, false otherwise</returns>
        </member>
        <member name="M:ZedGraph.YAxis.CalcCrossShift(ZedGraph.GraphPane)">
            <summary>
            Calculate the "shift" size, in pixels, in order to shift the axis from its default
            location to the value specified by <see cref="P:ZedGraph.Axis.Cross"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>The shift amount measured in pixels</returns>
        </member>
        <member name="M:ZedGraph.YAxis.GetCrossAxis(ZedGraph.GraphPane)">
            <summary>
            Gets the "Cross" axis that corresponds to this axis.
            </summary>
            <remarks>
            The cross axis is the axis which determines the of this Axis when the
            <see cref="P:ZedGraph.Axis.Cross" >Axis.Cross</see> property is used.  The
            cross axis for any <see cref="T:ZedGraph.XAxis" /> or <see cref="T:ZedGraph.X2Axis" />
            is always the primary <see cref="T:ZedGraph.YAxis" />, and
            the cross axis for any <see cref="T:ZedGraph.YAxis" /> or <see cref="T:ZedGraph.Y2Axis" /> is
            always the primary <see cref="T:ZedGraph.XAxis" />.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
        </member>
        <member name="T:ZedGraph.YAxisList">
            <summary>
            A collection class containing a list of <see cref="T:ZedGraph.YAxis"/> objects.
            </summary>
            
            <author>John Champion</author>
            <version> $Revision: 3.3 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="M:ZedGraph.YAxisList.#ctor">
            <summary>
            Default constructor for the collection class.
            </summary>
        </member>
        <member name="M:ZedGraph.YAxisList.#ctor(ZedGraph.YAxisList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.YAxisList"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.YAxisList.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.YAxisList.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.YAxisList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="P:ZedGraph.YAxisList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:ZedGraph.Axis"/> object by
            its ordinal position in the list.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:ZedGraph.YAxis"/> object to be accessed.</param>
            <value>An <see cref="T:ZedGraph.Axis"/> object reference.</value>
        </member>
        <member name="P:ZedGraph.YAxisList.Item(System.String)">
            <summary>
            Indexer to access the specified <see cref="T:ZedGraph.Axis"/> object by
            its <see cref="P:ZedGraph.Axis.Title"/> string.
            </summary>
            <param name="title">The string title of the
            <see cref="T:ZedGraph.YAxis"/> object to be accessed.</param>
            <value>A <see cref="T:ZedGraph.Axis"/> object reference.</value>
        </member>
        <member name="M:ZedGraph.YAxisList.IndexOf(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:ZedGraph.Axis"/> with the specified <see cref="P:ZedGraph.Axis.Title"/>.
            </summary>
            <remarks>The comparison of titles is not case sensitive, but it must include
            all characters including punctuation, spaces, etc.</remarks>
            <param name="title">The <see cref="T:System.String"/> label that is in the
            <see cref="P:ZedGraph.Axis.Title"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:ZedGraph.Axis"/>,
            or -1 if the <see cref="P:ZedGraph.Axis.Title"/> was not found in the list</returns>
            <seealso cref="M:ZedGraph.YAxisList.IndexOfTag(System.String)"/>
        </member>
        <member name="M:ZedGraph.YAxisList.IndexOfTag(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:ZedGraph.Axis"/> with the specified <see cref="F:ZedGraph.Axis.Tag" />.
            </summary>
            <remarks>In order for this method to work, the <see cref="F:ZedGraph.Axis.Tag" />
            property must be of type <see cref="T:System.String"/>.
            </remarks>
            <param name="tagStr">The <see cref="T:System.String"/> tag that is in the
            <see cref="F:ZedGraph.Axis.Tag" /> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:ZedGraph.Axis" />,
            or -1 if the <see cref="F:ZedGraph.Axis.Tag" /> string is not in the list</returns>
        </member>
        <member name="M:ZedGraph.YAxisList.Add(System.String)">
            <summary>
            Create a new <see cref="T:ZedGraph.YAxis" /> and add it to this list.
            </summary>
            <param name="title">The title string for the new axis</param>
            <returns>An integer representing the ordinal position of the new <see cref="T:ZedGraph.YAxis" /> in
            this <see cref="T:ZedGraph.YAxisList" />.  This is the value that you would set the
            <see cref="P:ZedGraph.CurveItem.YAxisIndex" /> property of a given <see cref="T:ZedGraph.CurveItem" /> to 
            assign it to this new <see cref="T:ZedGraph.YAxis" />.</returns>
        </member>
        <member name="T:ZedGraph.ZedGraphException">
             <summary>
             An exception thrown by ZedGraph.  A child class of <see cref="T:System.ApplicationException"/>.
             </summary>
            
             <author> Jerry Vos modified by John Champion</author>
             <version> $Revision: 3.2 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="M:ZedGraph.ZedGraphException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ZedGraph.ZedGraphException"/>
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            instance that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            instance that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:ZedGraph.ZedGraphException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference, the current exception is raised
            in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:ZedGraph.ZedGraphException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:ZedGraph.ZedGraphException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="T:ZedGraph.ZedGraphLocale">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.copied_to_clip">
            <summary>
              Looks up a localized string similar to Image copied to clipboard.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.copy">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.page_setup">
            <summary>
              Looks up a localized string similar to Page Setup....
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.print">
            <summary>
              Looks up a localized string similar to Print....
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.save_as">
            <summary>
              Looks up a localized string similar to Save Image As....
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.set_default">
            <summary>
              Looks up a localized string similar to Set Scale to Default.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.show_val">
            <summary>
              Looks up a localized string similar to Show Point Values.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.title_def">
            <summary>
              Looks up a localized string similar to Title.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.undo_all">
            <summary>
              Looks up a localized string similar to Undo All Zoom/Pan.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.unpan">
            <summary>
              Looks up a localized string similar to Un-Pan.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.unscroll">
            <summary>
              Looks up a localized string similar to Undo Scroll.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.unzoom">
            <summary>
              Looks up a localized string similar to Un-Zoom.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.x_title_def">
            <summary>
              Looks up a localized string similar to X Axis.
            </summary>
        </member>
        <member name="P:ZedGraph.ZedGraphLocale.y_title_def">
            <summary>
              Looks up a localized string similar to Y Axis.
            </summary>
        </member>
        <member name="T:ZedGraph.ZoomState">
            <summary>
            A class that captures all the scale range settings for a <see cref="T:ZedGraph.GraphPane"/>.
            </summary>
            <remarks>
            This class is used to store scale ranges in order to allow zooming out to
            prior scale range states.  <see cref="T:ZedGraph.ZoomState"/> objects are maintained in the
            <see cref="T:ZedGraph.ZoomStateStack"/> collection.  The <see cref="T:ZedGraph.ZoomState"/> object holds
            a <see cref="T:ZedGraph.ScaleState"/> object for each of the three axes; the <see cref="T:ZedGraph.XAxis"/>,
            the <see cref="T:ZedGraph.YAxis"/>, and the <see cref="T:ZedGraph.Y2Axis"/>.
            </remarks>
            <author> John Champion </author>
            <version> $Revision: 3.15 $ $Date: 2007-04-16 00:03:07 $ </version>
        </member>
        <member name="T:ZedGraph.ZoomState.StateType">
            <summary>
            An enumeration that describes whether a given state is the result of a Pan or Zoom
            operation.
            </summary>
        </member>
        <member name="F:ZedGraph.ZoomState.StateType.Zoom">
            <summary>
            Indicates the <see cref="T:ZedGraph.ZoomState"/> object is from a Zoom operation
            </summary>
        </member>
        <member name="F:ZedGraph.ZoomState.StateType.WheelZoom">
            <summary>
            Indicates the <see cref="T:ZedGraph.ZoomState"/> object is from a Wheel Zoom operation
            </summary>
        </member>
        <member name="F:ZedGraph.ZoomState.StateType.Pan">
            <summary>
            Indicates the <see cref="T:ZedGraph.ZoomState"/> object is from a Pan operation
            </summary>
        </member>
        <member name="F:ZedGraph.ZoomState.StateType.Scroll">
            <summary>
            Indicates the <see cref="T:ZedGraph.ZoomState"/> object is from a Scroll operation
            </summary>
        </member>
        <member name="F:ZedGraph.ZoomState._xAxis">
            <summary>
            <see cref="T:ZedGraph.ScaleState"/> objects to store the state data from the axes.
            </summary>
        </member>
        <member name="F:ZedGraph.ZoomState._x2Axis">
            <summary>
            <see cref="T:ZedGraph.ScaleState"/> objects to store the state data from the axes.
            </summary>
        </member>
        <member name="F:ZedGraph.ZoomState._type">
            <summary>
            An enum value indicating the type of adjustment being made to the
            scale range state.
            </summary>
        </member>
        <member name="P:ZedGraph.ZoomState.Type">
            <summary>
            Gets a <see cref="T:ZedGraph.ZoomState.StateType" /> value indicating the type of action (zoom or pan)
            saved by this <see cref="T:ZedGraph.ZoomState" />.
            </summary>
        </member>
        <member name="P:ZedGraph.ZoomState.TypeString">
            <summary>
            Gets a string representing the type of adjustment that was made when this scale
            state was saved.
            </summary>
            <value>A string representation for the state change type; typically
            "Pan", "Zoom", or "Scroll".</value>
        </member>
        <member name="M:ZedGraph.ZoomState.#ctor(ZedGraph.GraphPane,ZedGraph.ZoomState.StateType)">
            <summary>
            Construct a <see cref="T:ZedGraph.ZoomState"/> object from the scale ranges settings contained
            in the specified <see cref="T:ZedGraph.GraphPane"/>.
            </summary>
            <param name="pane">The <see cref="T:ZedGraph.GraphPane"/> from which to obtain the scale
            range values.
            </param>
            <param name="type">A <see cref="T:ZedGraph.ZoomState.StateType"/> enumeration that indicates whether
            this saved state is from a pan or zoom.</param>
        </member>
        <member name="M:ZedGraph.ZoomState.#ctor(ZedGraph.ZoomState)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.ZoomState"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.ZoomState.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.ZoomState.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.ZoomState.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:ZedGraph.ZoomState.ApplyState(ZedGraph.GraphPane)">
            <summary>
            Copy the properties from this <see cref="T:ZedGraph.ZoomState"/> out to the specified <see cref="T:ZedGraph.GraphPane"/>.
            </summary>
            <param name="pane">The <see cref="T:ZedGraph.GraphPane"/> to which the scale range properties should be
            copied.</param>
        </member>
        <member name="M:ZedGraph.ZoomState.IsChanged(ZedGraph.GraphPane)">
            <summary>
            Determine if the state contained in this <see cref="T:ZedGraph.ZoomState"/> object is different from
            the state of the specified <see cref="T:ZedGraph.GraphPane"/>.
            </summary>
            <param name="pane">The <see cref="T:ZedGraph.GraphPane"/> object with which to compare states.</param>
            <returns>true if the states are different, false otherwise</returns>
        </member>
        <member name="T:ZedGraph.ZoomStateStack">
            <summary>
            A LIFO stack of prior <see cref="T:ZedGraph.ZoomState"/> objects, used to allow zooming out to prior
            states (of scale range settings).
            </summary>
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="M:ZedGraph.ZoomStateStack.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ZedGraph.ZoomStateStack.#ctor(ZedGraph.ZoomStateStack)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:ZedGraph.ZoomStateStack"/> object from which to copy</param>
        </member>
        <member name="M:ZedGraph.ZoomStateStack.System#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:System.ICloneable" /> interface in a typesafe manner by just
            calling the typed version of <see cref="M:ZedGraph.ZoomStateStack.Clone" />
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:ZedGraph.ZoomStateStack.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="P:ZedGraph.ZoomStateStack.IsEmpty">
            <summary>
            Public readonly property that indicates if the stack is empty
            </summary>
            <value>true for an empty stack, false otherwise</value>
        </member>
        <member name="M:ZedGraph.ZoomStateStack.Push(ZedGraph.GraphPane,ZedGraph.ZoomState.StateType)">
            <summary>
            Add the scale range information from the specified <see cref="T:ZedGraph.GraphPane"/> object as a
            new <see cref="T:ZedGraph.ZoomState"/> entry on the stack.
            </summary>
            <param name="pane">The <see cref="T:ZedGraph.GraphPane"/> object from which the scale range
            information should be copied.</param>
            <param name="type">A <see cref="T:ZedGraph.ZoomState.StateType"/> enumeration that indicates whether this
            state is the result of a zoom or pan operation.</param>
            <returns>The resultant <see cref="T:ZedGraph.ZoomState"/> object that was pushed on the stack.</returns>
        </member>
        <member name="M:ZedGraph.ZoomStateStack.Push(ZedGraph.ZoomState)">
            <summary>
            Add the scale range information from the specified <see cref="T:ZedGraph.ZoomState"/> object as a
            new <see cref="T:ZedGraph.ZoomState"/> entry on the stack.
            </summary>
            <param name="state">The <see cref="T:ZedGraph.ZoomState"/> object to be placed on the stack.</param>
            <returns>The <see cref="T:ZedGraph.ZoomState"/> object (same as the <see paramref="state"/>
            parameter).</returns>
        </member>
        <member name="M:ZedGraph.ZoomStateStack.Pop(ZedGraph.GraphPane)">
            <summary>
            Pop a <see cref="T:ZedGraph.ZoomState"/> entry from the top of the stack, and apply the properties
            to the specified <see cref="T:ZedGraph.GraphPane"/> object.
            </summary>
            <param name="pane">The <see cref="T:ZedGraph.GraphPane"/> object to which the scale range
            information should be copied.</param>
            <returns>The <see cref="T:ZedGraph.ZoomState"/> object that was "popped" from the stack and applied
            to the specified <see cref="T:ZedGraph.GraphPane"/>.  null if no <see cref="T:ZedGraph.ZoomState"/> was
            available (the stack was empty).</returns>
        </member>
        <member name="M:ZedGraph.ZoomStateStack.PopAll(ZedGraph.GraphPane)">
            <summary>
            Pop the <see cref="T:ZedGraph.ZoomState"/> entry from the bottom of the stack, and apply the properties
            to the specified <see cref="T:ZedGraph.GraphPane"/> object.  Clear the stack completely.
            </summary>
            <param name="pane">The <see cref="T:ZedGraph.GraphPane"/> object to which the scale range
            information should be copied.</param>
            <returns>The <see cref="T:ZedGraph.ZoomState"/> object at the bottom of the stack that was applied
            to the specified <see cref="T:ZedGraph.GraphPane"/>.  null if no <see cref="T:ZedGraph.ZoomState"/> was
            available (the stack was empty).</returns>
        </member>
        <member name="P:ZedGraph.ZoomStateStack.Top">
            <summary>
            Gets a reference to the <see cref="T:ZedGraph.ZoomState"/> object at the top of the stack,
            without actually removing it from the stack.
            </summary>
            <value>A <see cref="T:ZedGraph.ZoomState"/> object reference, or null if the stack is empty.</value>
        </member>
    </members>
</doc>
